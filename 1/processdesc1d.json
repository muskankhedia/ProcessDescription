[{"Process":{"Description":"daemonize runs a command as a Unix daemon. As defined in W. Richard Stevens' 1990 book, Unix Network Programming (Addison-Wesley, 1990), a daemon is 'a process that executes 'in the background' (i.e., without an associated terminal or login shell) either waiting for some event to occur, or waiting to perform some specified task on a periodic basis.' Upon startup, a typical daemon program will: Close all open file descriptors (especially standard input, standard output and standard error) Change its working directory to the root filesystem, to ensure that it doesn't tie up another filesystem and prevent it from being unmounted Reset its umask value Run in the background (i.e., fork) Disassociate from its process group (usually a shell), to insulate itself from signals (such as HUP) sent to the process group Ignore all terminal I\/O signals Disassociate from the control terminal (and take steps not to reacquire one) Handle any SIGCLD signals Most programs that are designed to be run as daemons do that work for themselves. However, you'll occasionally run across one that does not. When you must run a daemon program that does not properly make itself into a true Unix daemon, you can use daemonize to force it to run as a true daemon.","Process Name":"daemonize","Link":"https:\/\/linux.die.net\/man\/1\/daemonize"}},{"Process":{"Description":"Removes stale session data from a Django database. This means, any session data which has an expiry date prior to the date the script is run. The script can be run manually or can be scheduled to run at regular intervals as a cron job.","Process Name":"daily_cleanup","Link":"https:\/\/linux.die.net\/man\/1\/daily_cleanup"}},{"Process":{"Description":"Helper script for providing a bootstrapping method to quickly and easily create the framework for a new Dancer application.","Process Name":"dancer","Link":"https:\/\/linux.die.net\/man\/1\/dancer"}},{"Process":{"Description":"Draws a ball that periodically extrudes many random spikes. Ouch!","Process Name":"dangerball","Link":"https:\/\/linux.die.net\/man\/1\/dangerball"}},{"Process":{"Description":"Dapltest is a set of tests developed to exercise, characterize, and verify the DAPL interfaces during development and porting. At least two instantiations of the test must be run. One acts as the server, fielding requests and spawning server-side test threads as needed. Other client invocations connect to the server and issue test requests. The server side of the test, once invoked, listens continuously for client connection requests, until quit or killed. Upon receipt of a connection request, the connection is established, the server and client sides swap version numbers to verify that they are able to communicate, and the client sends the test request to the server. If the version numbers match, and the test request is well-formed, the server spawns the threads needed to run the test before awaiting further connections.","Process Name":"dapltest","Link":"https:\/\/linux.die.net\/man\/1\/dapltest"}},{"Process":{"Description":"Dapltest is a set of tests developed to exercise, characterize, and verify the DAPL interfaces during development and porting. At least two instantiations of the test must be run. One acts as the server, fielding requests and spawning server-side test threads as needed. Other client invocations connect to the server and issue test requests. The server side of the test, once invoked, listens continuously for client connection requests, until quit or killed. Upon receipt of a connection request, the connection is established, the server and client sides swap version numbers to verify that they are able to communicate, and the client sends the test request to the server. If the version numbers match, and the test request is well-formed, the server spawns the threads needed to run the test before awaiting further connections.","Process Name":"dapltest1","Link":"https:\/\/linux.die.net\/man\/1\/dapltest1"}},{"Process":{"Description":"Darcs is a free, open source revision control system. It is: Distributed: Every user has access to the full command set, removing boundaries between server and client or committer and non-committers. Interactive: Darcs is easy to learn and efficient to use because it asks you questions in response to simple commands, giving you choices in your work flow. You can choose to record one change in a file, while ignoring another. As you update from upstream, you can review each patch name, even the full 'diff' for interesting patches. Smart: Originally developed by physicist David Roundy, darcs is based on a unique algebra of patches. This smartness lets you respond to changing demands in ways that would otherwise not be possible. Learn more about spontaneous branches with darcs.","Process Name":"darcs","Link":"https:\/\/linux.die.net\/man\/1\/darcs"}},{"Process":{"Description":"The darkbat command applies dark correction to a set of source frames. The source frames and the dark frame must be in the FITS format and of same dimensions. The output file is written in the FITS format too.","Process Name":"darkbat","Link":"https:\/\/linux.die.net\/man\/1\/darkbat"}},{"Process":{"Description":"Hercules command to retrieve a DSORG=PS (sequential) dataset from CKD\/CCKD DASD. The dataset is presumed to be encoded in EBCDIC. The second form of the command is for 'expert mode' users, and allows more advanced access to data on the DASD image.","Process Name":"dasdseq","Link":"https:\/\/linux.die.net\/man\/1\/dasdseq"}},{"Process":{"Description":"sh is the standard command interpreter for the system. The current version of sh is in the process of being changed to conform with the POSIX 1003.2 and 1003.2a specifications for the shell. This version has many features which make it appear similar in some respects to the Korn shell, but it is not a Korn shell clone (see ksh(1)). Only features designated by POSIX, plus a few Berkeley extensions, are being incorporated into this shell. We expect POSIX conformance by the time 4.4 BSD is released. This man page is not intended to be a tutorial or a complete specification of the shell. Overview The shell is a command that reads lines from either a file or the terminal, interprets them, and generally executes other commands. It is the program that is running when a user logs into the system (although a user can select a different shell with the chsh(1) command). The shell implements a language that has flow control constructs, a macro facility that provides a variety of features in addition to data storage, along with built in history and line editing capabilities. It incorporates many features to aid interactive use and has the advantage that the interpretative language is common to both interactive and non-interactive use (shell scripts). That is, commands can be typed directly to the running shell or can be put into a file and the file can be executed directly by the shell. Invocation If no args are present and if the standard input of the shell is connected to a terminal (or if the -i flag is set), and the -c option is not present, the shell is considered an interactive shell. An interactive shell generally prompts before each command and handles programming and command errors differently (as described below). When first starting, the shell inspects argument 0, and if it begins with a dash '-', the shell is also considered a login shell. This is normally done automatically by the system when the user first logs in. A login shell first reads commands from the files \/etc\/profile and .profile if they exist. If the environment variable ENV is set on entry to an interactive shell, or is set in the .profile of a login shell, the shell next reads commands from the file named in ENV. Therefore, a user should place commands that are to be executed only at login time in the .profile file, and commands that are executed for every interactive shell inside the ENV file. To set the ENV variable to some file, place the following line in your .profile of your home directory ENV=$HOME\/.shinit; export ENV substituting for ''.shinit'' any filename you wish. If command line arguments besides the options have been specified, then the shell treats the first argument as the name of a file from which to read commands (a shell script), and the remaining arguments are set as the positional parameters of the shell ($1, $2, etc). Otherwise, the shell reads commands from its standard input. Argument List Processing All of the single letter options that have a corresponding name can be used as an argument to the -o option. The set -o name is provided next to the single letter option in the description below. Specifying a dash ''-'' turns the option on, while using a plus ''+'' disables the option. The following options can be set from the command line or with the set builtin (described later).             -a allexport'                 Export all variables assigned to. -c' Read commands from the command_string operand instead of from the standard input. Special parameter 0 will be set from the command_name operand and the positional parameters ($1, $2, etc.) set from the remaining argument operands. -C noclobber' Don't overwrite existing files with ''>''. -e errexit' If not interactive, exit immediately if any untested command fails. The exit status of a command is considered to be explicitly tested if the command is used to control an if, elif, while, or until; or if the command is the left hand operand of an ''&&'' or ''||'' operator. -f noglob' Disable pathname expansion. -n noexec' If not interactive, read commands but do not execute them. This is useful for checking the syntax of shell scripts. -u nounset' Write a message to standard error when attempting to expand a variable that is not set, and if the shell is not interactive, exit immediately. -v verbose' The shell writes its input to standard error as it is read. Useful for debugging. -x xtrace' Write each command to standard error (preceded by a '+ ') before it is executed. Useful for debugging. -I ignoreeof' Ignore EOF's from input when interactive. -i interactive Force the shell to behave interactively. -l' Make dash act as if it had been invoked as a login shell. -m monitor' Turn on job control (set automatically when interactive). -s stdin' Read commands from standard input (set automatically if no file arguments are present). This option has no effect when set after the shell has already started running (i.e. with set). -V vi' Enable the built-in vi(1) command line editor (disables -E if it has been set). -E emacs' Enable the built-in emacs(1) command line editor (disables -V if it has been set). -b notify' Enable asynchronous notification of background job completion. (UNIMPLEMENTED for 4.4alpha) Lexical Structure The shell reads input in terms of lines from a file and breaks it up into words at whitespace (blanks and tabs), and at certain sequences of characters that are special to the shell called ''operators''. There are two types of operators: control operators and redirection operators (their meaning is discussed later). Following is a list of operators: Control operators: & && ( ) ; ;; | || <newline> Redirection operators: < > >| << >> <& >& <<- <> Quoting Quoting is used to remove the special meaning of certain characters or words to the shell, such as operators, whitespace, or keywords. There are three types of quoting: matched single quotes, matched double quotes, and backslash. Backslash A backslash preserves the literal meaning of the following character, with the exception of <newline>. A backslash preceding a <newline> is treated as a line continuation. Single Quotes Enclosing characters in single quotes preserves the literal meaning of all the characters (except single quotes, making it impossible to put single-quotes in a single-quoted string). Double Quotes Enclosing characters within double quotes preserves the literal meaning of all characters except dollarsign ($), backquote ('), and backslash (\\). The backslash inside double quotes is historically weird, and serves to quote only the following characters: $ ' \" \\ <newline>. Otherwise it remains literal. Reserved Words Reserved words are words that have special meaning to the shell and are recognized at the beginning of a line and after a control operator. The following are reserved words: ! elif fi while case else for then { } do done until if esac Their meaning is discussed later. Aliases An alias is a name and corresponding value set using the alias(1) builtin command. Whenever a reserved word may occur (see above), and after checking for reserved words, the shell checks the word to see if it matches an alias. If it does, it replaces it in the input stream with its value. For example, if there is an alias called ''lf'' with the value ''ls -F'', then the input: lf foobar <return> would become ls -F foobar <return> Aliases provide a convenient way for naive users to create shorthands for commands without having to learn how to create functions with arguments. They can also be used to create lexically obscure code. This use is discouraged. Commands The shell interprets the words it reads according to a language, the specification of which is outside the scope of this man page (refer to the BNF in the POSIX 1003.2 document). Essentially though, a line is read and if the first word of the line (or after a control operator) is not a reserved word, then the shell has recognized a simple command. Otherwise, a complex command or some other special construct may have been recognized. Simple Commands If a simple command has been recognized, the shell performs the following actions: 1. Leading words of the form ''name=value'' are stripped off andassigned to the environment of the simple command.Redirection operators and their arguments (as described below)are stripped off and saved for processing. 2. The remaining words are expanded as described in the section called ''Expansions'', and the first remaining word is considered the command name and the command is located. The remaining words are considered the arguments of the command. If no command name resulted, then the ''name=value'' variable assignments recognized in item 1 affect the current shell. 3. Redirections are performed as described in the next section. Redirections Redirections are used to change where a command reads its input or sends its output. In general, redirections open, close, or duplicate an existing reference to a file. The overall format used for redirection is: [n] redir-op file where redir-op is one of the redirection operators mentioned previously. Following is a list of the possible redirections. The [n] is an optional number, as in '3' (not '[3]'), that refers to a file descriptor. [n]> file Redirect standard output (or n) to file. [n]>| file Same, but override the -C option. [n]>> file Append standard output (or n) to file. [n]< file Redirect standard input (or n) from file. [n1]<&n2' Duplicate standard input (or n1) from file descriptor n2. [n]<&-' Close standard input (or n). [n1]>&n2' Duplicate standard output (or n1) to n2. [n]>&-' Close standard output (or n). [n]<> file Open file for reading and writing on standard input (or n). The following redirection is often called a ''here-document''. [n]<< delimiter here-doc-text ... delimiter All the text on successive lines up to the delimiter is saved away and made available to the command on standard input, or file descriptor n if it is specified. If the delimiter as specified on the initial line is quoted, then the here-doc-text is treated literally, otherwise the text is subjected to parameter expansion, command substitution, and arithmetic expansion (as described in the section on ''Expansions''). If the operator is ''<<-'' instead of ''<<'', then leading tabs in the here-doc-text are stripped. Search and Execution There are three types of commands: shell functions, builtin commands, and normal programs -- and the command is searched for (by name) in that order. They each are executed in a different way. When a shell function is executed, all of the shell positional parameters (except $0, which remains unchanged) are set to the arguments of the shell function. The variables which are explicitly placed in the environment of the command (by placing assignments to them before the function name) are made local to the function and are set to the values given. Then the command given in the function definition is executed. The positional parameters are restored to their original values when the command completes. This all occurs within the current shell. Shell builtins are executed internally to the shell, without spawning a new process. Otherwise, if the command name doesn't match a function or builtin, the command is searched for as a normal program in the file system (as described in the next section). When a normal program is executed, the shell runs the program, passing the arguments and the environment to the program. If the program is not a normal executable file (i.e., if it does not begin with the \"magic number\" whose ASCII representation is \"#!\", so execve(2) returns ENOEXEC then) the shell will interpret the program in a subshell. The child shell will reinitialize itself in this case, so that the effect will be as if a new shell had been invoked to handle the ad-hoc shell script, except that the location of hashed commands located in the parent shell will be remembered by the child. Note that previous versions of this document and the source code itself misleadingly and sporadically refer to a shell script without a magic number as a \"shell procedure\". Path Search When locating a command, the shell first looks to see if it has a shell function by that name. Then it looks for a builtin command by that name. If a builtin command is not found, one of two things happen: 1. Command names containing a slash are simply executed without performing any searches. 2. The shell searches each entry in PATH in turn for the command. The value of the PATH variable should be a series of entries separated by colons. Each entry consists of a directory name. The current directory may be indicated implicitly by an empty directory name, or explicitly by a single period. Command Exit Status Each command has an exit status that can influence the behaviour of other shell commands. The paradigm is that a command exits with zero for normal or success, and non-zero for failure, error, or a false indication. The man page for each command should indicate the various exit codes and what they mean. Additionally, the builtin commands return exit codes, as does an executed shell function. If a command consists entirely of variable assignments then the exit status of the command is that of the last command substitution if any, otherwise 0. Complex Commands Complex commands are combinations of simple commands with control operators or reserved words, together creating a larger complex command. More generally, a command is one of the following: \u2022 simple command \u2022 pipeline \u2022 list or compound-list \u2022 compound command \u2022 function definition Unless otherwise stated, the exit status of a command is that of the last simple command executed by the command. Pipelines A pipeline is a sequence of one or more commands separated by the control operator |. The standard output of all but the last command is connected to the standard input of the next command. The standard output of the last command is inherited from the shell, as usual. The format for a pipeline is: [!] command1 [| command2 ...] The standard output of command1 is connected to the standard input of command2. The standard input, standard output, or both of a command is considered to be assigned by the pipeline before any redirection specified by redirection operators that are part of the command. If the pipeline is not in the background (discussed later), the shell waits for all commands to complete. If the reserved word ! does not precede the pipeline, the exit status is the exit status of the last command specified in the pipeline. Otherwise, the exit status is the logical NOT of the exit status of the last command. That is, if the last command returns zero, the exit status is 1; if the last command returns greater than zero, the exit status is zero. Because pipeline assignment of standard input or standard output or both takes place before redirection, it can be modified by redirection. For example: $ command1 2>&1 | command2 sends both the standard output and standard error of command1 to the standard input of command2. A ; or <newline> terminator causes the preceding AND-OR-list (described next) to be executed sequentially; a & causes asynchronous execution of the preceding AND-OR-list. Note that unlike some other shells, each process in the pipeline is a child of the invoking shell (unless it is a shell builtin, in which case it executes in the current shell -- but any effect it has on the environment is wiped). Background Commands -- & If a command is terminated by the control operator ampersand (&), the shell executes the command asynchronously -- that is, the shell does not wait for the command to finish before executing the next command. The format for running a command in background is: command1 & [command2 & ...] If the shell is not interactive, the standard input of an asynchronous command is set to \/dev\/null. Lists -- Generally Speaking A list is a sequence of zero or more commands separated by newlines, semicolons, or ampersands, and optionally terminated by one of these three characters. The commands in a list are executed in the order they are written. If command is followed by an ampersand, the shell starts the command and immediately proceed onto the next command; otherwise it waits for the command to terminate before proceeding to the next one. Short-Circuit List Operators ''&&'' and ''||'' are AND-OR list operators. ''&&'' executes the first command, and then executes the second command iff the exit status of the first command is zero. ''||'' is similar, but executes the second command iff the exit status of the first command is nonzero. ''&&'' and ''||'' both have the same priority. Flow-Control Constructs -- if, while, for, case The syntax of the if command is if list then list [ elif list then list ] ... [ else list ] fi The syntax of the while command is while list\ndo   list\ndone The two lists are executed repeatedly while the exit status of the first list is zero. The until command is similar, but has the word until in place of while, which causes it to repeat until the exit status of the first list is zero. The syntax of the for command is for variable [ in [ word ... ] ]\ndo   list\ndone The words following in are expanded, and then the list is executed repeatedly with the variable set to each word in turn. Omitting in word ... is equivalent to in \"$@\". The syntax of the break and continue command is break [ num ]\ncontinue [ num ] Break terminates the num innermost for or while loops. Continue continues with the next iteration of the innermost loop. These are implemented as builtin commands. The syntax of the case command is case word in\npattern) list ;;\n...\nesac The pattern can actually be one or more patterns (see Shell Patterns described later), separated by ''|'' characters. Grouping Commands Together Commands may be grouped by writing either (list) or { list; } The first of these executes the commands in a subshell. Builtin commands grouped into a (list) will not affect the current shell. The second form does not fork another shell so is slightly more efficient. Grouping commands together this way allows you to redirect their output as though they were one program: { printf \" hello \" ; printf \" world\\n\" ; } > greeting Note that ''}'' must follow a control operator (here, '';'') so that it is recognized as a reserved word and not as another command argument. Functions The syntax of a function definition is name () command A function definition is an executable statement; when executed it installs a function named name and returns an exit status of zero. The command is normally a list enclosed between ''{'' and ''}''. Variables may be declared to be local to a function by using a local command. This should appear as the first statement of a function, and the syntax is local [variable | -] ... Local is implemented as a builtin command. When a variable is made local, it inherits the initial value and exported and readonly flags from the variable with the same name in the surrounding scope, if there is one. Otherwise, the variable is initially unset. The shell uses dynamic scoping, so that if you make the variable x local to function f, which then calls function g, references to the variable x made inside g will refer to the variable x declared inside f, not to the global variable named x. The only special parameter that can be made local is ''-''. Making ''-'' local any shell options that are changed via the set command inside the function to be restored to their original values when the function returns. The syntax of the return command is return [exitstatus] It terminates the currently executing function. Return is implemented as a builtin command. Variables and Parameters The shell maintains a set of parameters. A parameter denoted by a name is called a variable. When starting up, the shell turns all the environment variables into shell variables. New variables can be set using the form name=value Variables set by the user must have a name consisting solely of alphabetics, numerics, and underscores - the first of which must not be numeric. A parameter can also be denoted by a number or a special character as explained below. Positional Parameters A positional parameter is a parameter denoted by a number (n > 0). The shell sets these initially to the values of its command line arguments that follow the name of the shell script. The set builtin can also be used to set or reset them. Special Parameters A special parameter is a parameter denoted by one of the following special characters. The value of the parameter is listed next to its character. *'             Expands to the positional parameters, starting from one.When the expansion occurs within a double-quoted string itexpands to a single field with the value of each parameterseparated by the first character of the IFS variable, or bya <space> if IFS is unset. @' Expands to the positional parameters, starting from one. When the expansion occurs within double-quotes, each positional parameter expands as a separate argument. If there are no positional parameters, the expansion of @ generates zero arguments, even when @ is double-quoted. What this basically means, for example, is if $1 is ''abc'' and $2 is ''def ghi'', then \"$@\" expands to the two arguments: \"abc\" \"def ghi\" #' Expands to the number of positional parameters. ?' Expands to the exit status of the most recent pipeline. - (Hyphen.) Expands to the current option flags (the single-letter option names concatenated into a string) as specified on invocation, by the set builtin command, or implicitly by the shell. $' Expands to the process ID of the invoked shell. A subshell retains the same value of $ as its parent. !' Expands to the process ID of the most recent background command executed from the current shell. For a pipeline, the process ID is that of the last command in the pipeline. 0 (Zero.)' Expands to the name of the shell or shell script. Word Expansions This clause describes the various expansions that are performed on words. Not all expansions are performed on every word, as explained later. Tilde expansions, parameter expansions, command substitutions, arithmetic expansions, and quote removals that occur within a single word expand to a single field. It is only field splitting or pathname expansion that can create multiple fields from a single word. The single exception to this rule is the expansion of the special parameter @ within double-quotes, as was described above. The order of word expansion is: 1. Tilde Expansion, Parameter Expansion, Command Substitution, Arithmetic Expansion (these all occur at the same time). 2. Field Splitting is performed on fields generated by step (1) unless the IFS variable is null. 3. Pathname Expansion (unless set -f is in effect). 4. Quote Removal. The $ character is used to introduce parameter expansion, command substitution, or arithmetic evaluation. Tilde Expansion (substituting a user's home directory) A word beginning with an unquoted tilde character (~) is subjected to tilde expansion. All the characters up to a slash (\/) or the end of the word are treated as a username and are replaced with the user's home directory. If the username is missing (as in ~\/foobar), the tilde is replaced with the value of the HOME variable (the current user's home directory). Parameter Expansion The format for parameter expansion is as follows: ${expression} where expression consists of all characters until the matching ''}''. Any ''}'' escaped by a backslash or within a quoted string, and characters in embedded arithmetic expansions, command substitutions, and variable expansions, are not examined in determining the matching ''}''. The simplest form for parameter expansion is: ${parameter} The value, if any, of parameter is substituted. The parameter name or symbol can be enclosed in braces, which are optional except for positional parameters with more than one digit or when parameter is followed by a character that could be interpreted as part of the name. If a parameter expansion occurs inside double-quotes: 1. Pathname expansion is not performed on the results of the expansion. 2. Field splitting is not performed on the results of the expansion, with the exception of @. In addition, a parameter expansion can be modified by using one of the following formats. ${parameter:-word}' Use Default Values. If parameter is unset or null, the expansion of word is substituted; otherwise, the value of parameter is substituted. ${parameter:=word}' Assign Default Values. If parameter is unset or null, the expansion of word is assigned to parameter. In all cases, the final value of parameter is substituted. Only variables, not positional parameters or special parameters, can be assigned in this way. ${parameter:?[word]} Indicate Error if Null or Unset. If parameter is unset or null, the expansion of word (or a message indicating it is unset if word is omitted) is written to standard error and the shell exits with a nonzero exit status. Otherwise, the value of parameter is substituted. An interactive shell need not exit. ${parameter:+word}' Use Alternative Value. If parameter is unset or null, null is substituted; otherwise, the expansion of word is substituted. In the parameter expansions shown previously, use of the colon in the format results in a test for a parameter that is unset or null; omission of the colon results in a test for a parameter that is only unset. ${#parameter}' String Length. The length in characters of the value of parameter. The following four varieties of parameter expansion provide for substring processing. In each case, pattern matching notation (see Shell Patterns), rather than regular expression notation, is used to evaluate the patterns. If parameter is * or @, the result of the expansion is unspecified. Enclosing the full parameter expansion string in double-quotes does not cause the following four varieties of pattern characters to be quoted, whereas quoting characters within the braces has this effect. ${parameter%word}' Remove Smallest Suffix Pattern. The word is expanded to produce a pattern. The parameter expansion then results in parameter, with the smallest portion of the suffix matched by the pattern deleted. ${parameter%%word}' Remove Largest Suffix Pattern. The word is expanded to produce a pattern. The parameter expansion then results in parameter, with the largest portion of the suffix matched by the pattern deleted. ${parameter#word}' Remove Smallest Prefix Pattern. The word is expanded to produce a pattern. The parameter expansion then results in parameter, with the smallest portion of the prefix matched by the pattern deleted. ${parameter##word}' Remove Largest Prefix Pattern. The word is expanded to produce a pattern. The parameter expansion then results in parameter, with the largest portion of the prefix matched by the pattern deleted. Command Substitution Command substitution allows the output of a command to be substituted in place of the command name itself. Command substitution occurs when the command is enclosed as follows: $(command) or ( ''backquoted'' version): 'command' The shell expands the command substitution by executing command in a subshell environment and replacing the command substitution with the standard output of the command, removing sequences of one or more < newline>s at the end of the substitution. (Embedded < newline>s before the end of the output are not removed; however, during field splitting, they may be translated into < space>s, depending on the value of IFS and quoting that is in effect.) Arithmetic Expansion Arithmetic expansion provides a mechanism for evaluating an arithmetic expression and substituting its value. The format for arithmetic expansion is as follows: $((expression)) The expression is treated as if it were in double-quotes, except that a double-quote inside the expression is not treated specially. The shell expands all tokens in the expression for parameter expansion, command substitution, and quote removal. Next, the shell treats this as an arithmetic expression and substitutes the value of the expression. White Space Splitting (Field Splitting) After parameter expansion, command substitution, and arithmetic expansion the shell scans the results of expansions and substitutions that did not occur in double-quotes for field splitting and multiple fields can result. The shell treats each character of the IFS as a delimiter and uses the delimiters to split the results of parameter expansion and command substitution into fields. Pathname Expansion (File Name Generation) Unless the -f flag is set, file name generation is performed after word splitting is complete. Each word is viewed as a series of patterns, separated by slashes. The process of expansion replaces the word with the names of all existing files whose names can be formed by replacing each pattern with a string that matches the specified pattern. There are two restrictions on this: first, a pattern cannot match a string containing a slash, and second, a pattern cannot match a string starting with a period unless the first character of the pattern is a period. The next section describes the patterns used for both Pathname Expansion and the case command. Shell Patterns A pattern consists of normal characters, which match themselves, and meta-characters. The meta-characters are ''!'', ''*'', ''?'', and ''[''. These characters lose their special meanings if they are quoted. When command or variable substitution is performed and the dollar sign or back quotes are not double quoted, the value of the variable or the output of the command is scanned for these characters and they are turned into meta-characters. An asterisk (''*'') matches any string of characters. A question mark matches any single character. A left bracket (''['') introduces a character class. The end of the character class is indicated by a ('']''); if the '']'' is missing then the ''['' matches a ''['' rather than introducing a character class. A character class matches any of the characters between the square brackets. A range of characters may be specified using a minus sign. The character class may be complemented by making an exclamation point the first character of the character class. To include a '']'' in a character class, make it the first character listed (after the ''!'', if any). To include a minus sign, make it the first or last character listed. Builtins This section lists the builtin commands which are builtin because they need to perform some operation that can't be performed by a separate process. In addition to these, there are several other commands that may be builtin for efficiency (e.g. printf(1), echo(1), test(1), etc). :' true A null command that returns a 0 (true) exit value. . file The commands in the specified file are read and executed by the shell. alias [name[=string ...]] If name=string is specified, the shell defines the alias name with value string. If just name is specified, the value of the alias name is printed. With no arguments, the alias builtin prints the names and values of all defined aliases (see unalias). bg [job] ... Continue the specified jobs (or the current job if no jobs are given) in the background. command [-p] [-v] [-V] command [arg ...] Execute the specified command but ignore shell functions when searching for it. (This is useful when you have a shell function with the same name as a builtin command.) -p' search for command using a PATH that guarantees to find all the standard utilities. -V' Do not execute the command but search for the command and print the resolution of the command search. This is the same as the type builtin. -v' Do not execute the command but search for the command and print the absolute pathname of utilities, the name for builtins or the expansion of aliases. cd - cd [-LP] [directory] Switch to the specified directory (default HOME). If an entry for CDPATH appears in the environment of the cd command or the shell variable CDPATH is set and the directory name does not begin with a slash, then the directories listed in CDPATH will be searched for the specified directory. The format of CDPATH is the same as that of PATH. If a single dash is specified as the argument, it will be replaced by the value of OLDPWD. The cd command will print out the name of the directory that it actually switched to if this is different from the name that the user gave. These may be different either because the CDPATH mechanism was used or because the argument is a single dash. The -P option causes the physical directory structure to be used, that is, all symbolic links are resolved to their respective values. The -L option turns off the effect of any preceding -P options. echo [-n] args... Print the arguments on the standard output, separated by spaces. Unless the -n option is present, a newline is output following the arguments. If any of the following sequences of characters is encountered during output, the sequence is not output. Instead, the specified action is performed: \\b' A backspace character is output. \\c' Subsequent output is suppressed. This is normally used at the end of the last argument to suppress the trailing newline that echo would otherwise output. \\f' Output a form feed. \\n' Output a newline character. \\r' Output a carriage return. \\t' Output a (horizontal) tab character. \\v' Output a vertical tab. \\0digits Output the character whose value is given by zero to three octal digits. If there are zero digits, a nul character is output. \\\\' Output a backslash. All other backslash sequences elicit undefined behaviour. eval string ... Concatenate all the arguments with spaces. Then re-parse and execute the command. exec [command arg ...] Unless command is omitted, the shell process is replaced with the specified program (which must be a real program, not a shell builtin or function). Any redirections on the exec command are marked as permanent, so that they are not undone when the exec command finishes. exit [exitstatus] Terminate the shell process. If exitstatus is given it is used as the exit status of the shell; otherwise the exit status of the preceding command is used. export name ... export -p The specified names are exported so that they will appear in the environment of subsequent commands. The only way to un-export a variable is to unset it. The shell allows the value of a variable to be set at the same time it is exported by writing export name=value With no arguments the export command lists the names of all exported variables. With the -p option specified the output will be formatted suitably for non-interactive use. fc [-e editor] [first [last]] fc -l [-nr] [first [last]] fc -s [old=new] [first] The fc builtin lists, or edits and re-executes, commands previously entered to an interactive shell. -e editor Use the editor named by editor to edit the commands. The editor string is a command name, subject to search via the PATH variable. The value in the FCEDIT variable is used as a default when -e is not specified. If FCEDIT is null or unset, the value of the EDITOR variable is used. If EDITOR is null or unset, ed(1) is used as the editor. -l (ell) List the commands rather than invoking an editor on them. The commands are written in the sequence indicated by the first and last operands, as affected by -r, with each command preceded by the command number. -n' Suppress command numbers when listing with -l. -r' Reverse the order of the commands listed (with -l) or edited (with neither -l nor -s). -s' Re-execute the command without invoking an editor. first last Select the commands to list or edit. The number of previous commands that can be accessed are determined by the value of the HISTSIZE variable. The value of first or last or both are one of the following: [+]number A positive number representing a command number; command numbers can be displayed with the -l option. -number A negative decimal number representing the command that was executed number of commands previously. For example, -1 is the immediately previous command. string A string indicating the most recently entered command that begins with that string. If the old=new operand is not also specified with -s, the string form of the first operand cannot contain an embedded equal sign. The following environment variables affect the execution of fc: FCEDIT' Name of the editor to use. HISTSIZE The number of previous commands that are accessible. fg [job] Move the specified job or the current job to the foreground. getopts optstring var The POSIX getopts command, not to be confused with the Bell Labs -derived getopt(1). The first argument should be a series of letters, each of which may be optionally followed by a colon to indicate that the option requires an argument. The variable specified is set to the parsed option. The getopts command deprecates the older getopt(1) utility due to its handling of arguments containing whitespace. The getopts builtin may be used to obtain options and their arguments from a list of parameters. When invoked, getopts places the value of the next option from the option string in the list in the shell variable specified by var and its index in the shell variable OPTIND. When the shell is invoked, OPTIND is initialized to 1. For each option that requires an argument, the getopts builtin will place it in the shell variable OPTARG. If an option is not allowed for in the optstring, then OPTARG will be unset. optstring is a string of recognized option letters (see getopt(3)). If a letter is followed by a colon, the option is expected to have an argument which may or may not be separated from it by white space. If an option character is not found where expected, getopts will set the variable var to a ''?''; getopts will then unset OPTARG and write output to standard error. By specifying a colon as the first character of optstring all errors will be ignored. A nonzero value is returned when the last option is reached. If there are no remaining arguments, getopts will set var to the special option, ''--'', otherwise, it will set var to ''?''. The following code fragment shows how one might process the arguments for a command that can take the options [a] and [b], and the option [c], which requires an argument. while getopts abc: f do case $f in a | b) flag=$f;; c) carg=$OPTARG;; \\?) echo $USAGE; exit 1;; esac done shift 'expr $OPTIND - 1' This code will accept any of the following as equivalent: cmd -acarg file file\ncmd -a -c arg file file\ncmd -carg -a file file\ncmd -a -carg -- file file hash -rv command ... The shell maintains a hash table which remembers the locations of commands. With no arguments whatsoever, the hash command prints out the contents of this table. Entries which have not been looked at since the last cd command are marked with an asterisk; it is possible for these entries to be invalid. With arguments, the hash command removes the specified commands from the hash table (unless they are functions) and then locates them. With the -v option, hash prints the locations of the commands as it finds them. The -r option causes the hash command to delete all the entries in the hash table except for functions. pwd [-LP] builtin command remembers what the current directory is rather than recomputing it each time. This makes it faster. However, if the current directory is renamed, the builtin version of pwd will continue to print the old name for the directory. The -P option causes the physical value of the current working directory to be shown, that is, all symbolic links are resolved to their respective values. The -L option turns off the effect of any preceding -P options. read [-p prompt] [-r] variable [...] The prompt is printed if the -p option is specified and the standard input is a terminal. Then a line is read from the standard input. The trailing newline is deleted from the line and the line is split as described in the section on word splitting above, and the pieces are assigned to the variables in order. At least one variable must be specified. If there are more pieces than variables, the remaining pieces (along with the characters in IFS that separated them) are assigned to the last variable. If there are more variables than pieces, the remaining variables are assigned the null string. The read builtin will indicate success unless EOF is encountered on input, in which case failure is returned. By default, unless the -r option is specified, the backslash ''\\'' acts as an escape character, causing the following character to be treated literally. If a backslash is followed by a newline, the backslash and the newline will be deleted. readonly name ... readonly -p The specified names are marked as read only, so that they cannot be subsequently modified or unset. The shell allows the value of a variable to be set at the same time it is marked read only by writing readonly name=value With no arguments the readonly command lists the names of all read only variables. With the -p option specified the output will be formatted suitably for non-interactive use. printf format [arguments ...] printf formats and prints its arguments, after the first, under control of the format. The format is a character string which contains three types of objects: plain characters, which are simply copied to standard output, character escape sequences which are converted and copied to the standard output, and format specifications, each of which causes printing of the next successive argument. The arguments after the first are treated as strings if the corresponding format is either b, c or s; otherwise it is evaluated as a C constant, with the following extensions: \u2022 A leading plus or minus sign is allowed. \u2022 If the leading character is a single or double quote, the value is the ASCII code of the next character. The format string is reused as often as necessary to satisfy the arguments. Any extra format specifications are evaluated with zero or the null string. Character escape sequences are in backslash notation as defined in ANSI X3.159-1989 (''ANSI C''). The characters and their meanings are as follows: \\a' Write a <bell> character. \\b' Write a <backspace> character. \\f' Write a <form-feed> character. \\n' Write a <new-line> character. \\r' Write a <carriage return> character. \\t' Write a <tab> character. \\v' Write a <vertical tab> character. \\\\' Write a backslash character. \\num' Write an 8-bit character whose ASCII value is the 1-, 2-, or 3-digit octal number num. Each format specification is introduced by the percent character (''%''). The remainder of the format specification includes, in the following order: Zero or more of the following flags: #' A '#' character specifying that the value should be printed in an ''alternative form''. For b, c, d, and s formats, this option has no effect. For the o format the precision of the number is increased to force the first character of the output string to a zero. For the x (X) format, a non-zero result has the string 0x (0X) prepended to it. For e, E, f, g, and G formats, the result will always contain a decimal point, even if no digits follow the point (normally, a decimal point only appears in the results of those formats if a digit follows the decimal point). For g and G formats, trailing zeros are not removed from the result as they would otherwise be. -' A minus sign '-' which specifies left adjustment of the output in the indicated field; +' A '+' character specifying that there should always be a sign placed before the number when using signed formats. ' '' A space specifying that a blank should be left before a positive number for a signed format. A '+' overrides a space if both are used; 0' A zero '0' character indicating that zero-padding should be used rather than blank-padding. A '-' overrides a '0' if both are used; Field Width: An optional digit string specifying a field width; if the output string has fewer characters than the field width it will be blank-padded on the left (or right, if the left-adjustment indicator has been given) to make up the field width (note that a leading zero is a flag, but an embedded zero is part of a field width); Precision: An optional period, '.', followed by an optional digit string giving a precision which specifies the number of digits to appear after the decimal point, for e and f formats, or the maximum number of characters to be printed from a string (b and s formats); if the digit string is missing, the precision is treated as zero; Format: A character which indicates the type of format to use (one of diouxXfwEgGbcs). A field width or precision may be '*' instead of a digit string. In this case an argument supplies the field width or precision. The format characters and their meanings are: diouXx' The argument is printed as a signed decimal (d or i), unsigned octal, unsigned decimal, or unsigned hexadecimal (X or x), respectively. f' The argument is printed in the style [-]ddd.ddd where the number of d's after the decimal point is equal to the precision specification for the argument. If the precision is missing, 6 digits are given; if the precision is explicitly 0, no digits and no decimal point are printed. eE' The argument is printed in the style [-]d.ddde±dd where there is one digit before the decimal point and the number after is equal to the precision specification for the argument; when the precision is missing, 6 digits are produced. An upper-case E is used for an 'E' format. gG' The argument is printed in style f or in style e (E) whichever gives full precision in minimum space. b' Characters from the string argument are printed with backslash-escape sequences expanded. The following additional backslash-escape sequences are supported: \\c' Causes sh to ignore any remaining characters in the string operand containing it, any remaining string operands, and any additional characters in the format operand. \\0num Write an 8-bit character whose ASCII value is the 1-, 2-, or 3-digit octal number num. c' The first character of argument is printed. s' Characters from the string argument are printed until the end is reached or until the number of characters indicated by the precision specification is reached; if the precision is omitted, all characters in the string are printed. %' Print a '%'; no argument is used. In no case does a non-existent or small field width cause truncation of a field; padding takes place only if the specified field width exceeds the actual width. set [ { -options | +options | -- }] arg ... The set command performs three different functions. With no arguments, it lists the values of all shell variables. If options are given, it sets the specified option flags, or clears them as described in the section called Argument List Processing. As a special case, if the option is -o or +o and no argument is supplied, the shell prints the settings of all its options. If the option is -o, the settings are printed in a human-readable format; if the option is +o, the settings are printed in a format suitable for reinput to the shell to affect the same option settings. The third use of the set command is to set the values of the shell's positional parameters to the specified args. To change the positional parameters without changing any options, use ''--'' as the first argument to set. If no args are present, the set command will clear all the positional parameters (equivalent to executing ''shift $#''.) shift [n] Shift the positional parameters n times. A shift sets the value of $1 to the value of $2, the value of $2 to the value of $3, and so on, decreasing the value of $# by one. If n is greater than the number of positional parameters, shift will issue an error message, and exit with return status 2. test expression [ expression ] The test utility evaluates the expression and, if it evaluates to true, returns a zero (true) exit status; otherwise it returns 1 (false). If there is no expression, test also returns 1 (false). All operators and flags are separate arguments to the test utility. The following primaries are used to construct expression: -b file' True if file exists and is a block special file. -c file' True if file exists and is a character special file. -d file' True if file exists and is a directory. -e file' True if file exists (regardless of type). -f file' True if file exists and is a regular file. -g file' True if file exists and its set group ID flag is set. -h file' True if file exists and is a symbolic link. -k file' True if file exists and its sticky bit is set. -n string' True if the length of string is nonzero. -p file' True if file is a named pipe ( FIFO). -r file' True if file exists and is readable. -s file' True if file exists and has a size greater than zero. -t file_descriptor True if the file whose file descriptor number is file_descriptor is open and is associated with a terminal. -u file' True if file exists and its set user ID flag is set. -w file' True if file exists and is writable. True indicates only that the write flag is on. The file is not writable on a read-only file system even if this test indicates true. -x file' True if file exists and is executable. True indicates only that the execute flag is on. If file is a directory, true indicates that file can be searched. -z string' True if the length of string is zero. -L file' True if file exists and is a symbolic link. This operator is retained for compatibility with previous versions of this program. Do not rely on its existence; use -h instead. -O file' True if file exists and its owner matches the effective user id of this process. -G file' True if file exists and its group matches the effective group id of this process. -S file' True if file exists and is a socket. file1 -nt file2 True if file1 and file2 exist and file1 is newer than file2. file1 -ot file2 True if file1 and file2 exist and file1 is older than file2. file1 -ef file2 True if file1 and file2 exist and refer to the same file. string' True if string is not the null string. s1 = s2' True if the strings s1 and s2 are identical. s1 != s2' True if the strings s1 and s2 are not identical. s1 < s2' True if string s1 comes before s2 based on the ASCII value of their characters. s1 > s2' True if string s1 comes after s2 based on the ASCII value of their characters. n1 -eq n2' True if the integers n1 and n2 are algebraically equal. n1 -ne n2' True if the integers n1 and n2 are not algebraically equal. n1 -gt n2' True if the integer n1 is algebraically greater than the integer n2. n1 -ge n2' True if the integer n1 is algebraically greater than or equal to the integer n2. n1 -lt n2' True if the integer n1 is algebraically less than the integer n2. n1 -le n2' True if the integer n1 is algebraically less than or equal to the integer n2. These primaries can be combined with the following operators: ! expression True if expression is false. expression1 -a expression2 True if both expression1 and expression2 are true. expression1 -o expression2 True if either expression1 or expression2 are true. (expression) True if expression is true. The -a operator has higher precedence than the -o operator. times Print the accumulated user and system times for the shell and for processes run from the shell. The return status is 0. trap [action signal ...] Cause the shell to parse and execute action when any of the specified signals are received. The signals are specified by signal number or as the name of the signal. If signal is 0, the action is executed when the shell exits. action may be null, which cause the specified signals to be ignored. With action omitted or set to '-' the specified signals are set to their default action. When the shell forks off a subshell, it resets trapped (but not ignored) signals to the default action. The trap command has no effect on signals that were ignored on entry to the shell. trap without any arguments cause it to write a list of signals and their associated action to the standard output in a format that is suitable as an input to the shell that achieves the same trapping results. Examples: trap List trapped signals and their corresponding action trap '' INT QUIT tstp 30 Ignore signals INT QUIT TSTP USR1 trap date INT Print date upon receiving signal INT type [name ...] Interpret each name as a command and print the resolution of the command search. Possible resolutions are: shell keyword, alias, shell builtin, command, tracked alias and not found. For aliases the alias expansion is printed; for commands and tracked aliases the complete pathname of the command is printed. ulimit [-H | -S] [-a | -tfdscmlpn [value]] Inquire about or set the hard or soft limits on processes or set new limits. The choice between hard limit (which no process is allowed to violate, and which may not be raised once it has been lowered) and soft limit (which causes processes to be signaled but not necessarily killed, and which may be raised) is made with these flags: -H' set or inquire about hard limits -S' set or inquire about soft limits. If neither -H nor -S is specified, the soft limit is displayed or both limits are set. If both are specified, the last one wins. The limit to be interrogated or set, then, is chosen by specifying any one of these flags: -a' show all the current limits -t' show or set the limit on CPU time (in seconds) -f' show or set the limit on the largest file that can be created (in 512-byte blocks) -d' show or set the limit on the data segment size of a process (in kilobytes) -s' show or set the limit on the stack size of a process (in kilobytes) -c' show or set the limit on the largest core dump size that can be produced (in 512-byte blocks) -m' show or set the limit on the total physical memory that can be in use by a process (in kilobytes) -l' show or set the limit on how much memory a process can lock with mlock(2) (in kilobytes) -p' show or set the limit on the number of processes this user can have at one time -n' show or set the limit on the number files a process can have open at once If none of these is specified, it is the limit on file size that is shown or set. If value is specified, the limit is set to that number; otherwise the current limit is displayed. Limits of an arbitrary process can be displayed or set using the sysctl(8) utility. umask [mask] Set the value of umask (see umask(2)) to the specified octal value. If the argument is omitted, the umask value is printed. unalias [-a] [name] If name is specified, the shell removes that alias. If -a is specified, all aliases are removed. unset [-fv] name ... The specified variables and functions are unset and unexported. If -f or -v is specified, the corresponding function or variable is unset, respectively. If a given name corresponds to both a variable and a function, and no options are given, only the variable is unset. wait [job] Wait for the specified job to complete and return the exit status of the last process in the job. If the argument is omitted, wait for all jobs to complete and the return an exit status of zero. Command Line Editing When sh is being used interactively from a terminal, the current command and the command history (see fc in Builtins) can be edited using vi-mode command-line editing. This mode uses commands, described below, similar to a subset of those described in the vi man page. The command 'set -o vi' enables vi-mode editing and place sh into vi insert mode. With vi-mode enabled, sh can be switched between insert mode and command mode. The editor is not described in full here, but will be in a later document. It's similar to vi: typing <ESC> will throw you into command VI command mode. Hitting <return> while in command mode will pass the line to the shell.","Process Name":"dash","Link":"https:\/\/linux.die.net\/man\/1\/dash"}},{"Process":{"Description":"dasher is an information-efficient text-entry interface, driven by natural continuous pointing gestures. Dasher is a competitive text-entry system wherever a full-size keyboard cannot be used.","Process Name":"dasher","Link":"https:\/\/linux.die.net\/man\/1\/dasher"}},{"Process":{"Description":"dat2gmt reads an ASCII version of a gmt file (made by gmt2dat) from standard input and creates a binary gmt file.","Process Name":"dat2gmt","Link":"https:\/\/linux.die.net\/man\/1\/dat2gmt"}},{"Process":{"Description":"data2inc reads a binary or text file and converts it to a pascal typed constant declaration. The constant is an array of characters (zero based), in which each character's ascii value is the value of the byte at the offset index in the binary file. (index is the index in the array). If the input file is a text file, options will be read from the file and an output file will be generated according to the options encountered.","Process Name":"data2inc","Link":"https:\/\/linux.die.net\/man\/1\/data2inc"}},{"Process":{"Description":"datacopy is a utility distributed with FreeTDS. datacopy will move table data from one server to another without the need for intermediate files. datacopy is much faster and more efficient than is freebcp out\/in. datacopy makes use of the db-lib bcp API built into FreeTDS. This API is also available to application developers. datacopy can be used to migrate data between Sybase ASE and SQL Server or vice versa.","Process Name":"datacopy","Link":"https:\/\/linux.die.net\/man\/1\/datacopy"}},{"Process":{"Description":"The datalog program provides a lightweight deductive database system. Queries and database updates are expressed using Datalog-a declarative logic language in which each formula is a function-free Horn clause, and every variable in the head of a clause must appear in the body of the clause. The use of Datalog syntax and an implementation based on tabling intermediate results, ensures that all queries terminate. The program reads and executes the assertions and queries in FILE, or enters interactive mode if an input file is not given.","Process Name":"datalog","Link":"https:\/\/linux.die.net\/man\/1\/datalog"}},{"Process":{"Description":"Display the current time in the given FORMAT, or set the system date. -d, --date= STRING display time described by STRING, not 'now' -f, --file= DATEFILE like --date once for each line of DATEFILE -r, --reference= FILE display the last modification time of FILE -R, --rfc-2822 output date and time in RFC 2822 format. Example: Mon, 07 Aug 2006 12:34:56 -0600 --rfc-3339= TIMESPEC output date and time in RFC 3339 format. TIMESPEC='date', 'seconds', or 'ns' for date and time to the indicated precision. Date and time components are separated by a single space: 2006-08-07 12:34:56-06:00 -s, --set= STRING set time described by STRING -u, --utc, --universal print or set Coordinated Universal Time --help display this help and exit --version output version information and exit FORMAT controls the output. Interpreted sequences are: %% a literal % %a locale's abbreviated weekday name (e.g., Sun) %A locale's full weekday name (e.g., Sunday) %b locale's abbreviated month name (e.g., Jan) %B locale's full month name (e.g., January) %c locale's date and time (e.g., Thu Mar 3 23:05:25 2005) %C century; like %Y, except omit last two digits (e.g., 20) %d day of month (e.g, 01) %D date; same as %m\/%d\/%y %e day of month, space padded; same as %_d %F full date; same as %Y-%m-%d %g last two digits of year of ISO week number (see %G) %G year of ISO week number (see %V); normally useful only with %V %h same as %b %H hour (00..23) %I hour (01..12) %j day of year (001..366) %k hour ( 0..23) %l hour ( 1..12) %m month (01..12) %M minute (00..59) %n a newline %N nanoseconds (000000000..999999999) %p locale's equivalent of either AM or PM; blank if not known %P like %p, but lower case %r locale's 12-hour clock time (e.g., 11:11:04 PM) %R 24-hour hour and minute; same as %H:%M %s seconds since 1970-01-01 00:00:00 UTC %S second (00..60) %t a tab %T time; same as %H:%M:%S %u day of week (1..7); 1 is Monday %U week number of year, with Sunday as first day of week (00..53) %V ISO week number, with Monday as first day of week (01..53) %w day of week (0..6); 0 is Sunday %W week number of year, with Monday as first day of week (00..53) %x locale's date representation (e.g., 12\/31\/99) %X locale's time representation (e.g., 23:13:48) %y last two digits of year (00..99) %Y year %z +hhmm numeric timezone (e.g., -0400) %:z +hh:mm numeric timezone (e.g., -04:00) %::z +hh:mm:ss numeric time zone (e.g., -04:00:00) %:::z numeric time zone with : to necessary precision (e.g., -04, +05:30) %Z alphabetic time zone abbreviation (e.g., EDT) By default, date pads numeric fields with zeroes. The following optional flags may follow '%': - (hyphen) do not pad the field _ (underscore) pad with spaces (zero) pad with zeros ^ use upper case if possible # use opposite case if possible After any flags comes an optional field width, as a decimal number; then an optional modifier, which is either E to use the locale's alternate representations if available, or O to use the locale's alternate numeric symbols if available.","Process Name":"date","Link":"https:\/\/linux.die.net\/man\/1\/date"}},{"Process":{"Description":"dates is a small, lightweight calendar. Dates features an innovative, unified, zooming view and is designed for use on hand-held devices, such as the Nokia 770 or the Sharp Zaurus series of PDAs. Usage: dates [ OPTION...] Help Options: -?, --help Show help options --help-all Show all help options --help-gtk Show GTK+ Options Application Options: -p, --plug Socket ID of an XEmbed socket to plug into --display= DISPLAY X display to use","Process Name":"dates","Link":"https:\/\/linux.die.net\/man\/1\/dates"}},{"Process":{"Description":"dave is a powerful command-line program for interacting with WebDAV-enabled webservers. With dave you can: \u2022 get and put files \u2022 make directories on a remote webserver \u2022 remove files and directories from a remote webserver \u2022 edit a file on the webserver with a single command \u2022 recursively get a remote directory \u2022 recursively put a local directory \u2022 lock and unlock remote files and directories \u2022 securely transfer over https \u2022 authenticate using the safer Digest authentication Dave is a part of the PerlDAV project ( http:\/\/www.webdav.org\/perldav\/) and is built on top of the HTTP::DAV perl API . If you would like to script webdav interactions in Perl checkout the HTTP::DAV API as it's commands are the basis for dave's.","Process Name":"dave","Link":"https:\/\/linux.die.net\/man\/1\/dave"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"db2dvi","Link":"https:\/\/linux.die.net\/man\/1\/db2dvi"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"db2html","Link":"https:\/\/linux.die.net\/man\/1\/db2html"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"db2pdf","Link":"https:\/\/linux.die.net\/man\/1\/db2pdf"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"db2ps","Link":"https:\/\/linux.die.net\/man\/1\/db2ps"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"db2rtf","Link":"https:\/\/linux.die.net\/man\/1\/db2rtf"}},{"Process":{"Description":"docbook2man converts the given DocBook XML document into man pages. By default, the man pages will be output to the current directory. Only the refentry content in the DocBook document is converted. (To convert content outside of a refentry, stylesheet customization is required. See the docbook2X package for details.) The docbook2man command is a wrapper script for a two-step conversion process. See the section \"CONVERSION PROCESS\" below for details.","Process Name":"db2x_docbook2man","Link":"https:\/\/linux.die.net\/man\/1\/db2x_docbook2man"}},{"Process":{"Description":"docbook2texi converts the given DocBook XML document into one or more Texinfo documents. By default, these Texinfo documents will be output to the current directory. The docbook2texi command is a wrapper script for a two-step conversion process. See the section \"CONVERSION PROCESS\" below for details.","Process Name":"db2x_docbook2texi","Link":"https:\/\/linux.die.net\/man\/1\/db2x_docbook2texi"}},{"Process":{"Description":"db2x_manxml converts a Man-XML document into one or more man pages. They are written in the current directory. If xml-document is not given, then the document to convert is read from standard input.","Process Name":"db2x_manxml","Link":"https:\/\/linux.die.net\/man\/1\/db2x_manxml"}},{"Process":{"Description":"db2x_texixml converts a Texi-XML document into one or more Texinfo documents. If xml-document is not given, then the document to convert comes from standard input. The filenames of the Texinfo documents are determined by markup in the Texi-XML source. (If the filenames are not specified in the markup, then db2x_texixml attempts to deduce them from the name of the input file. However, the Texi-XML source should specify the filename, because it does not work when there are multiple output files or when the Texi-XML source comes from standard input.)","Process Name":"db2x_texixml","Link":"https:\/\/linux.die.net\/man\/1\/db2x_texixml"}},{"Process":{"Description":"db2x_xsltproc invokes the XSLT 1.0 processor for docbook2X. This command applies the XSLT stylesheet (usually given by the --stylesheet option) to the XML document in the file xml-document. The result is written to standard output (unless changed with --output). To read the source XML document from standard input, specify - as the input document.","Process Name":"db2x_xsltproc","Link":"https:\/\/linux.die.net\/man\/1\/db2x_xsltproc"}},{"Process":{"Description":"dbclient is a SSH 2 client designed to be small enough to be used in small memory environments, while still being functional and secure enough for general use.","Process Name":"dbclient","Link":"https:\/\/linux.die.net\/man\/1\/dbclient"}},{"Process":{"Description":"dbd can dump, scan, reindex and rebuild Netatalk dbd CNID databases. It must be run with appropiate permissions i.e. as root. dbd -s|-r can be run on active volumes, but dbd -rf, which wipes the db before rebuilding it, checks and enforces that the chosen volume is not in use.","Process Name":"dbd","Link":"https:\/\/linux.die.net\/man\/1\/dbd"}},{"Process":{"Description":"This manual page documents briefly the dbench and tbench benchmarks. This manual page was written for the Debian GNU\/Linux distribution because the original program does not have a manual page. However, it has fairly easy to read source code. Netbench is a terrible benchmark, but it's an \"industry standard\" and it's what is used in the press to rate windows fileservers like Samba and WindowsNT. Given the requirements of running netbench (60 and 150 Windows PCs all on switched fast ethernet and a really grunty server, and a to open up netbench to the masses. Both dbench and tbench read a load description file called client.txt that was derived from a capture of a real netbench run. client.txt is about 25MB and describes the 500 thousand operations that a netbench client does in a typical netbench run. They parse client.txt and use it to produce the same load without having to buy a huge lab. dbench produces only the filesystem load. It does all the same IO calls that the smbd server in Samba would produce when confronted with a netbench run. It does no networking calls. tbench produces only the TCP and process load. It does the same socket calls that smbd would do under a netbench load. It does no filesystem calls. The idea behind tbench is to eliminate smbd from the netbench test, as though the smbd code could be made infinately fast.","Process Name":"dbench","Link":"https:\/\/linux.die.net\/man\/1\/dbench"}},{"Process":{"Description":"Dbfdump prints to standard output the content of dbf files listed. By default, it prints all fields, separated by colons, one record on a line. The output record and column separators can be changed by switches on the command line. You can also ask only for some fields to be printed. The content of associated memo files (dbf, fpt) is printed for memo fields, unless you use the \"--nomemo\" option. You can specify reading the standard input by putting dash (-) instead of file name.","Process Name":"dbfdump","Link":"https:\/\/linux.die.net\/man\/1\/dbfdump"}},{"Process":{"Description":"Dbfdump prints to standard output the content of dbf files listed. By default, it prints all fields, separated by colons, one record on a line. The output record and column separators can be changed by switches on the command line. You can also ask only for some fields to be printed. The content of associated memo files (dbf, fpt) is printed for memo fields, unless you use the \"--nomemo\" option. You can specify reading the standard input by putting dash (-) instead of file name.","Process Name":"dbfdump.pl","Link":"https:\/\/linux.die.net\/man\/1\/dbfdump.pl"}},{"Process":{"Description":"Random LDIF database creator. Used to generate large LDIF files for use in testing the Directory Server.","Process Name":"dbgen.pl","Link":"https:\/\/linux.die.net\/man\/1\/dbgen.pl"}},{"Process":{"Description":"","Process Name":"dbicadmin","Link":"https:\/\/linux.die.net\/man\/1\/dbicadmin"}},{"Process":{"Description":"Dbicdump generates a DBIx::Class schema using \"make_schema_at\" in DBIx::Class::Schema::Loader and dumps it to disk. You can pass any DBIx::Class::Loader::Base constructor option using \"-o <option>=<value>\". For convenience, option names will have \"-\" replaced with \"_\" and values that look like references or quote-like operators will be \"eval\"-ed before being passed to the constructor. The \"dump_directory\" option defaults to the current directory if not specified.","Process Name":"dbicdump","Link":"https:\/\/linux.die.net\/man\/1\/dbicdump"}},{"Process":{"Description":"Replaces any hex addresses, e.g, 0x128f72ce with \"0xN\". Replaces any references to process id or thread id, like \"pid#6254\" with \"pidN\". So a DBI trace line like this: -> STORE for DBD::DBM::st (DBI::st=HASH(0x19162a0)~0x191f9c8 'f_params' ARRAY(0x1922018)) thr#1800400 will look like this: -> STORE for DBD::DBM::st (DBI::st=HASH(0xN)~0xN 'f_params' ARRAY(0xN)) thrN Site Search Library linux docs linux man pages page load time Toys world sunlight moon phase trace explorer","Process Name":"dbilogstrip","Link":"https:\/\/linux.die.net\/man\/1\/dbilogstrip"}},{"Process":{"Description":"This tool is a command-line client for the DBI::ProfileData. It allows you to analyze the profile data file produced by DBI::ProfileDumper and produce various useful reports.","Process Name":"dbiprof","Link":"https:\/\/linux.die.net\/man\/1\/dbiprof"}},{"Process":{"Description":"This tool is just a front end for the DBI::ProxyServer package. All it does is picking options from the command line and calling DBI::ProxyServer::main(). See DBI::ProxyServer for details. Available options include: --chroot=dir ( UNIX only) After doing a bind(), change root directory to the given directory by doing a chroot(). This is useful for security, but it restricts the environment a lot. For example, you need to load DBI drivers in the config file or you have to create hard links to Unix sockets, if your drivers are using them. For example, with MySQL, a config file might contain the following lines: my $rootdir = '\/var\/dbiproxy';\nmy $unixsockdir = '\/tmp';\nmy $unixsockfile = 'mysql.sock';\nforeach $dir ($rootdir, \"$rootdir$unixsockdir\") {\n    mkdir 0755, $dir;\n}\nlink(\"$unixsockdir\/$unixsockfile\",\n     \"$rootdir$unixsockdir\/$unixsockfile\");\nrequire DBD::mysql;\n\n{\n    'chroot' => $rootdir,\n    ...\n} If you don't know chroot(), think of an FTP server where you can see a certain directory tree only after logging in. See also the --group and --user options. --configfile=file Config files are assumed to return a single hash ref that overrides the arguments of the new method. However, command line arguments in turn take precedence over the config file. See the \" CONFIGURATION FILE \" section in the DBI::ProxyServer documentation for details on the config file. --debug Turn debugging mode on. Mainly this asserts that logging messages of level \"debug\" are created. --facility=mode ( UNIX only) Facility to use for Sys::Syslog. The default is daemon. --group=gid After doing a bind(), change the real and effective GID to the given. This is useful, if you want your server to bind to a privileged port (<1024), but don't want the server to execute as root. See also the --user option. GID 's can be passed as group names or numeric values. --localaddr=ip By default a daemon is listening to any IP number that a machine has. This attribute allows to restrict the server to the given IP number. --localport=port This attribute sets the port on which the daemon is listening. It must be given somehow, as there's no default. --logfile=file Be default logging messages will be written to the syslog (Unix) or to the event log (Windows NT ). On other operating systems you need to specify a log file. The special value \" STDERR \" forces logging to stderr. See Net::Daemon::Log for details. --mode=modename The server can run in three different modes, depending on the environment. If you are running Perl 5.005 and did compile it for threads, then the server will create a new thread for each connection. The thread will execute the server's Run() method and then terminate. This mode is the default, you can force it with \"--mode=threads\". If threads are not available, but you have a working fork(), then the server will behave similar by creating a new process for each connection. This mode will be used automatically in the absence of threads or if you use the \"--mode=fork\" option. Finally there's a single-connection mode: If the server has accepted a connection, he will enter the Run() method. No other connections are accepted until the Run() method returns (if the client disconnects). This operation mode is useful if you have neither threads nor fork(), for example on the Macintosh. For debugging purposes you can force this mode with \"--mode=single\". --pidfile=file ( UNIX only) If this option is present, a PID file will be created at the given location. Default is to not create a pidfile. --user=uid After doing a bind(), change the real and effective UID to the given. This is useful, if you want your server to bind to a privileged port (<1024), but don't want the server to execute as root. See also the --group and the --chroot options. UID 's can be passed as group names or numeric values. --version Supresses startup of the server; instead the version string will be printed and the program exits immediately.","Process Name":"dbiproxy","Link":"https:\/\/linux.die.net\/man\/1\/dbiproxy"}},{"Process":{"Description":"","Process Name":"dbmail","Link":"https:\/\/linux.die.net\/man\/1\/dbmail"}},{"Process":{"Description":"The dbmail-deliver program inserts messages from the commandline or from any MTA into the DBMail mailsystem. The program reads from standard input.","Process Name":"dbmail-deliver","Link":"https:\/\/linux.die.net\/man\/1\/dbmail-deliver"}},{"Process":{"Description":"dbpmda is an interactive interface to the interactions between a Performance Metric Domain Agent (pmda(3)) and the Performance Metric Collector Daemon (pmcd(1)). This allows PMDAs to be attached, initialized and exercised to test for correctness. dbpmda interactively prompts the user for commands, many of which emulate the Protocol Data Units (PDUs) that may be sent by a pmcd(1) process. After running dbpmda, enter the command help to get a list of the available commands. The example section below illustrates a session using dbpmda to test a PMDA. To simplify repetitive testing of a PMDA, the file .dbpmdarc in the current working directory can contain a list of commands that will be executed by dbpmda on startup, before the user is prompted to enter further commands interactively. While processing the .dbpmdarc file, interactive mode and command echoing are enabled and then reset at the end of the .dbpmdarc file (see the -i and -e command line arguments below). If the system supports readline(3) then this will be used to read commands when input is from a tty device, so history and command line editing are available. dbpmda accepts the following command line arguments: -e Echo the input to stdout. This is useful when the input is redirected from a file. -i Emulate interactive behavior and prompt for new commands, even if standard input is not a tty device. -n pmnsfile Normally dbpmda operates on the distributed Performance Metrics Name Space (PMNS), however if the -n option is specified an alternative local PMNS is loaded from the file pmnsfile. -q timeout The pmcd to agent version exchange protocol (new in PCP 2.0 - introduced to provide backward compatibility) uses this timeout to specify how long dbpmda should wait before assuming that no version response is coming from an agent. If this timeout is reached, the agent is assumed to be an agent which does not understand the PCP 2.0 protocol. The default timeout interval is five seconds, but the -q option allows an alternative timeout interval (which must be greater than zero) to be specified. The unit of time is seconds. As there are no timeout constraints on a PMDA while using dbpmda (as compared to pmcd(1)), another debugger like dbx(1) can be used on the PMDA process once it has been attached to dbpmda.","Process Name":"dbpmda","Link":"https:\/\/linux.die.net\/man\/1\/dbpmda"}},{"Process":{"Description":"The dbprobe.pl utility is used by pmdadbping(1) to measure response time from a database. A given query is executed on the database at the requested interval (delay, which defaults to 60 seconds). This response time measure can be exported via the Performance Co-Pilot framework for live and historical monitoring using pmdadbping(1).","Process Name":"dbprobe","Link":"https:\/\/linux.die.net\/man\/1\/dbprobe"}},{"Process":{"Description":"dbs_dumptabdata is an utility to create a file set with SQL table data. For each table in the database dbs_dumptabdata calls the appropriate dumper utility with the output directed to a file named table.sql in the current directory. dbs_dumptabdata asks for a password if necessary.","Process Name":"dbs_dumptabdata","Link":"https:\/\/linux.die.net\/man\/1\/dbs_dumptabdata"}},{"Process":{"Description":"dbs_dumptabstruct is an utility to create a file set with SQL table schemas. For each table in the database dbs_dumptabstruct calls the appropriate dumper utility with the output directed to a file named table.sql in the current directory. dbs_dumptabstruct asks for a password if necessary.","Process Name":"dbs_dumptabstruct","Link":"https:\/\/linux.die.net\/man\/1\/dbs_dumptabstruct"}},{"Process":{"Description":"dbs_empty is an utility that completely erases any data from a given SQL database.","Process Name":"dbs_empty","Link":"https:\/\/linux.die.net\/man\/1\/dbs_empty"}},{"Process":{"Description":"dbs_printtab is an utility to print SQL table data on standard output. dbs_printtab asks for a password if necessary.","Process Name":"dbs_printtab","Link":"https:\/\/linux.die.net\/man\/1\/dbs_printtab"}},{"Process":{"Description":"dbs_update is an utility to update SQL databases from text files. FORMAT OF THE TEXT FILES dbs_update assumes that each line of the input contains a data record and that the field within the records are separated by tabulators. You can tell dbs_update about the input format with the --format option. The first field of the data record is used as table specification. These consists of the table name and optionally the index of starting column, separated by a dot. Alternatively dbs_update can read the column names from the first line of input (see the -h\/--headline option). These can even be aliases for the real column names (see the -m\/--map option).","Process Name":"dbs_update","Link":"https:\/\/linux.die.net\/man\/1\/dbs_update"}},{"Process":{"Description":"Scans a Directory Server database index file and dumps the contents.","Process Name":"dbscan","Link":"https:\/\/linux.die.net\/man\/1\/dbscan"}},{"Process":{"Description":"dbus-binding-tool is used to expose a GObject via D-Bus. As input, dbus-binding-tool uses a D-Bus Introspection XML file. As output, the client-side or server-side bindings is generated. This output is a header file which eases the use of a remote D-Bus object. Output is sent to standard out or to the filename specified with the --output argument.","Process Name":"dbus-binding-tool","Link":"https:\/\/linux.die.net\/man\/1\/dbus-binding-tool"}},{"Process":{"Description":"The dbus-cleanup-sockets command cleans up unused D-Bus connection sockets. See http:\/\/www.freedesktop.org\/software\/dbus\/ for more information about the big picture. If given no arguments, dbus-cleanup-sockets cleans up sockets in the standard default socket directory for the per-user-login-session message bus; this is usually \/tmp. Optionally, you can pass a different directory on the command line. On Linux, this program is essentially useless, because D-Bus defaults to using \"abstract sockets\" that exist only in memory and don't have a corresponding file in \/tmp. On most other flavors of UNIX, it's possible for the socket files to leak when programs using D-Bus exit abnormally or without closing their D-Bus connections. Thus, it might be interesting to run dbus-cleanup-sockets in a cron job to mop up any leaked sockets. Or you can just ignore the leaked sockets, they aren't really hurting anything, other than cluttering the output of \"ls \/tmp\"","Process Name":"dbus-cleanup-sockets","Link":"https:\/\/linux.die.net\/man\/1\/dbus-cleanup-sockets"}},{"Process":{"Description":"dbus-daemon is the D-Bus message bus daemon. See http:\/\/www.freedesktop.org\/software\/dbus\/ for more information about the big picture. D-Bus is first a library that provides one-to-one communication between any two applications; dbus-daemon is an application that uses this library to implement a message bus daemon. Multiple programs connect to the message bus daemon and can exchange messages with one another. There are two standard message bus instances: the systemwide message bus (installed on many systems as the \"messagebus\" init service) and the per-user-login-session message bus (started each time a user logs in). dbus-daemon is used for both of these instances, but with a different configuration file. The --session option is equivalent to \"--config-file=\/etc\/dbus-1\/session.conf\" and the --system option is equivalent to \"--config-file=\/etc\/dbus-1\/system.conf\". By creating additional configuration files and using the --config-file option, additional special-purpose message bus daemons could be created. The systemwide daemon is normally launched by an init script, standardly called simply \"messagebus\". The systemwide daemon is largely used for broadcasting system events, such as changes to the printer queue, or adding\/removing devices. The per-session daemon is used for various interprocess communication among desktop applications (however, it is not tied to X or the GUI in any way). SIGHUP will cause the D-Bus daemon to PARTIALLY reload its configuration file and to flush its user\/group information caches. Some configuration changes would require kicking all apps off the bus; so they will only take effect if you restart the daemon. Policy changes should take effect with SIGHUP.","Process Name":"dbus-daemon","Link":"https:\/\/linux.die.net\/man\/1\/dbus-daemon"}},{"Process":{"Description":"dbus-daemon-1 is the D-BUS message bus daemon. See http:\/\/www.freedesktop.org\/software\/dbus\/ for more information about the big picture. D-BUS is first a library that provides one-to-one communication between any two applications; dbus-daemon-1 is an application that uses this library to implement a message bus daemon. Multiple programs connect to the message bus daemon and can exchange messages with one another. There are two standard message bus instances: the systemwide message bus (installed on many systems as the \"messagebus\" service) and the per-user-login-session message bus (started each time a user logs in). dbus-daemon-1 is used for both of these instances, but with a different configuration file. The --session option is equivalent to \"--config-file=\/etc\/dbus-1\/session.conf\" and the --system option is equivalent to \"--config-file=\/etc\/dbus-1\/system.conf\". By creating additional configuration files and using the --config-file option, additional special-purpose message bus daemons could be created. The systemwide daemon is normally launched by an init script, standardly called simply \"messagebus\". The systemwide daemon is largely used for broadcasting system events, such as changes to the printer queue, or adding\/removing devices. The per-session daemon is used for various interprocess communication among desktop applications (however, it is not tied to X or the GUI in any way). There is no way to cause the D-BUS daemon to reload its configuration file (HUP will not do so). The reason is that changing configuration would break the semantics expected by applications connected to the message bus. Thus, changing configuration would require kicking all apps off the bus; so you may as well just restart the daemon.","Process Name":"dbus-daemon-1","Link":"https:\/\/linux.die.net\/man\/1\/dbus-daemon-1"}},{"Process":{"Description":"The dbus-launch command is used to start a session bus instance of dbus-daemon from a shell script. It would normally be called from a user's login scripts. Unlike the daemon itself, dbus-launch exits, so backticks or the $() construct can be used to read information from dbus-launch. With no arguments, dbus-launch will launch a session bus instance and print the address and pid of that instance to standard output. You may specify a program to be run; in this case, dbus-launch will launch a session bus instance, set the appropriate environment variables so the specified program can find the bus, and then execute the specified program, with the specified arguments. See below for examples. If you launch a program, dbus-launch will not print the information about the new bus to standard output. When dbus-launch prints bus information to standard output, by default it is in a simple key-value pairs format. However, you may request several alternate syntaxes using the --sh-syntax, --csh-syntax, --binary-syntax, or --auto-syntax options. Several of these cause dbus-launch to emit shell code to set up the environment. With the --auto-syntax option, dbus-launch looks at the value of the SHELL environment variable to determine which shell syntax should be used. If SHELL ends in \"csh\", then csh-compatible code is emitted; otherwise Bourne shell code is emitted. Instead of passing --auto-syntax, you may explicity specify a particular one by using --sh-syntax for Bourne syntax, or --csh-syntax for csh syntax. In scripts, it's more robust to avoid --auto-syntax and you hopefully know which shell your script is written in. See http:\/\/www.freedesktop.org\/software\/dbus\/ for more information about D-Bus. See also the man page for dbus-daemon. Here is an example of how to use dbus-launch with an sh-compatible shell to start the per-session bus daemon: ## test for an existing bus daemon, just to be safe\nif test -z \"$DBUS_SESSION_BUS_ADDRESS\" ; then\n    ## if not found, launch a new one\n    eval 'dbus-launch --sh-syntax --exit-with-session'\n    echo \"D-Bus per-session daemon address is: $DBUS_SESSION_BUS_ADDRESS\"\nfi You might run something like that in your login scripts. Another way to use dbus-launch is to run your main session program, like so: dbus-launch gnome-session The above would likely be appropriate for ~\/.xsession or ~\/.Xclients.","Process Name":"dbus-launch","Link":"https:\/\/linux.die.net\/man\/1\/dbus-launch"}},{"Process":{"Description":"The dbus-monitor command is used to monitor messages going through a D-Bus message bus. See http:\/\/www.freedesktop.org\/software\/dbus\/ for more information about the big picture. There are two well-known message buses: the systemwide message bus (installed on many systems as the \"messagebus\" service) and the per-user-login-session message bus (started each time a user logs in). The --system and --session options direct dbus-monitor to monitor the system or session buses respectively. If neither is specified, dbus-monitor monitors the session bus. dbus-monitor has two different output modes, the 'classic'-style monitoring mode and profiling mode. The profiling format is a compact format with a single line per message and microsecond-resolution timing information. The --profile and --monitor options select the profiling and monitoring output format respectively. If neither is specified, dbus-monitor uses the monitoring output format. In order to get dbus-monitor to see the messages you are interested in, you should specify a set of watch expressions as you would expect to be passed to the dbus_bus_add_match function. The message bus configuration may keep dbus-monitor from seeing all messages, especially if you run the monitor as a non-root user.","Process Name":"dbus-monitor","Link":"https:\/\/linux.die.net\/man\/1\/dbus-monitor"}},{"Process":{"Description":"The dbus-send command is used to send a message to a D-Bus message bus. See http:\/\/www.freedesktop.org\/software\/dbus\/ for more information about the big picture. There are two well-known message buses: the systemwide message bus (installed on many systems as the \"messagebus\" service) and the per-user-login-session message bus (started each time a user logs in). The --system and --session options direct dbus-send to send messages to the system or session buses respectively. If neither is specified, dbus-send sends to the session bus. Nearly all uses of dbus-send must provide the --dest argument which is the name of a connection on the bus to send the message to. If --dest is omitted, no destination is set. The object path and the name of the message to send must always be specified. Following arguments, if any, are the message contents (message arguments). These are given as type-specified values and may include containers (arrays, dicts, and variants) as described below. <contents>   ::= <item> | <container> [ <item> | <container>...]\n<item>       ::= <type>:<value>\n<container>  ::= <array> | <dict> | <variant>\n<array>      ::= array:<type>:<value>[,<value>...]\n<dict>       ::= dict:<type>:<type>:<key>,<value>[,<key>,<value>...]\n<variant>    ::= variant:<type>:<value>\n<type>       ::= string | int16 | uint 16 | int32 | uint32 | int64 | uint64 | double\n| byte | boolean | objpath D-Bus supports more types than these, but dbus-send currently does not. Also, dbus-send does not permit empty containers or nested containers (e.g. arrays of variants). Here is an example invocation: dbus-send --dest=org.freedesktop.ExampleName               \\\n          \/org\/freedesktop\/sample\/object\/name              \\\n          org.freedesktop.ExampleInterface.ExampleMethod   \\\n          int32:47 string:'hello world' double:65.32       \\\n          array:string:\"1st item\",\"next item\",\"last item\"  \\\n          dict:string:int32:\"one\",1,\"two\",2,\"three\",3      \\\n          variant:int32:-8                                 \\\n          objpath:\/org\/freedesktop\/sample\/object\/name Note that the interface is separated from a method or signal name by a dot, though in the actual protocol the interface and the interface member are separate fields.","Process Name":"dbus-send","Link":"https:\/\/linux.die.net\/man\/1\/dbus-send"}},{"Process":{"Description":"The dbus-uuidgen command generates or reads a universally unique ID. Note that the D-Bus UUID has no relationship to RFC 4122 and does not generate UUIDs compatible with that spec. Many systems have a separate command for that (often called \"uuidgen\"). See http:\/\/www.freedesktop.org\/software\/dbus\/ for more information about D-Bus. The primary usage of dbus-uuidgen is to run in the post-install script of a D-Bus package like this: dbus-uuidgen --ensure This will ensure that \/var\/lib\/dbus\/machine-id exists and has the uuid in it. It won't overwrite an existing uuid, since this id should remain fixed for a single machine until the next reboot at least. The important properties of the machine UUID are that 1) it remains unchanged until the next reboot and 2) it is different for any two running instances of the OS kernel. That is, if two processes see the same UUID, they should also see the same shared memory, UNIX domain sockets, local X displays, localhost.localdomain resolution, process IDs, and so forth. If you run dbus-uuidgen with no options it just prints a new uuid made up out of thin air. If you run it with --get, it prints the machine UUID by default, or the UUID in the specified file if you specify a file. If you try to change an existing machine-id on a running system, it will probably result in bad things happening. Don't try to change this file. Also, don't make it the same on two different systems; it needs to be different anytime there are two different kernels running. The UUID should be different on two different virtual machines, because there are two different kernels.","Process Name":"dbus-uuidgen","Link":"https:\/\/linux.die.net\/man\/1\/dbus-uuidgen"}},{"Process":{"Description":"Dbview is a little tool that will display dBase III files. You can also use it to convert your old .dbf files for further use with Unix. It should also work with dBase IV files, but this is mostly untested. By default dbview displays the contents of a dBase III or IV database file. This is be done by displaying both the name of the field itself and its value. At the end of every record a newline is appended.","Process Name":"dbview","Link":"https:\/\/linux.die.net\/man\/1\/dbview"}},{"Process":{"Description":"dc is a reverse-polish desk calculator which supports unlimited precision arithmetic. It also allows you to define and call macros. Normally dc reads from the standard input; if any command arguments are given to it, they are filenames, and dc reads and executes the contents of the files before reading from standard input. All normal output is to standard output; all error output is to standard error. A reverse-polish calculator stores numbers on a stack. Entering a number pushes it on the stack. Arithmetic operations pop arguments off the stack and push the results. To enter a number in dc, type the digits (using upper case letters A through F as \"digits\" when working with input bases greater than ten), with an optional decimal point. Exponential notation is not supported. To enter a negative number, begin the number with ''_''. ''-'' cannot be used for this, as it is a binary operator for subtraction instead. To enter two numbers in succession, separate them with spaces or newlines. These have no meaning as commands.","Process Name":"dc","Link":"https:\/\/linux.die.net\/man\/1\/dc"}},{"Process":{"Description":"Get one image using libdc1394 and store it as a portable pix map (ppm) image.","Process Name":"dc1394_grab_color_image","Link":"https:\/\/linux.die.net\/man\/1\/dc1394_grab_color_image"}},{"Process":{"Description":"Get one gray image using libdc1394 and store it in portable grayscale map format in Image.pgm","Process Name":"dc1394_grab_gray_image","Link":"https:\/\/linux.die.net\/man\/1\/dc1394_grab_gray_image"}},{"Process":{"Description":"Grab partial image from camera. Camera must be format 7 (scalable image size) compatible. The image will be stored as a Portable Grayscale map in Part.pgm.","Process Name":"dc1394_grab_partial_image","Link":"https:\/\/linux.die.net\/man\/1\/dc1394_grab_partial_image"}},{"Process":{"Description":"View format0-only camera video from one or more cameras.","Process Name":"dc1394_multiview","Link":"https:\/\/linux.die.net\/man\/1\/dc1394_multiview"}},{"Process":{"Description":"Finds the 1394 bus of the first camera found and resets it","Process Name":"dc1394_reset_bus","Link":"https:\/\/linux.die.net\/man\/1\/dc1394_reset_bus"}},{"Process":{"Description":"Sends format0 640x480 RGB to the vloopback input device so that it can be consumed by V4L applications on the vloopback output device.","Process Name":"dc1394_vloopback","Link":"https:\/\/linux.die.net\/man\/1\/dc1394_vloopback"}},{"Process":{"Description":"","Process Name":"dc3dd","Link":"https:\/\/linux.die.net\/man\/1\/dc3dd"}},{"Process":{"Description":"dc_client runs a client proxy to provide access to a remote cache server (typically over TCP\/IPv4) by providing a local service (typically over unix domain sockets). It starts listening on a configurable network address for connections and establishes a persistent connection to an instance of dc_server for proxying cache operations to. Incoming connections are expected to communicate using the distcache(8) protocol, and would typically be applications using one of the distcache APIs in libdistcache to encapsulate these communications. The common use of dc_client is to run as a local agent on each host machine that requires use of the distributed cache, as the listening address should probably use unix domain sockets which are better suited to frequent (and temporary) connections being used for individual cache operations. Likewise, the connection dc_client makes to the cache server (dc_server) for proxying cache operations is typically over a genuine network to remote machine, using TCP\/IPv4.","Process Name":"dc_client","Link":"https:\/\/linux.die.net\/man\/1\/dc_client"}},{"Process":{"Description":"dc_server runs a cache server and starts listening on a configurable network address for connections. Incoming connections are expected to communicate using the distcache(8) protocol, and would typically be instances of dc_client(1) running on other machines.","Process Name":"dc_server","Link":"https:\/\/linux.die.net\/man\/1\/dc_server"}},{"Process":{"Description":"dc_snoop runs as a transparent proxy supporting the distcache(8) protocol and (in theory) should work when inserted between any compliant tools. Ie. this can be used to monitor cache operation requests and responses between applications and dc_client, or between dc_client and dc_server. This tool is still in early stages of development and is provided very much ''as-is''. It is intended to be used by developers with access to the source code - for now, most configurable behaviour of dc_snoop is set in source code and can not be manipulated on the command-line.","Process Name":"dc_snoop","Link":"https:\/\/linux.die.net\/man\/1\/dc_snoop"}},{"Process":{"Description":"dc_test runs a configurable number of session caching operations against a given network address using the distcache(8) protocol. This is typically to verify an installation, to help diagnose problems, and to measure latency and\/or throughput. The given address could be for an instance of dc_client or directly to a running instance of dc_server. Note that whenever the service is running over TCP\/IPv4, use of the -persistent flag is advised because many systems will fairly quickly exhaust the limit of available file-descriptors and stop allowing new sockets until the closed connections finish with the TIME_WAIT state. dc_test runs one cache operation at a time, so it provides an accurate measurement of latency in the distcache architecture being tested. However if one wants to test the potential throughput of the architecture when multiple cache operations occur in parallel (and distcache tools are asynchronous to scale well in such circumstances), it makes sense to launch multiple instances of dc_test in parallel. dc_test attempts to verify correctness of any optimisation caching tricks in distcache tools by creating an array of ''sessions'' in advance and then sending sending ADD , GET , and REMOVE requests on these sessions chosen completely at random. As such, many of these requests should fail, and dc_test will itself immediately halt with an error if any operation that should succeed fails or any operation that should fail succeeds.","Process Name":"dc_test","Link":"https:\/\/linux.die.net\/man\/1\/dc_test"}},{"Process":{"Description":"'dcadec' plays DTS Coherent Acoustics audio streams. Input is from stdin if no file is given. -h display help and available audio modes -s use program stream demultiplexer, track 0-7 or 0x80-0x87 -t pid use transport stream demultiplexer, pid 0x10-0x1ffe -c use c implementation, disables all accelerations -r disable dynamic range compression -o mode use audio output driver 'mode'. A list of modes is available using the -h option.","Process Name":"dcadec","Link":"https:\/\/linux.die.net\/man\/1\/dcadec"}},{"Process":{"Description":"dccm handles the SynCE connection. This daemon should be run by the same user as will run any tools that connect to the device.","Process Name":"dccm","Link":"https:\/\/linux.die.net\/man\/1\/dccm"}},{"Process":{"Description":"The dccp utility provides a cp(1) like functionality on the dCache file system. The source must be a single file while the destination could be a directory name or a file name. If the directory is a destination, a new file with the same name as the source name will be created there and the contents of the source will be copied. If the final destination file exists in dCache, it won't be overwritten and an error code will be returned. Files in regular file systems will always be overwritten if the -i option is not specified. If the source and the final destination file are located on a regular file system, the dccp utility can be used similar to the cp(1) program.","Process Name":"dccp","Link":"https:\/\/linux.die.net\/man\/1\/dccp"}},{"Process":{"Description":"Copy a file, converting and formatting according to the options. bs=BYTES force ibs=BYTES and obs=BYTES cbs=BYTES convert BYTES bytes at a time conv=KEYWORDS convert the file as per the comma separated keyword list count=BLOCKS copy only BLOCKS input blocks ibs=BYTES read BYTES bytes at a time if=FILE read from FILE instead of stdin obs=BYTES write BYTES bytes at a time of=FILE write to FILE instead of stdout NOTE: of=FILE may be used several times to write output to multiple files simultaneously of:=COMMAND exec and write output to process COMMAND seek=BLOCKS skip BLOCKS obs-sized blocks at start of output skip=BLOCKS skip BLOCKS ibs-sized blocks at start of input pattern=HEX use the specified binary pattern as input textpattern=TEXT use repeating TEXT as input errlog=FILE send error messages to FILE as well as stderr hashwindow=BYTES perform a hash on every BYTES amount of data hash=NAME either md5, sha1, sha256, sha384 or sha512 default algorithm is md5. To select multiple algorithms to run simultaneously enter the names in a comma separated list hashlog=FILE send MD5 hash output to FILE instead of stderr if you are using multiple hash algorithms you can send each to a seperate file using the convention ALGORITHMlog=FILE, for example md5log=FILE1, sha1log=FILE2, etc. hashlog:=COMMAND exec and write hashlog to process COMMAND ALGORITHMlog:=COMMAND also works in the same fashion hashconv=[before|after] perform the hashing before or after the conversions hashformat=FORMAT display each hashwindow according to FORMAT the hash format mini-language is described below totalhashformat=FORMAT display the total hash value according to FORMAT status=[on|off] display a continual status message on stderr default state is \"on\" statusinterval=N update the status message every N blocks default value is 256 sizeprobe=[if|of] determine the size of the input or output file for use with status messages. (this option gives you a percentage indicator) WARNING: do not use this option against a tape device. split=BYTES write every BYTES amount of data to a new file This operation applies to any of=FILE that follows splitformat=TEXT the file extension format for split operation. you may use any number of 'a' or 'n' in any combo the default format is \"nnn\" NOTE: The split and splitformat options take effect only for output files specified AFTER these options appear in the command line. Likewise, you may specify these several times for for different output files within the same command line. you may use as many digits in any combination you would like. (e.g. \"anaannnaana\" would be valid, but quite insane) vf=FILE verify that FILE matches the specified input verifylog=FILE send verify results to FILE instead of stderr verifylog:=COMMAND exec and write verify results to process COMMAND --help display this help and exit --version output version information and exit The structure of of FORMAT may contain any valid text and special variables. The built-in variables are used the following format: #variable_name# To pass FORMAT strings to the program from a command line, it may be necessary to surround your FORMAT strings with \"quotes.\" The built-in variables are listed below: window_start The beginning byte offset of the hashwindow window_end The ending byte offset of the hashwindow block_start The beginning block (by input blocksize) of the window block_end The ending block (by input blocksize) of the hash window hash The hash value algorithm The name of the hash algorithm For example, the default FORMAT for hashformat and totalhashformat are: hashformat=\"#window_start# - #window_end#: #hash#\" totalhashformat=\"Total (#algorithm#): #hash#\" The FORMAT structure accepts the following escape codes: \\n Newline \\t Tab \\r Carriage return \\\\ Insert the '\\' character ## Insert the '#' character as text, not a variable BLOCKS and BYTES may be followed by the following multiplicative suffixes: xM M, c 1, w 2, b 512, kD 1000, k 1024, MD 1,000,000, M 1,048,576, GD 1,000,000,000, G 1,073,741,824, and so on for T, P, E, Z, Y. Each KEYWORD may be: ascii from EBCDIC to ASCII ebcdic from ASCII to EBCDIC ibm from ASCII to alternated EBCDIC block pad newline-terminated records with spaces to cbs-size unblock replace trailing spaces in cbs-size records with newline lcase change upper case to lower case notrunc do not truncate the output file ucase change lower case to upper case swab swap every pair of input bytes noerror continue after read errors sync pad every input block with NULs to ibs-size; when used with block or unblock, pad with spaces rather than NULs","Process Name":"dcfldd","Link":"https:\/\/linux.die.net\/man\/1\/dcfldd"}},{"Process":{"Description":"dchroot allows the user to run a command or a login shell in a chroot environment. If no command is specified, a login shell will be started in the user's home directory inside the chroot. The command is one or more arguments which will be run in the user's default shell using its -c option. As a result, shell code may be embedded in this argument. If multiple command options are used, they are concatenated together, separated by spaces. Users should be aware of the shell quoting issues this presents, and should use schroot if necessary, which does not have any quoting issues. The directory the command or login shell is run in depends upon the context. See --directory option below for a complete description. This version of dchroot is a compatibility wrapper around the schroot(1) program. It is provided for backward compatibility with the dchroot command-line options, but schroot is recommended for future use. See the section \"Migration\" below for help migrating an existing dchroot configuration to schroot. See the section \"Incompatibilities\" below for known incompatibilities with older versions of dchroot. If no chroot is specified, the chroot name or alias 'default' will be used as a fallback. If using the configuration in \/etc\/dchroot.conf, the first chroot in the file is the default.","Process Name":"dchroot","Link":"https:\/\/linux.die.net\/man\/1\/dchroot"}},{"Process":{"Description":"dcl2inc postprocessing declaration files output by ftnchek(1), replacing unique COMMON block definitions by Fortran INCLUDE statements. For each input .dcl file, a modified output .dcn file is produced, together with include files named by the COMMON block name, with filename extension .inc. In addition, dcl2inc produces on stdout a list of Makefile dependencies for the UNIX make(1) utility. These can be appended to the project Makefile to ensure that any subsequent changes to .inc files provoke recompilation of source files that include them. dcl2inc warns about COMMONs which differ from their first occurrence, and simply copies them to the output .dcn file, instead of replacing them with an INCLUDE statement. Thus, any COMMON statements that are found in the output .dcn files should be examined carefully to determine why they differ: they may well be in error. Replication of identical data, and bugs arising from subsequent modification of only part of it, is a significant reason why Fortran programming projects should require that COMMON declarations occur in separate include files, so that there is only a single point of definition of any global object. Even though the Fortran INCLUDE statement was tragically omitted from the 1977 Standard, it has long been implemented by virtually all compiler vendors, and is part of the 1990 Standard. In practice, there is therefore no portability problem associated with use of INCLUDE statements, provided that one avoids nonportable file names. As long as the code obeys Fortran's limit of six-character alphanumeric names, the filenames generated by dcl2inc will be acceptable on all current popular operating systems. Fortran's default, or IMPLICIT, variable typing is deprecated in modern programming languages, because it encourages sloppy documentation, and worse, bugs due to misspelled variables, or variables that have been truncated because they extend past column 72. If all variables used are explicitly typed, and a compiler option is used to reject all program units with untyped variables, variable spelling and truncation errors can be eliminated. Variable declarations that have been produced automatically by a tool like ftnchek(1) or pfort(1) have a consistent format that facilitates application of stream editors (e.g. to change array dimensions or rename variables), and simple floating-point precision conversion tools like d2s(1), dtoq(1), dtos(1), qtod(1), s2d(1), and stod(1).","Process Name":"dcl2inc","Link":"https:\/\/linux.die.net\/man\/1\/dcl2inc"}},{"Process":{"Description":"Dconf is a tool to collect a system's hardware and software configuration. It allows to take your system configuration with you on the road, compare identical systems (like nodes in a cluster) to troubleshoot HW or SW problems. Dconf is also useful in projects where you have to manage changes as a team. Dconf can run periodically and send out system changes to a list of email addresses so that they can be revised and discussed in group. You can customize your dconf configuration for specific needs, like making a profile of your laptop's hardware or copy specific software configuration files to send out or compare with other systems. As a sysadmin, you won't become too paranoid if less experienced people have root-access. As a consultant, you won't feel isolated if you don't have remote access to your systems. As a support engineer, you won't become frustrated if a customer has fiddled around with some important config file and you have to find which. As a performance tuner, you can capture the state of the system configuration in between performance tests\/benchmarks.","Process Name":"dconf","Link":"https:\/\/linux.die.net\/man\/1\/dconf"}},{"Process":{"Description":"dcraw decodes raw photos, displays metadata, and extracts thumbnails.","Process Name":"dcraw","Link":"https:\/\/linux.die.net\/man\/1\/dcraw"}},{"Process":{"Description":"Copy a file, converting and formatting according to the operands. bs=BYTES read and write BYTES bytes at a time (also see ibs=,obs=) cbs=BYTES convert BYTES bytes at a time conv=CONVS convert the file as per the comma separated symbol list count=BLOCKS copy only BLOCKS input blocks ibs=BYTES read BYTES bytes at a time (default: 512) if=FILE read from FILE instead of stdin iflag=FLAGS read as per the comma separated symbol list obs=BYTES write BYTES bytes at a time (default: 512) of=FILE write to FILE instead of stdout oflag=FLAGS write as per the comma separated symbol list seek=BLOCKS skip BLOCKS obs-sized blocks at start of output skip=BLOCKS skip BLOCKS ibs-sized blocks at start of input status=noxfer suppress transfer statistics BLOCKS and BYTES may be followed by the following multiplicative suffixes: c =1, w =2, b =512, kB =1000, K =1024, MB =1000*1000, M =1024*1024, xM =M GB =1000*1000*1000, G =1024*1024*1024, and so on for T, P, E, Z, Y. Each CONV symbol may be: ascii from EBCDIC to ASCII ebcdic from ASCII to EBCDIC ibm from ASCII to alternate EBCDIC block pad newline-terminated records with spaces to cbs-size unblock replace trailing spaces in cbs-size records with newline lcase change upper case to lower case nocreat do not create the output file excl fail if the output file already exists notrunc do not truncate the output file ucase change lower case to upper case swab swap every pair of input bytes noerror continue after read errors sync pad every input block with NULs to ibs-size; when used with block or unblock, pad with spaces rather than NULs fdatasync physically write output file data before finishing fsync likewise, but also write metadata Each FLAG symbol may be: append append mode (makes sense only for output; conv=notrunc suggested) direct use direct I\/O for data directory fail unless a directory dsync use synchronized I\/O for data sync likewise, but also for metadata fullblock accumulate full blocks of input (iflag only) nonblock use non-blocking I\/O noatime do not update access time noctty do not assign controlling terminal from file nofollow do not follow symlinks Sending a USR1 signal to a running 'dd' process makes it print I\/O statistics to standard error and then resume copying. CW$ dd if=\/dev\/zero of=\/dev\/null& pid=$! CW$ kill -USR1 $pid; sleep 1; kill $pid 18335302+0 records in 18335302+0 records out 9387674624 bytes (9.4 GB) copied, 34.6279 seconds, 271 MB\/s Options are: --help display this help and exit --version output version information and exit","Process Name":"dd","Link":"https:\/\/linux.die.net\/man\/1\/dd"}},{"Process":{"Description":"ddate prints the date in Discordian date format. If called with no arguments, ddate will get the current system date, convert this to the Discordian date format and print this on the standard output. Alternatively, a Gregorian date may be specified on the command line, in the form of a numerical day, month and year. If a format string is specified, the Discordian date will be printed in a format specified by the string. This mechanism works similarly to the format string mechanism of date(1), only almost completely differently. The fields are: %A Full name of the day of the week (i.e., Sweetmorn) %a Abbreviated name of the day of the week (i.e., SM) %B Full name of the season (i.e., Chaos) %b Abbreviated name of the season (i.e., Chs) %d Ordinal number of day in season (i.e., 23) %e Cardinal number of day in season (i.e., 23rd) %H Name of current Holyday, if any %N Magic code to prevent rest of format from being printed unless today is a Holyday. %n Newline %t Tab %X Number of days remaining until X-Day. (Not valid if the SubGenius options are not compiled in.) %{ %} Used to enclose the part of the string which is to be replaced with the words \"St. Tib's Day\" if the current day is St. Tib's Day. %. Try it and see.","Process Name":"ddate","Link":"https:\/\/linux.die.net\/man\/1\/ddate"}},{"Process":{"Description":"This program is part of Netpbm(1). ddbugtopbm converts all sketches present in a database used by the PalmOS programs Diddle or DiddleBug into appropriately-named PBM files. The backup copy of DiddleBug's database you should use as this program's input is usually called DiddleBugDB.pdb. Or if you use the original Diddle, it has two separate DBs - DiddleDB.pdb, containing unnamed 'scratch' sketches, and DiddleIDB.pdb, containing the saved (and named) sketches which are listed by its 'index' option. You can feed this program any of these three on standard input.","Process Name":"ddbugtopbm","Link":"https:\/\/linux.die.net\/man\/1\/ddbugtopbm"}},{"Process":{"Description":"DDD is a graphical front-end for GDB and other command-line debuggers. Using DDD, you can see what is going on \"inside\" another program while it executes-or what another program was doing at the moment it crashed. DDD can do four main kinds of things (plus other things in support of these) to help you catch bugs in the act: \u2022 Start your program, specifying anything that might affect its behavior. \u2022 Make your program stop on specified conditions. \u2022 Examine what has happened, when your program has stopped. \u2022 Change things in your program, so you can experiment with correcting the effects of one bug and go on to learn about another. \"Classical\" UNIX debuggers such as the GNU debugger ( GDB ) provide a command-line interface and a multitude of commands for these and other debugging purposes. DDD is a comfortable graphical user interface around an inferior GDB , DBX , Ladebug, XDB , JDB , Python debugger, or Perl debugger. DDD is invoked with the shell command ddd. You can open a program to be debugged using 'File→Open Program' (the 'Open Program' item in the 'File' menu. You can get online help at any time using the 'Help' menu; for the first steps, try 'Help→What Now?'. Quit DDD using 'File→Exit'. More information on DDD is contained in the DDD Manual. You can read the text-only version in DDD (via 'Help→DDD Reference') or in Emacs (as Info file). Full-fledged HTML, PostScript, and PDF versions are available online via the DDD WWW page, http:\/\/www.gnu.org\/software\/ddd\/","Process Name":"ddd","Link":"https:\/\/linux.die.net\/man\/1\/ddd"}},{"Process":{"Description":"Decode the DjVu file djvufile, produces the image file outputfile. The DjVu data is read from the standard input when argument djvufile is not specified or when it is equal to a single dash. Similarly, the output data is written to the standard output when argument outputfile is not specified or equal to a single dash. However a valid output file name is always required when producing a TIFF or PDF file.","Process Name":"ddjvu","Link":"https:\/\/linux.die.net\/man\/1\/ddjvu"}},{"Process":{"Description":"GNU ddrescue - Data recovery tool. Copies data from one file or block device to another, trying hard to rescue data in case of read errors. You should use a logfile unless you know what you are doing.","Process Name":"ddrescue","Link":"https:\/\/linux.die.net\/man\/1\/ddrescue"}},{"Process":{"Description":"GNU ddrescuelog - Tool for ddrescue logfiles. Manipulates ddrescue logfiles, shows their contents, converts them to\/from other formats, compares them, and tests rescue status.","Process Name":"ddrescuelog","Link":"https:\/\/linux.die.net\/man\/1\/ddrescuelog"}},{"Process":{"Description":"The command deallocvt deallocates kernel memory and data structures for all unused virtual consoles. If one or more arguments N ... are given, only the corresponding consoles \/dev\/ttyN are deallocated. A virtual console is unused if it is not the foreground console, and no process has it open for reading or writing, and no text has been selected on its screen.","Process Name":"deallocvt","Link":"https:\/\/linux.die.net\/man\/1\/deallocvt"}},{"Process":{"Description":"This program downloads and maintains a partial local Debian mirror. It can mirror any combination of architectures, distributions, and sections. Files are transferred by ftp, and package pools are fully supported. It also does locking and updates trace files. The partial mirror created by this program is not suitable to be used as a public Debian mirror. If that is your aim, you should instead follow the instructions at <http:\/\/www.debian.org\/mirrors\/ftpmirror>. This program mirrors in three steps. 1. download Packages and Sources files First it downloads all Packages and Sources files for the subset of Debian it was instructed to get. 2. download everything else The Packages and Sources files are scanned, to build up a list of all the files they refer to. A few other miscellaneous files are added to the list. Then the program makes sure that each file in the list is present on the local mirror and is up-to-date, using file size (and optionally checksum) checks. Any necessary files are downloaded. 3. clean up unknown files Any files and directories on the local mirror that are not in the list are removed.","Process Name":"debmirror","Link":"https:\/\/linux.die.net\/man\/1\/debmirror"}},{"Process":{"Description":"debugapp is a tool that helps you start or find applications by name in debugging mode. It acts as a wrapper around openapp , and calls openapp with the --debug option; we recommend using openapp directly. By default gdb is used as the debugger, but this can be changed with the --gdb= option or through the GDB enviroment variable. The arguments are the arguments passed to the application. See the openapp (1) man-page for a complete description.","Process Name":"debugapp","Link":"https:\/\/linux.die.net\/man\/1\/debugapp"}},{"Process":{"Description":"debugim prints at the standard error output the raw image data of a vasari format file. This function is useful for debugging when applied on small image files printlines prints at the standard error output the raw image data of a vasari format together with the line no and the x location and the value(s) of each pixel.","Process Name":"debugim","Link":"https:\/\/linux.die.net\/man\/1\/debugim"}},{"Process":{"Description":"debuginfo-install is a program which installs the RPMs needed to debug the specified package. The package argument can be a wildcard, but will only match installed packages. debuginfo-install will then enable any debuginfo repositories, and install the relevant debuginfo rpm.","Process Name":"debuginfo-install","Link":"https:\/\/linux.die.net\/man\/1\/debuginfo-install"}},{"Process":{"Description":"The decayscreen program creates a melting effect by randomly shifting rectangles around the screen. The image that it manipulates will be grabbed from the portion of the screen underlying the window, or from the system's video input, or from a random file on disk, as indicated by the grabDesktopImages, grabVideoFrames, and chooseRandomImages options in the ~\/.xscreensaver file; see xscreensaver-demo(1) for more details.","Process Name":"decayscreen","Link":"https:\/\/linux.die.net\/man\/1\/decayscreen"}},{"Process":{"Description":"","Process Name":"declare","Link":"https:\/\/linux.die.net\/man\/1\/declare"}},{"Process":{"Description":"The deco program subdivides and colors rectangles randomly. It looks kind of like Brady-Bunch-era rec-room wall paneling. (Raven says: \"this screensaver is ugly enough to peel paint.\")","Process Name":"deco","Link":"https:\/\/linux.die.net\/man\/1\/deco"}},{"Process":{"Description":"The flags in Nagios\/Object.pm are currently encoded into a single integer by setting its individual bits. Usually, I'd just use individual flags for each of them, but it was getting to be too many to manage. This is actually pretty easy to handle once you get used to it and very common in C programming.","Process Name":"decode_flags.pl","Link":"https:\/\/linux.die.net\/man\/1\/decode_flags.pl"}},{"Process":{"Description":"decrypt is a command line tool that takes 3 pieces of input, a pcap format input file, a WEP key, and a bssid (access point MAC address). If the provided WEP key is found to be the key for the indicated bssid, associated packets are decrypted and copied to the output file. If the key is not a valid key, all input packets are written unchanged to the output file. The output is a pcap compatible dump file and can be examined with tools such as tcpdump or ethereal to view the decrypted data. This tool understands two link types, LINKTYPE_IEEE802_11 and LINKTYPE_PRISM_HEADER. Other 802.11b capture formats can be decrypted by specifying an optional offset command line argument with the -o switch to indicate the number of header bytes that precede the actual 802.11b packet. That is, the number of bytes that precede the first frame control byte of each 802.11b packet. An alternate dictionary mode utilizes an input word list of potential WEP keys to attempt to find a valid key for the specified bssid. If a valid key is found packets are decrypted and copied to the specified output file.","Process Name":"decrypt","Link":"https:\/\/linux.die.net\/man\/1\/decrypt"}},{"Process":{"Description":"The 'defaults' command lets you to read and modify a user's defaults. This program replaces the old NeXTstep style dread, dwrite, and dremove programs. If you have access to another user's defaults database, you may include '-u username' before any other options to use that user's database rather than your own. defaults read [ domain [ key] ] read the named default from the specified domain. If no 'key' is given - read all defaults from the domain. If no 'domain' is given - read all defaults from all domains. A domain is either an application name, or \"NSGlobalDomain\", for system level defauts. (Running programs can access two other domains, \"NSArgumentDomain\", for command line arguments, \"NSRegistrationDomain\", a second-chance domain in which \"defaults for defaults\" can be registered, and possibly domains for specific locales.) defaults readkey key read the named default from all domains. defaults write domain key value write 'value' as default 'key' in the specified domain. 'value' must be a property list in single quotes. defaults write domain dictionary write 'dictionary' as a replacement for the specified domain. 'dictionary' must be a property list in single quotes. defaults write reads standard input for defaults in the format produced by 'defaults read' and writes them to the database. defaults delete [ domain [ key] ] remove the specified default(s) from the domain. If no 'key' is given - delete the entire domain. defaults delete read standard input for a series of lines containing pairs of domains and keys for defaults to be deleted. defaults domains lists the domains in the database (one per line) defaults find word searches domain names, default names, and default value strings for those equal to the specified word and lists them on standard output. defaults plist output some information about property lists defaults help list options for the defaults command.","Process Name":"defaults","Link":"https:\/\/linux.die.net\/man\/1\/defaults"}},{"Process":{"Description":"defncopy is a utility program distributed with FreeTDS. It replaces a similar program of the same name distributed by Sybase. defncopy reads the text of a stored procedure or view, and writes a script suitable for recreating the procedure or view. For tables, it reads the output of sp_help and constructs a CREATE TABLE statement, complete with CREATE INDEX, too.","Process Name":"defncopy","Link":"https:\/\/linux.die.net\/man\/1\/defncopy"}},{"Process":{"Description":"dehtmldiff creates usable diff files from HTML pages. This is useful in the scenario where a patch has been posted to a mailing list viewable via a web page. The corrected diff is sent to standard output. Note that you will probably need to use the -l option when applying the patch, in order to ignore any whitespace differences there may be.","Process Name":"dehtmldiff","Link":"https:\/\/linux.die.net\/man\/1\/dehtmldiff"}},{"Process":{"Description":"Delete keyword entries from the header of FITS or IRAF image[s]. If a keyword does not already exist, ignore it. To delete keywords in a list of files, substitute @<listfile> for the file names on the command line. To delete a lot of keywords, put them, one per line, in a file and substitute @<keylistfile> on the command line. If two @ commands are present, the program will figure out which contains file names and which contains keywords.","Process Name":"delhead","Link":"https:\/\/linux.die.net\/man\/1\/delhead"}},{"Process":{"Description":"The dovecot-lda is a local mail delivery agent which takes mail from an MTA and delivers it to a user's mailbox, while keeping Dovecot index files up to date. Main features of the dovecot-lda are: * Mailbox indexing during mail delivery, providing faster mailbox access later * Quota enforcing by the quota plugin * Sieve language support by the Pigeonhole sieve plugin","Process Name":"deliver","Link":"https:\/\/linux.die.net\/man\/1\/deliver"}},{"Process":{"Description":"delp deletes files in the specified directory that are left over from a Free Pascal compilation process. It knows what files can be produced by the compile steps and deletes any such files it finds. At the end it gives a summary of the number of files that were deleted, together with the amount of bytes freed by this process.","Process Name":"delp","Link":"https:\/\/linux.die.net\/man\/1\/delp"}},{"Process":{"Description":"This draws a pulsing sequence of stars, circles, and lines.","Process Name":"deluxe","Link":"https:\/\/linux.die.net\/man\/1\/deluxe"}},{"Process":{"Description":"delve - Inspect the contents of a Xapian database","Process Name":"delve","Link":"https:\/\/linux.die.net\/man\/1\/delve"}},{"Process":{"Description":"Delete WCS keywords \"CTYPE1\", \"CRVAL1\", \"CDELT1\", \"CRPIX1\", \"CROTA1\", \"CTYPE2\", \"CRVAL2\", \"CDELT2\", \"CRPIX2\", \"CROTA2\", and \"IMWCS\" from a fits header. If there are \"WRA\", WDEC\", and \"WEPOCH\" or \"WEQUINOX\" keywords present, their values replace those lf \"RA\", \"DEC\", and \"EPOCH\" or \"EQUINOX\".","Process Name":"delwcs","Link":"https:\/\/linux.die.net\/man\/1\/delwcs"}},{"Process":{"Description":"delwords deletes words from specified dictionary according to the word information from the standard input. The standard input must be in a format of ''Text Dictionary format'' of Canna. dicname must be a ''Text Dictionary format'' which can be rewritten.","Process Name":"delwords","Link":"https:\/\/linux.die.net\/man\/1\/delwords"}},{"Process":{"Description":"demangle reads a list of C++ mangled symbol names from standard input and converts these names to human-readable form on standard output. This utility is part of the KDE Software Development Kit.","Process Name":"demangle","Link":"https:\/\/linux.die.net\/man\/1\/demangle"}},{"Process":{"Description":"this plugin is to show how the plugin work it will just add plugin type name begin of line in spec file. The spec file will not work any more but will show which parts can be modified","Process Name":"demo.plug","Link":"https:\/\/linux.die.net\/man\/1\/demo.plug"}},{"Process":{"Description":"this plugin is to show how the plugin work on files it will just show the files (with find -ls command) in the package. The package is not modified.","Process Name":"demofiles.plug","Link":"https:\/\/linux.die.net\/man\/1\/demofiles.plug"}},{"Process":{"Description":"A cellular automaton that starts with a random field, and organizes it into stripes and spirals.","Process Name":"demon","Link":"https:\/\/linux.die.net\/man\/1\/demon"}},{"Process":{"Description":"derb reads the compiled resource bundle files passed on the command line and write them back in text form. The resulting text files have a .txt extension while compiled resource bundle source files typically have a .res extension. It is customary to name the resource bundles by their locale name, i.e. to use a local identifier for the bundle filename, e.g. ja_JP.res for Japanese (Japan) data, or root.res for the root bundle. This is especially important for derb since the locale name is not accessible directly from the compiled resource bundle, and to know which locale to ask for when opening the bundle. derb will produce a file whose base name is either the value of the -l, --locale option, or the same as the base name of the compiled resource file itself. If the --to-stdout, -c option is used, however, the text will be written on the standard output.","Process Name":"derb","Link":"https:\/\/linux.die.net\/man\/1\/derb"}},{"Process":{"Description":"desktop2menu converts freedesktop.org desktop files into menu files used by Debian and its derivatives and by Mandriva. It is meant to be called by packer although it can be called directly.","Process Name":"desktop2menu","Link":"https:\/\/linux.die.net\/man\/1\/desktop2menu"}},{"Process":{"Description":"The detox utility renames files to make them easier to work with. It removes spaces and other such annoyances. It'll also translate or cleanup Latin-1 (ISO 8859-1) characters encoded in 8-bit ASCII, Unicode characters encoded in UTF-8, and CGI escaped characters. Sequences detox is driven by a configurable series of filters, called a sequence. Sequences are covered in more detail in detoxrc(5) and are discoverable with the -L option. Some examples of default sequences are iso8859_1 and utf_8. Options The main options:        -f configfile Use configfile instead of the default configuration files for loading translation sequences. No other config file will be parsed. -h --help Display helpful information. -L' List the currently available sequences. When paired with -v this option shows what filters are used in each sequence and any properties applied to the filters. -n --dry-run Doesn't actually change anything. This implies the -v option. -r' Recurse into subdirectories. -s sequence Use sequence instead of default. --special Works on special files (including links). Normally detox ignores these files. -v' Be verbose about which files are being renamed. -V' Show the current version of detox. Deprecated Options Deprecated Options are options that were available in earlier versions of detox but have lost their meaning and are being phased out. --remove-trailing Removes _ and - after .'s in filenames. This was first provided in the 0.9 series of detox. After the introduction of sequences, it lost its meaning, as you could now determine the properties of wipeup through a particular sequence's configuration. It presently forces all instances of the wipeup filter to use remove trailing, regardless of what's actually in the config files.","Process Name":"detox","Link":"https:\/\/linux.die.net\/man\/1\/detox"}},{"Process":{"Description":"devilspie is a program which can detect windows as they are created, and perform actions on them if they match as set of criteria. The configuration files are a set of s-expressions. For documentation and examples, see \/usr\/share\/doc\/devilspie\/. Command-lines options: -a --apply-to-existing Apply to all existing windows instead of just new windows. -d --debug Output debug information -l --list-symbols List available symbols supported in input files. -s symname --symbol-doc= symname Get detailed help on symbol symname ('all' for all symbols).","Process Name":"devilspie","Link":"https:\/\/linux.die.net\/man\/1\/devilspie"}},{"Process":{"Description":"This manual page documents briefly the devio command. devio is a command line program intended to read and write from block devices.","Process Name":"devio","Link":"https:\/\/linux.die.net\/man\/1\/devio"}},{"Process":{"Description":"devkit-power is a simple command line client for the devicekit-power(7) daemon. TODO: not fully documented.","Process Name":"devkit-power","Link":"https:\/\/linux.die.net\/man\/1\/devkit-power"}},{"Process":{"Description":"This manual page documents the GNU version of df. df displays the amount of disk space available on the file system containing each file name argument. If no file name is given, the space available on all currently mounted file systems is shown. Disk space is shown in 1K blocks by default, unless the environment variable POSIXLY_CORRECT is set, in which case 512-byte blocks are used. If an argument is the absolute file name of a disk device node containing a mounted file system, df shows the space available on that file system rather than on the file system containing the device node (which is always the root file system). This version of df cannot show the space available on unmounted file systems, because on most kinds of systems doing so requires very nonportable intimate knowledge of file system structures.","Process Name":"df","Link":"https:\/\/linux.die.net\/man\/1\/df"}},{"Process":{"Description":"dfbg is a small utility to configure the background of the DirectFB desktop. It loads the specified image and sets it as background image. dfbg requires DirectFB with the multi-application core enabled.","Process Name":"dfbg","Link":"https:\/\/linux.die.net\/man\/1\/dfbg"}},{"Process":{"Description":"dfu-programmer is a Linux command line Device Firmware Upgrade (DFU) based programmer for the flash memory on Atmel AVR, AVR32 and 8051 based microcontrollers which ship with a USB boot loader. It supports In System Programming (ISP) for developers and potentially product updates in the field. Those boot loaders are patterned after the standard USB DFU 1.0 class specification, but depend on extensions defined by Atmel to the extent that standard DFU drivers will not work. To use it, first connect the device to be programmed and ensure that it comes up in DFU mode. The microcontrollers come up in that mode as shipped by Atmel; or they may reenter that mode after a special hardware reset. Then invoke this program to issue one or more DFU commands. You will normally need to start by issuing the \"erase\" command; the default security policies prevent extracting firmware, to prevent reverse engineering of what is usually proprietary code.","Process Name":"dfu-programmer","Link":"https:\/\/linux.die.net\/man\/1\/dfu-programmer"}},{"Process":{"Description":"dfutool is used to verify, archive and upgrade firmware files.","Process Name":"dfutool","Link":"https:\/\/linux.die.net\/man\/1\/dfutool"}},{"Process":{"Description":"Dga is a simple test client for the XFree86-DGA extension. It fills the screen with a different colour for each key pressed. It prints some basic framebuffer parameters, and also keyboard and pointer events to stdout. To exit, hit the 'q' key. Hitting the 'b' key runs a simple benchmark, measuring raw framebuffer write and read speed (this takes one second each).","Process Name":"dga","Link":"https:\/\/linux.die.net\/man\/1\/dga"}},{"Process":{"Description":"The digest functions output the message digest of a supplied file or files in hexadecimal form. They can also be used for digital signing and verification.","Process Name":"dgst","Link":"https:\/\/linux.die.net\/man\/1\/dgst"}},{"Process":{"Description":"Send a DHCPINFORM message to a dnsmasq server running on the local host and print (to stdout) the time remaining in any lease for the given address. The time is given as string printed to stdout. If an error occurs or no lease exists for the given address, nothing is sent to stdout a message is sent to stderr and a non-zero error code is returned. Requires dnsmasq 2.40 or later and may not work with other DHCP servers. The address argument is a dotted-quad IP addresses and mandatory.","Process Name":"dhcp_lease_time","Link":"https:\/\/linux.die.net\/man\/1\/dhcp_lease_time"}},{"Process":{"Description":"A utility which forces the DHCP server running on this machine to release a DHCP lease. Send a DHCPRELEASE message via the specified interface to tell the local DHCP server to delete a particular lease. The interface argument is the interface in which a DHCP request _would_ be received if it was coming from the client, rather than being faked up here. The address argument is a dotted-quad IP addresses and mandatory. The MAC address is colon separated hex, and is mandatory. It may be prefixed by an address-type byte followed by -, eg 10-11:22:33:44:55:66 but if the address-type byte is missing it is assumed to be 1, the type for ethernet. This encoding is the one used in dnsmasq lease files. The client-id is optional. If it is \"*\" then it treated as being missing.","Process Name":"dhcp_release","Link":"https:\/\/linux.die.net\/man\/1\/dhcp_release"}},{"Process":{"Description":"This command parses the output of tcpdump to display the dhcp-packets for easier checking and debugging.","Process Name":"dhcpdump","Link":"https:\/\/linux.die.net\/man\/1\/dhcpdump"}},{"Process":{"Description":"This command is used to manipulate DH parameter files.","Process Name":"dhparam","Link":"https:\/\/linux.die.net\/man\/1\/dhparam"}},{"Process":{"Description":"di Displays usage information on mounted filesystems. Block values are reported in a human readable format. If the user or group has a disk quota, the values reported are adjusted according the quotas that apply to the user. If file is specified, the usage information for the partition on which file is located is printed. Unless the -a flag is specified, the following mounted filesystems will not normally be displayed: filesystems with total space <= 0; loopback filesystems that are duplicates of other normally mounted filesystems (filesystem type of 'lofs' , 'none', or 'nullfs'); loopback filesystems that are part of a zone (Solaris). Filesystems that the user does not have permissions to access will not be displayed at all. mi Displays the mounted filesystem information. Several options may be specified to control the output of di and mi: -A Print all fields (used for debugging). Mount points and special device names are printed at full width. -a (compatibility: --all) Prints all mounted devices (normally, those with 0 total space are not printed - e.g. \/dev\/proc, \/dev\/fd). -B block-size (compatibility: --block-size, -b) Change the base block size from 1024 (default) to the size specified. block-size may be one of: k - 1024 bytes, si - 1000 bytes, or a specific size. -c (alias: --csv-output) Comma separated values are output. The titles are output as the format string specifiers. Totals are turned off. See also the -n flag. -d display-size (alias: --display-size) Display the usage in units specified by display-size. Note that if the base block size is SI units of 1000 bytes, the display size is calculated using those units. display-size may be one of: 512 - POSIX, k - kilobytes, m - megabytes, g - gigabytes, t - terabytes, p - petabytes, e - exabytes, z - zettabytes, y - yottabytes, h - Scaled alternative 1, H - Scaled alternative 2, or a specific value to use as the block size. Block display sizes greater than 1024 bytes are displayed with a precision of one decimal place after the radix. The Scaled alternatives scale the sizes displayed and appends a suffix (e.g. 48.0k, 3.4M). With scaled alternative 1, sizes within a line may scale to different units. Scaled alternative 2 scales all the sizes in each individual line to the same unit size (the largest needed). -f format Use the specified format string format. See the Format Strings section. -g (alias for: -dg) Display sizes in gigabytes. -h (alias for: -dh) Display partition sizes in scaled alternative 1 format. --help Display some basic usage information. -H (alias for: -dH; compatibility: --human-readable) Display partition sizes in scaled alternative 2 format. -I include-fstype-list (compatibility: -F, --type) Include only the file system types listed in include-fstyp-list. The list is a comma separated list of file system types. Multiple -I options may be specified. If the 'fuse' filesystem type is specified, all fuse* filesystems will be included. e.g. -I nfs,tmpfs or -I nfs -I tmpfs. --inodes Ignored. Use the -f option. -k (alias for: -dk) Display sizes in Kbytes. -l (compatibility: --local) Display only local file systems. -L Turn off check for duplicate filesystems (loopback (lofs\/none) mounts). -m (alias for: -dm) Display sizes in megabytes. -n Do not print a header line above the list of file systems. Useful when parsing the output of di. --no-sync Ignored. -P (compatibility: --portability) Output format is POSIX standard. 512 byte block size is the default. The -k option may be used. --print-type Ignored. Use the -f option. -q Disable quota checks. -R (also: --dont-resolve-symlinks) Do not resolve symlinks (for mount points that have a trailing UUID). -s sort-type Use sort-type to sort the output. The output of di is normally sorted by mount point. The following sort flags may be used to change the sort order: m - by mount point (default); n - leave unsorted (as it appears in the mount table); s - by special device name; t - by filesystem type; r - reverse the sort order. These sort options may be combined in any order. e.g.: di -stsrm - by type, special, reversed mount; di -strsrm - by type, reversed special, mount. --si An alias for -dH -Bsi. --sync Ignored. -t (compatibility: --total) Print a totals line below the list of file systems. Pooled filesystems (zfs, advfs) have only the main pool added to the total. It is up to the user to exclude (using the -x option) read-only filesystems (cdfs, iso9660), swap-based (memfs, mfs, tmpfs) filesystems and user (fuse*) filesystems. Excluding the 'fuse' filesystem will exclude all fuse* filesystems. -w block-width Set the print width for block values. The default is eight. -v Ignored. --version Display di's version and default format string. -W inode-width Set the print width for inode values. Default is seven. -x exclude-fstype-list (compatibility: --exclude-type) Exclude the file system types listed in exclude-fstyp-list. The list is a comma separated list of file system types. Multiple -x options may be specified. If the 'fuse' filesystem type is excluded, all fuse* filesystems will be excluded. e.g. -x nfs,tmpfs or -x nfs -x tmpfs. -X level Set the program's debugging level to debug-level. -z zone-name Display the filesystems for the specified zone. The zone must be visible to the user. -Z (alias for: -z all) Display the filesystems for all visible zones.","Process Name":"di","Link":"https:\/\/linux.die.net\/man\/1\/di"}},{"Process":{"Description":"Dia is used to create diagrams. Dia has a number of basic tools, like lines and boxes but can also dynamically load sheets. A sheet is a collection of tools that are used in a certain type of diagram. Most diagram objects in Dia have connection points. Lines can be connected to these connection points and this way graph structures can be formed. When objects are moved or resized the connections will follow the objects. Diagrams drawn in Dia can be exported as PostScript.","Process Name":"dia","Link":"https:\/\/linux.die.net\/man\/1\/dia"}},{"Process":{"Description":"Dialog is a program that will let you to present a variety of questions or display messages using dialog boxes from a shell script. These types of dialog boxes are implemented (though not all are necessarily compiled into dialog): calendar, checklist, dselect, editbox, form, fselect, gauge, infobox, inputbox, inputmenu, menu, mixedform, mixedgauge, msgbox (message), passwordbox, passwordform, pause, progressbox, radiolist, tailbox, tailboxbg, textbox, timebox, and yesno (yes\/no). You can put more than one dialog box into a script: - Use the \"--and-widget\" token to force Dialog to proceed to the next dialog unless you have pressed ESC to cancel, or - Simply add the tokens for the next dialog box, making a chain. Dialog stops chaining when the return code from a dialog is nonzero, e.g., Cancel or No (see DIAGNOSTICS). Some widgets, e.g., checklist, will write text to dialog's output. Normally that is the standard error, but there are options for changing this: \" --output-fd\", \" --stderr\" and \" --stdout\". No text is written if the Cancel button (or ESC) is pressed; dialog exits immediately in that case.","Process Name":"dialog","Link":"https:\/\/linux.die.net\/man\/1\/dialog"}},{"Process":{"Description":"The diameterc utility is used to transform diameter dictionary files into Erlang source. The resulting source implements the interface diameter requires to encode and decode the dictionary's messages and AVP's.","Process Name":"diameter_compile","Link":"https:\/\/linux.die.net\/man\/1\/diameter_compile"}},{"Process":{"Description":"dicar archives binary dictionary bindic1. The hyphen of each option may be omitted. -t Displays the dictionaries contained in binary dictionary file bindic1. Each displayed name of the dictionaries consists of the text file name followed by extension '.d'. This text file name is that before the dictionary file is converted into the binary file. -x Fetches dictionary bindic2 from bindic1. Bindic2 consists of the text file name followed by extension '.d'. This text file name is that before the dictionary file is converted into the binary file. The fetched file bindic2 becomes a dictionary file in binary format. If bindic2 is omitted, all dictionaries within bindic1 will be fetched. -r Adds to bindic1, all dictionaries that are contained in the dictionary file specified in bindic2. Any dictionary in bindic1 that is contained in bindic1 is overwritten. -d Deletes bindic2 from bindic1.","Process Name":"dicar","Link":"https:\/\/linux.die.net\/man\/1\/dicar"}},{"Process":{"Description":"dict is a client for the Dictionary server protocol ( DICT ), which is used to query natural language dictionaries hosted on a remote machine. When used in the most simple way, % dict word dict will look for definitions of word in the dictionaries hosted at dict.org. If no definitions are found, then dict will look for words which are similar, and list them: % dict bonana\n  no definition for \"bonana\" - perhaps you meant:\n    banana, bonanza, Banana, Bonanza, Bonasa This feature is only available if the remote DICT server supports the soundex or Levenshtein matching strategies. You can use the -stats switch to find out for yourself. You can specify the hostname of the DICT server using the -h option: % dict -h dict.org dictionary A DICT server can support a number of databases; you can use the -d option to specify a particular database. For example, you can look up computer-related terms in the Free On-line Dictionary Of Computing ( FOLDOC ) using: % dict -h dict.org -d foldoc byte To find out what databases (dictionaries) are available on a server, use the -dbs option: % dict -dbs There are many dictionaries hosted on other servers around the net; a list of some of them can be found at http:\/\/www.dict.org\/links.html MATCHING Instead of requesting word definitions, you can use dict to request a list of words which match a pattern. For example, to look for four-letter words starting in 'b' and ending in 'p', you would use: % dict -match -strategy re '^b..p$' The -match option says you want a list of matching words rather than a definition. The -strategy re says to use POSIX regular expressions when matching the pattern ^b..p$. Most DICT servers support a number of matching strategies; you can get a list of the strategies provided by a server using the -strats switch: % dict -h dict.org -strats","Process Name":"dict","Link":"https:\/\/linux.die.net\/man\/1\/dict"}},{"Process":{"Description":"dict_lookup reads X selection, then open terminal emulator and run dict client in it allowing user to view content using pager. It makes sense to configure launching dict_lookup on a keyboard shortcut in the window manager.","Process Name":"dict_lookup","Link":"https:\/\/linux.die.net\/man\/1\/dict_lookup"}},{"Process":{"Description":"dictfmt takes a file, FILE, on stdin, and creates a dictionary database named basename.dict, that conforms to the DICT protocol. It also creates an index file named basename.index. By default, the index is sorted according to the C locale, and only alphanumeric characters and spaces are used in sorting, however this may be changed with the --locale and --allchars options. ( basename is commonly chosen to correspond to the basename of FILE , but this is not mandatory.) Unless the database is extremely small, it is highly recommended that basename.dict be compressed with \/usr\/bin\/dictzip to create basename.dict.dz. (dictzip is included in the dictd source package.) FILE may be in any of the several formats described by the format options -c5, -t, -e, -f, -h, -j, -p, -i or -I. Exactly one of these options must be given. dictfmt prepends several headers are to the .dict file. The 00-database-url header gives the value of the -u option as the URL of the site from which the original database was obtained. The 00-database-short header gives the value of the -s option as the short name of the dictionary. (This \"short name\" is the identifying name given by the \"dict- D\" option.) If the -u and\/or -s options are omitted, these values will be shown as \"unknown\", which is undesirable for a publicly distributed database. The date of conversion (formatting) is given in the 00-database-info header. All text in the input file prior to the first headword (as defined by the appropriate formatting option) is appended to this header. All text in the input file following a headword, up to the next headword, is copied unchanged to the .dict file.","Process Name":"dictfmt","Link":"https:\/\/linux.die.net\/man\/1\/dictfmt"}},{"Process":{"Description":"dictfmt_index2suffix creates a suffix index file on stdout for the index file given on stdin or the command line. A suffix index file is the same as the .index file except the characters in the headwords are reversed. A suffix index file is normally named <basename>.suffix, but this is not mandatory as long as the proper name is used in the dictd configuration file.","Process Name":"dictfmt_index2suffix","Link":"https:\/\/linux.die.net\/man\/1\/dictfmt_index2suffix"}},{"Process":{"Description":"dictfmt_index2word creates a word index file on stdout for the index file given on stdin or the command line. A word index file indexes each subword from the multi-word headwords of the .index file, to the underlying .dict file. A word index file is usually named <basename>.word, but this is not mandatory as long as the proper name is used in the dictd configuration file.","Process Name":"dictfmt_index2word","Link":"https:\/\/linux.die.net\/man\/1\/dictfmt_index2word"}},{"Process":{"Description":"dictl calls dict with the arguments given on the command line. dictl takes the value of the environment variable DICTL_CHARSET as the user's preferred character set. If this variable is empty, dictl attempts to determine the character set to be used from the output of the locale command. Arguments passed to dictl including word are converted from the user's preferred character set to server's character set specified by DICTL_SERVER_CHARSET variable (utf-8 if it is unset), and passed to dict. The server's output from dict is converted to the user's preferred character set. NOTE: Because iconv omits characters from output that are invalid, recode -f is used for character set conversions by default. If you prefer iconv, set DICTL_USE_ICONV variable to non-empty string. If you want to use konwert, set DICTL_USE_KONWERT to non-empty string. Because recode, iconv and konwert do not support conversion to or from the \"C\" or \"POSIX\" locales, it is recommended that all users whose locale is \"C\" or \"POSIX\", set DICTL_CHARSET to \"latin1\" (ISO_8859-1).","Process Name":"dictl","Link":"https:\/\/linux.die.net\/man\/1\/dictl"}},{"Process":{"Description":"dictunformat takes a dictionary index file as a parameter and a dictionary database file on stdin and outputs a raw database that may be used to create a DICT database by dictfmt -t. This may be useful if it is desired to create a dictionary for a locale other than that for which the original was created, or if it is desired to correct or supplement a pre-existing dictionary.","Process Name":"dictunformat","Link":"https:\/\/linux.die.net\/man\/1\/dictunformat"}},{"Process":{"Description":"dictzip compresses files using the gzip(1) algorithm (LZ77) in a manner which is completely compatible with the gzip file format. An extension to the gzip file format (Extra Field, described in 2.3.1.1 of RFC 1952) allows extra data to be stored in the header of a compressed file. Programs like gzip and zcat will ignore this extra data. However, dictd(8), the DICT protocol dictionary server will make use of this data to perform pseudo-random access on the file. Files in the dictzip format should end in \".dz\" so that they may be distinguished from common gzip files that do not contain the special header information. From RFC 1952, the extra field is specified as follows: If the FLG.FEXTRA bit is set, an \"extra field\" is present in the header, with total length XLEN bytes. It consists of a series of subfields, each of the form: +---+---+---+---+==================================+\n|SI1|SI2|  LEN  |... LEN bytes of subfield data ...|\n+---+---+---+---+==================================+ SI1 and SI2 provide a subfield ID, typically two ASCII letters with some mnemonic value. Jean-Loup Gailly < gzip@prep.ai.mit.edu> is maintaining a registry of subfield IDs; please send him any subfield ID you wish to use. Subfield IDs with SI2 = 0 are reserved for future use. LEN gives the length of the subfield data, excluding the 4 initial bytes. The dictzip program uses 'R' for SI1, and 'A' for SI2 (i.e., \"Random Access\"). After the LEN field, the data is arranged as follows: +---+---+---+---+---+---+===============================+\n|  VER  | CHLEN | CHCNT |  ... CHCNT words of data ...  |\n+---+---+---+---+---+---+===============================+ As per RFC 1952, all data is stored least-significant byte first. For VER 1 of the data, all values are 16-bits long (2 bytes), and are unsigned integers. XLEN (which is specified earlier in the header) is a two byte integer, so the extra field can be 0xffff bytes long, 2 bytes of which are used for the subfield ID (SI1 and SI1), and 2 bytes of which are used for the subfield length (LEN). This leaves 0xfffb bytes (0x7ffd 2-byte entries or 0x3ffe 4-byte entries). Given that the zip output buffer must be 10% + 12 bytes larger than the input buffer, we can store 58969 bytes per entry, or about 1.8GB if the 2-byte entries are used. If this becomes a limiting factor, another format version can be selected and defined for 4-byte entries. For compression, the file is divided up into \"chunks\" of data, each chunk is less than 64kB, and can be compressed into an area that is also less than 64kB long (taking incompressible data into account -- usually the data is compressed into a block that is much smaller than the original). The CHLEN field specifies the length of a \"chunk\" of data. The CHCNT field specifies how many chunks are preset, and the CHCNT words of data specifies how long each chunk is after compression (i.e., in the current compressed file). To perform random access on the data, the offset and length of the data are provided to library routines. These routines determine the chunk in which the desired data begins, and decompresses that chunk. Consecutive chunks are decompressed as necessary.","Process Name":"dictzip","Link":"https:\/\/linux.die.net\/man\/1\/dictzip"}},{"Process":{"Description":"dieharder Welcome to the current snapshot of the dieharder random number tester. It encapsulates all of the Gnu Scientific Library (GSL) random number generators (rngs) as well as a number of generators from the R statistical library, hardware sources such as \/dev\/*random, \"gold standard\" cryptographic quality generators (useful for testing dieharder and for purposes of comparison to new generators) as well as generators contributed by users or found in the literature into a single harness that can time them and subject them to various tests for randomness. These tests are variously drawn from George Marsaglia's \"Diehard battery of random number tests\", the NIST Statistical Test Suite, and again from other sources such as personal invention, user contribution, other (open source) test suites, or the literature. The primary point of dieharder is to make it easy to time and test (pseudo)random number generators, including both software and hardware rngs, with a fully open source tool. In addition to providing \"instant\" access to testing of all built-in generators, users can choose one of three ways to test their own random number generators or sources: a unix pipe of a raw binary (presumed random) bitstream; a file containing a (presumed random) raw binary bitstream or formatted ascii uints or floats; and embedding your generator in dieharder's GSL-compatible rng harness and adding it to the list of built-in generators. The stdin and file input methods are described below in their own section, as is suggested \"best practice\" for newbies to random number generator testing. An important motivation for using dieharder is that the entire test suite is fully Gnu Public License (GPL) open source code and hence rather than being prohibited from \"looking underneath the hood\" all users are openly encouraged to critically examine the dieharder code for errors, add new tests or generators or user interfaces, or use it freely as is to test their own favorite candidate rngs subject only to the constraints of the GPL. As a result of its openness, literally hundreds of improvements and bug fixes have been contributed by users to date, resulting in a far stronger and more reliable test suite than would have been possible with closed and locked down sources or even open sources (such as STS) that lack the dynamical feedback mechanism permitting corrections to be shared. Even small errors in test statistics permit the alternative (usually unstated) null hypothesis to become an important factor in rng testing -- the unwelcome possibility that your generator is just fine but it is the test that is failing. One extremely useful feature of dieharder is that it is at least moderately self validating. Using the \"gold standard\" aes and threefish cryptographic generators, you can observe how these generators perform on dieharder runs to the same general degree of accuracy that you wish to use on the generators you are testing. In general, dieharder tests that consistently fail at any given level of precision (selected with e.g. -a -m 10) on both of the gold standard rngs (and\/or the better GSL generators, mt19937, gfsr4, taus) are probably unreliable at that precision and it would hardly be surprising if they failed your generator as well. Experts in statistics are encouraged to give the suite a try, perhaps using any of the example calls below at first and then using it freely on their own generators or as a harness for adding their own tests. Novices (to either statistics or random number generator testing) are strongly encouraged to read the next section on p-values and the null hypothesis and running the test suite a few times with a more verbose output report to learn how the whole thing works.","Process Name":"dieharder","Link":"https:\/\/linux.die.net\/man\/1\/dieharder"}},{"Process":{"Description":"diet is a small wrapper around gcc. It will try to look at the command line you specify and try to mangle it so that gcc will compile against the diet libc header files and link against the diet libc itself. diet tries to be smart for cross compiling. If the first argument is not gcc but sparc-linux-gcc, diet will guess that you want to cross compile for sparc and use bin-sparc\/dietlibc.a instead of the dietlibc.a for your default architecture. The -v option will make diet print the modified gcc command line before executing it. When passed the -Os option before the gcc argument, diet will mangle the gcc options to include the best known for-size optimization settings for the platform.","Process Name":"diet","Link":"https:\/\/linux.die.net\/man\/1\/diet"}},{"Process":{"Description":"Compare files line by line. -i --ignore-case Ignore case differences in file contents. --ignore-file-name-case Ignore case when comparing file names. --no-ignore-file-name-case Consider case when comparing file names. -E --ignore-tab-expansion Ignore changes due to tab expansion. -b --ignore-space-change Ignore changes in the amount of white space. -w --ignore-all-space Ignore all white space. -B --ignore-blank-lines Ignore changes whose lines are all blank. -I RE --ignore-matching-lines= RE Ignore changes whose lines all match RE. --strip-trailing-cr Strip trailing carriage return on input. -a --text Treat all files as text. -c -C NUM --context[= NUM] Output NUM (default 3) lines of copied context. -u -U NUM --unified[= NUM] Output NUM (default 3) lines of unified context. --label LABEL Use LABEL instead of file name. -p --show-c-function Show which C function each change is in. -F RE --show-function-line= RE Show the most recent line matching RE. -q --brief Output only whether files differ. -e --ed Output an ed script. --normal Output a normal diff. -n --rcs Output an RCS format diff. -y --side-by-side Output in two columns. -W NUM --width= NUM Output at most NUM (default 130) print columns. --left-column Output only the left column of common lines. --suppress-common-lines Do not output common lines. -D NAME --ifdef= NAME Output merged file to show '#ifdef NAME' diffs. --GTYPE-group-format= GFMT Similar, but format GTYPE input groups with GFMT. --line-format= LFMT Similar, but format all input lines with LFMT. --LTYPE-line-format= LFMT Similar, but format LTYPE input lines with LFMT. LTYPE is 'old', 'new', or 'unchanged'. GTYPE is LTYPE or 'changed'. GFMT may contain: %< lines from FILE1 %> lines from FILE2 %= lines common to FILE1 and FILE2 %[-][WIDTH][.[PREC]]{doxX}LETTER printf-style spec for LETTER LETTERs are as follows for new group, lower case for old group: F first line number L last line number N number of lines = L-F+1 E F-1 M L+1 LFMT may contain: %L contents of line %l contents of line, excluding any trailing newline %[-][WIDTH][.[PREC]]{doxX}n printf-style spec for input line number Either GFMT or LFMT may contain: %% % %c'C' the single character C %c'\\OOO' the character with octal code OOO -l --paginate Pass the output through 'pr' to paginate it. -t --expand-tabs Expand tabs to spaces in output. -T --initial-tab Make tabs line up by prepending a tab. -r --recursive Recursively compare any subdirectories found. -N --new-file Treat absent files as empty. --unidirectional-new-file Treat absent first files as empty. -s --report-identical-files Report when two files are the same. -x PAT --exclude= PAT Exclude files that match PAT. -X FILE --exclude-from= FILE Exclude files that match any pattern in FILE. -S FILE --starting-file= FILE Start with FILE when comparing directories. --from-file= FILE1 Compare FILE1 to all operands. FILE1 can be a directory. --to-file= FILE2 Compare all operands to FILE2. FILE2 can be a directory. --horizon-lines= NUM Keep NUM lines of the common prefix and suffix. -d --minimal Try hard to find a smaller set of changes. --speed-large-files Assume large files and many scattered small changes. -v --version Output version info. --help Output this help. FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'. If --from-file or --to-file is given, there are no restrictions on FILES. If a FILE is '-', read standard input.","Process Name":"diff","Link":"https:\/\/linux.die.net\/man\/1\/diff"}},{"Process":{"Description":"For each file specified, the differences (in diff -u2 format) are shown between each successive version back to the first, in reverse chronological order.","Process Name":"diff-hist","Link":"https:\/\/linux.die.net\/man\/1\/diff-hist"}},{"Process":{"Description":"Output the differences between two JAR files.","Process Name":"diff-jars","Link":"https:\/\/linux.die.net\/man\/1\/diff-jars"}},{"Process":{"Description":"Compare three files line by line. -e --ed Output unmerged changes from OLDFILE to YOURFILE into MYFILE. -E --show-overlap Output unmerged changes, bracketing conflicts. -A --show-all Output all changes, bracketing conflicts. -x --overlap-only Output overlapping changes. -X Output overlapping changes, bracketing them. -3 --easy-only Output unmerged nonoverlapping changes. -m --merge Output merged file instead of ed script (default -A). -L LABEL --label= LABEL Use LABEL instead of file name. -i Append 'w' and 'q' commands to ed scripts. -a --text Treat all files as text. -T --initial-tab Make tabs line up by prepending a tab. --diff-program= PROGRAM Use PROGRAM to compare files. -v --version Output version info. --help Output this help. If a FILE is '-', read standard input.","Process Name":"diff3","Link":"https:\/\/linux.die.net\/man\/1\/diff3"}},{"Process":{"Description":"When called in the root directory of a source tree that packer has been run in, differ will create a patch between the contents of the tarball specified on the command line and the contents of the current directory. Packer-generated directories will be ignored when making this patch. The tarball specified must be a .tar.gz file.","Process Name":"differ","Link":"https:\/\/linux.die.net\/man\/1\/differ"}},{"Process":{"Description":"Diffpp converts diff(1)-program's output files to a format suitable to be printed with GNU enscript(1). Program annotates the changes with enscript's special escapes so enscript can highlight the modified portions of the file. All changed and added lines are printed with gray-background, deleted lines are marked with minus ('-') characters; diffpp prints one minus character for each deleted line.","Process Name":"diffpp","Link":"https:\/\/linux.die.net\/man\/1\/diffpp"}},{"Process":{"Description":"This program reads the output of diff and displays a histogram of the insertions, deletions, and modifications per-file. Diffstat is a program that is useful for reviewing large, complex patch files. It reads from one or more input files which contain output from diff, producing a histogram of the total lines changed for each file referenced. If the input filename ends with .bz2, .gz, .lzma, .z or .Z, diffstat will read the uncompressed data via a pipe from the corresponding program. It also can infer the compression type from files piped via the standard input. Diffstat recognizes the most popular types of output from diff: unified preferred by the patch utility. context best for readability, but not very compact. default not good for much, but simple to generate. Diffstat detects the lines that are output by diff to tell which files are compared, and then counts the markers in the first column that denote the type of change (insertion, deletion or modification). These are shown in the histogram as \"+\", \"-\" and \"!\" characters. If no filename is given on the command line, diffstat reads the differences from the standard input.","Process Name":"diffstat","Link":"https:\/\/linux.die.net\/man\/1\/diffstat"}},{"Process":{"Description":"Diffuse is a graphical tool for merging and comparing text files. Diffuse is able to compare an arbitrary number of files side-by-side and gives users the ability to manually adjust line matching and directly edit files. Diffuse can also retrieve revisions of files from Bazaar, CVS, Darcs, Git, Mercurial, Monotone, RCS, Subversion, and SVK repositories for comparison and merging.","Process Name":"diffuse","Link":"https:\/\/linux.die.net\/man\/1\/diffuse"}},{"Process":{"Description":"dig (domain information groper) is a flexible tool for interrogating DNS name servers. It performs DNS lookups and displays the answers that are returned from the name server(s) that were queried. Most DNS administrators use dig to troubleshoot DNS problems because of its flexibility, ease of use and clarity of output. Other lookup tools tend to have less functionality than dig. Although dig is normally used with command-line arguments, it also has a batch mode of operation for reading lookup requests from a file. A brief summary of its command-line arguments and options is printed when the -h option is given. Unlike earlier versions, the BIND 9 implementation of dig allows multiple lookups to be issued from the command line. Unless it is told to query a specific name server, dig will try each of the servers listed in \/etc\/resolv.conf. When no command line arguments or options are given, dig will perform an NS query for \".\" (the root). It is possible to set per-user defaults for dig via ${HOME}\/.digrc. This file is read and any options in it are applied before the command line arguments. The IN and CH class names overlap with the IN and CH top level domains names. Either use the -t and -c options to specify the type and class, use the -q the specify the domain name, or use \"IN.\" and \"CH.\" when looking up these top level domains.","Process Name":"dig","Link":"https:\/\/linux.die.net\/man\/1\/dig"}},{"Process":{"Description":"digitaglinktree will create a linktree for all photos in a digikam database that have tags set on them. Tags (like eg. \"family\", \"events\", ...) are used in digikam to create virtual folders containing images that all have one or more tags assigned. Please note: Photos that have no tags at all assigned are silently ignored by this script. The program will not modify or even touch your original photos managed by digikam. The script can be used in two ways: If you call it using Option -l taglinkdir the script will create the user specified directory taglinkdir and inside this directory it will create sub directories for digikam tags set on the photos. Inside these subdirectories it will finally place symbolic or hard links (see -H) to photos having the tags in question. As a result you will see the tags of your photos as folders and in these folders you will find links to your original photos. In this way you can access the collection of all images that share a certain tag by changing directory to the folder with the tags name created by this script. This allows you e.g. to run JAlbum a photo album software that needs to find the pictures to be put into a web album in the filesystem because JAlbum cannot access digikams virtual folders directly. The second way of calling this script is the so called archive-mode by setting option -A archiveDir. Archive mode is thought for people who want to archive tagged photos independently of digikams root directories and the photos therein. This way you can put your photos and their tag structure in eg. a tar archive and send it to a friend, who can look at the photos via their tag structure. In this mode the script creates the directory given as parameter to -A and in this directory two more subdirectories. One named Photos and a second named Tags. The Photos directory contains hard links to your original photos, and the Tags directory contains a subdirectory for each Tag used by any of your photos. Inside this subdirectory there are links (either symbolic or hard links) to the files in the Photos directory. This way the archive directory needs nearly no additional space on your harddisk and you have an archive that allows you or a friend to easily look at the photos tag structure. Another benefit from using this script is that you have kind of a backup of your tag settings for all of your photos. The backup is simply the directory structure containing links to the original images that wear the tags. This could become important if for whatever reason the digikam.db file gets corrupted or even lost.","Process Name":"digitaglinktree","Link":"https:\/\/linux.die.net\/man\/1\/digitaglinktree"}},{"Process":{"Description":"DigiTemp uses the Dallas 1-wire bus to read temperatures from digital sensors attached to a serial port adapter. It handles initializing the bus, searching for attached devices, reading devices and custom log strings. It suports the following temperature devices: DS1820, DS18S20, DS18B20, DS1822 It also handles the DS2406 1-wire hub switches, and DS2422 and DS2423 counters. DigiTemp uses either the DS9097 passive serial port adapter, or the DS2480B based DS9097U adapter. 1-wire adapters from ibuttonlink.com, such as the Link45 are also supported.","Process Name":"digitemp","Link":"https:\/\/linux.die.net\/man\/1\/digitemp"}},{"Process":{"Description":"dijkstra reads a stream of graphs and for each computes the distance of every node from sourcenode. Edge length is given in the len attribute, and the default is 1. The dist attribute of every node is set to its distance from sourcenode. If the -p flag is used, the prev attribute of each node reachable from sourcenode is set to the name of the previous node on a shortest path. The graph attribute maxdist is set to the maximum dist of all nodes in the graph. By default, if the graph is disconnected, the dist attribute of nodes unreachable from sourcenode are left untouched, and maxdist is set to the maximum of any previous value and the largest distance recorded in this run. On the other hand, if the -a flag is used, the dist attribute of an unreachable node is assigned a very large value, and maxdist records the maximum distance found in the component containing sourcenode. Any number of sourcenode file pairs may be given. If the last file is missing, stdin is used. All output is written to stdout. In a typical application, dist and maxdist can drive a downstream calculation of color or some other attribute.","Process Name":"dijkstra","Link":"https:\/\/linux.die.net\/man\/1\/dijkstra"}},{"Process":{"Description":"dimfilter will filter a .grd file in the space (or time) domain by dividing the given filter circle into n_sectors, applying one of the selected primary convolution or non-convolution filters to each sector, and choosing the final outcome according to the selected secondary filter. It computes distances using Cartesian or Spherical geometries. The output .grd file can optionally be generated as a sub -Region of the input and\/or with a new -Increment. In this way, one may have \"extra space\" in the input data so that the edges will not be used and the output can be within one-half-width of the input edges. If the filter is low-pass, then the output may be less frequently sampled than the input. -Q is for the error analysis mode and only requires the total number of columns in the input file, which contains the filtered depths. Finally, one should know that dimfilter will not produce a smooth output as other spatial filters do because it returns a minimum median out of N medians of N sectors. The output can be edgy unless the input data is noise-free. Thus, an additional filtering (e.g., Gaussian) to the DiM-filtered data is generally recommended. input_file.grd The file of points to be filtered. -D Distance flag tells how grid (x,y) relates to filter width as follows: flag = 0: grid (x,y) same units as width, Cartesian distances. flag = 1: grid (x,y) in degrees, width in kilometers, Cartesian distances. flag = 2: grid (x,y) in degrees, width in km, dx scaled by cos(middle y), Cartesian distances. The above options are fastest because they allow weight matrix to be computed only once. The next three options are slower because they recompute weights for each latitude. flag = 3: grid (x,y) in degrees, width in km, dx scaled by cosine(y), Cartesian distance calculation. flag = 4: grid (x,y) in degrees, width in km, Spherical distance calculation. -F Sets the primary filter type. Choose among convolution and non-convolution filters. Append the filter code followed by the full diameter width. Available convolution filters are: ( b) Boxcar: All weights are equal. ( c) Cosine Arch: Weights follow a cosine arch curve. ( g) Gaussian: Weights are given by the Gaussian function. Non-convolution filters are: ( m) Median: Returns median value. ( p) Maximum likelihood probability (a mode estimator): Return modal value. If more than one mode is found we return their average value. Append - or + to the filter width if you rather want to return the smallest or largest of the modal values. -N Sets the secondary filter type and the number of bow-tie sectors. n_sectors must be integer and larger than 0. When n_sectors is set to 1, the secondary filter is not effective. Available secondary filters are: ( l) Lower: Return the minimum of all filtered values. ( u) Upper: Return the maximum of all filtered values. ( a) Average: Return the mean of all filtered values. ( m) Median: Return the median of all filtered values. ( p) Mode: Return the mode of all filtered values. -G output_file.grd is the output of the filter.","Process Name":"dimfilter","Link":"https:\/\/linux.die.net\/man\/1\/dimfilter"}},{"Process":{"Description":"ding is a dictionary lookup program for X Windows\/Unix. It comes with a German-English dictionary with about 185,000 entries. It is based on Tk version >= 8.3 and uses the agrep(1) or egrep(1) tools for searching. In addition to this ding can also search using ispell(1) and dict(1). It has many configuration options, such as search preferences, interface language (English or German), colors. It has history and help functions and comes with useful key and mouse bindings for quick and easy lookups. If you enter some word or phrase as command line argument, ding will start up with a translation of this word\/phrase.","Process Name":"ding","Link":"https:\/\/linux.die.net\/man\/1\/ding"}},{"Process":{"Description":"List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuvSUX nor --sort. Mandatory arguments to long options are mandatory for short options too. -a, --all do not ignore entries starting with . -A, --almost-all do not list implied . and .. --author with -l, print the author of each file -b, --escape print octal escapes for nongraphic characters --block-size= SIZE use SIZE-byte blocks. See SIZE format below -B, --ignore-backups do not list implied entries ending with ~ -c with -lt: sort by, and show, ctime (time of last modification of file status information) with -l: show ctime and sort by name otherwise: sort by ctime -C list entries by columns --color[= WHEN] colorize the output. WHEN defaults to 'always' or can be 'never' or 'auto'. More info below -d, --directory list directory entries instead of contents, and do not dereference symbolic links -D, --dired generate output designed for Emacs' dired mode -f do not sort, enable -aU, disable -ls --color -F, --classify append indicator (one of *\/=>@|) to entries --file-type likewise, except do not append '*' --format= WORD across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C --full-time like -l --time-style= full-iso -g like -l, but do not list owner --group-directories-first group directories before files. augment with a --sort option, but any use of --sort= none ( -U) disables grouping -G, --no-group in a long listing, don't print group names -h, --human-readable with -l, print sizes in human readable format (e.g., 1K 234M 2G) --si likewise, but use powers of 1000 not 1024 -H, --dereference-command-line follow symbolic links listed on the command line --dereference-command-line-symlink-to-dir follow each command line symbolic link that points to a directory --hide= PATTERN do not list implied entries matching shell PATTERN (overridden by -a or -A) --indicator-style= WORD append indicator with style WORD to entry names: none (default), slash ( -p), file-type ( --file-type), classify ( -F) -i, --inode print the index number of each file -I, --ignore= PATTERN do not list implied entries matching shell PATTERN -k like --block-size= 1K -l use a long listing format -L, --dereference when showing file information for a symbolic link, show information for the file the link references rather than for the link itself -m fill width with a comma separated list of entries -n, --numeric-uid-gid like -l, but list numeric user and group IDs -N, --literal print raw entry names (don't treat e.g. control characters specially) -o like -l, but do not list group information -p, --indicator-style= slash append \/ indicator to directories -q, --hide-control-chars print ? instead of non graphic characters --show-control-chars show non graphic characters as-is (default unless program is 'ls' and output is a terminal) -Q, --quote-name enclose entry names in double quotes --quoting-style= WORD use quoting style WORD for entry names: literal, locale, shell, shell-always, c, escape -r, --reverse reverse order while sorting -R, --recursive list subdirectories recursively -s, --size print the allocated size of each file, in blocks -S sort by file size --sort= WORD sort by WORD instead of name: none -U, extension -X, size -S, time -t, version -v --time= WORD with -l, show time as WORD instead of modification time: atime -u, access -u, use -u, ctime -c, or status -c; use specified time as sort key if --sort= time --time-style= STYLE with -l, show times using style STYLE: full-iso, long-iso, iso, locale, +FORMAT. FORMAT is interpreted like 'date'; if FORMAT is FORMAT1<newline>FORMAT2, FORMAT1 applies to non-recent files and FORMAT2 to recent files; if STYLE is prefixed with 'posix-', STYLE takes effect only outside the POSIX locale -t sort by modification time -T, --tabsize= COLS assume tab stops at each COLS instead of 8 -u with -lt: sort by, and show, access time with -l: show access time and sort by name otherwise: sort by access time -U do not sort; list entries in directory order -v natural sort of (version) numbers within text -w, --width= COLS assume screen width instead of current value -x list entries by lines instead of by columns -X sort alphabetically by entry extension -1 list one file per line SELinux options: --lcontext Display security context. Enable -l. Lines will probably be too wide for most displays. -Z, --context Display security context so it fits on most displays. Displays only mode, user, group, security context and file name. --scontext Display only security context and file name. --help display this help and exit --version output version information and exit SIZE may be (or may be an integer optionally followed by) one of following: KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y. Using color to distinguish file types is disabled both by default and with --color=never. With --color=auto, ls emits color codes only when standard output is connected to a terminal. The LS_COLORS environment variable can change the settings. Use the dircolors command to set it. Exit status: if OK, if minor problems (e.g., cannot access subdirectory), if serious trouble (e.g., cannot access command-line argument).","Process Name":"dir","Link":"https:\/\/linux.die.net\/man\/1\/dir"}},{"Process":{"Description":"Output commands to set the LS_COLORS environment variable. Determine format of output: -b, --sh, --bourne-shell output Bourne shell code to set LS_COLORS -c, --csh, --c-shell output C shell code to set LS_COLORS -p, --print-database output defaults --help display this help and exit --version output version information and exit If FILE is specified, read it to determine which colors to use for which file types and extensions. Otherwise, a precompiled database is used. For details on the format of these files, run 'dircolors --print-database'.","Process Name":"dircolors","Link":"https:\/\/linux.die.net\/man\/1\/dircolors"}},{"Process":{"Description":"dircproxy is an IRC proxy server designed for people who use IRC from lots of different workstations or clients, but wish to remain connected and see what they missed while they were away. You connect to IRC through dircproxy, and it keeps you connected to the server, even after you detach your client from it. While you're detached, it logs channel and private messages as well as important events, and when you re-attach it'll let you know what you missed. This can be used to give you roughly the same functionality as using ircII and screen(8) together, except you can use whatever IRC client you like, including X ones! Authentication is provided by a password, and optional hostname checking. This links it to a connection class specified in the configuration file. Only one user may use a connection class at one time, when that user detaches, the connection to the server is kept open. When someone (usually the user) subsequently connects to dircproxy and provides the same password, they are reconnected to the connection to the server, instead of having a new connection created for them. Multiple connection classes can be defined, allowing multiple people to use the same proxy. dircproxy can use either a .dircproxyrc file in the user's home directory, or a system-wide dircproxyrc file. It will load the first it finds (home directory first, then system-wide). If no configuration file is specified, it will not start.","Process Name":"dircproxy","Link":"https:\/\/linux.die.net\/man\/1\/dircproxy"}},{"Process":{"Description":"dircproxy-crypt generates encrypted passwords for the dircproxy(1) configuration file. These passwords are used in the 'password' configuration option of a connection class, and are compared to the password you configure your IRC client to use. If you do not supply any plain text passwords to encrypt on the command line then dircproxy-crypt, when run, will ask you for one on standard input. It will display the encrypted version of each password, created using your system's crypt(3) function and a random salt, on standard output.","Process Name":"dircproxy-crypt","Link":"https:\/\/linux.die.net\/man\/1\/dircproxy-crypt"}},{"Process":{"Description":"directfb-csource is a small utility that reads PNG (Portable Network Graphics) image files and generates C code that can be used to compile an image into a DirectFB application. Below is a simple example to illustrate this. If multiple PNG image files are passed to directfb-csource, they are combined into a single surface. The different images can then be blitted from this surface using the array of rectangles that is also dumped. This can be useful for example for icons or sprites.","Process Name":"directfb-csource","Link":"https:\/\/linux.die.net\/man\/1\/directfb-csource"}},{"Process":{"Description":"","Process Name":"dirh","Link":"https:\/\/linux.die.net\/man\/1\/dirh"}},{"Process":{"Description":"Dirmngr is a server for managing and downloading certificate revocation lists (CRLs) for X.509 certificates and for downloading the certificates themselves. Dirmngr also handles OCSP requests as an alternative to CRLs. Dirmngr is either invoked internally by gpgsm (from GnuPG 2) or when running as a system daemon through the dirmngr-client tool.","Process Name":"dirmngr","Link":"https:\/\/linux.die.net\/man\/1\/dirmngr"}},{"Process":{"Description":"The dirmngr-client is a simple tool to contact a running dirmngr and test whether a certificate has been revoked --- either by being listed in the corresponding CRL or by running the OCSP protocol. If no dirmngr is running, a new instances will be started but this is in general not a good idea due to the huge performance overhead. The usual way to run this tool is either: dirmngr-client acert or dirmngr-client <acert Where acert is one DER encoded (binary) X.509 certificates to be tested.","Process Name":"dirmngr-client","Link":"https:\/\/linux.die.net\/man\/1\/dirmngr-client"}},{"Process":{"Description":"Print NAME with its trailing \/component removed; if NAME contains no \/'s, output '.' (meaning the current directory). --help display this help and exit --version output version information and exit","Process Name":"dirname","Link":"https:\/\/linux.die.net\/man\/1\/dirname"}},{"Process":{"Description":"","Process Name":"dirs","Link":"https:\/\/linux.die.net\/man\/1\/dirs"}},{"Process":{"Description":"displit is designed to for a simple purpose: convert a directory with many multiple files (which are all smaller than a certain medium, eg. DVD) and \"splits\" it into \"volumes\", looking for the optimal order to get the best space\/medium-number efficiency. The actual action is either adding the files to mkisofs catalogs or real moving of files into new directories (or creating links\/symlinks). The method is not limited to files, whole directories can also be handled this way (see various filesystem exploration modes).","Process Name":"dirsplit","Link":"https:\/\/linux.die.net\/man\/1\/dirsplit"}},{"Process":{"Description":"DirSync is a Directory Synchronizer. This utility takes two arguments: the source and destination directory, and makes recursively the two directories identical.","Process Name":"dirsync","Link":"https:\/\/linux.die.net\/man\/1\/dirsync"}},{"Process":{"Description":"disco is a tool for discovering web services and for retireving the documents that describe those services. url is the location of a DISCO document, which includes a list of WSDL documents, XML schemas and references to other DISCO documents. disco downloads the DISCO document and all referenced documents (unless the -nosave option is specified), and saves them to disk.","Process Name":"disco","Link":"https:\/\/linux.die.net\/man\/1\/disco"}},{"Process":{"Description":"More ''discrete map'' systems, including new variants of Hopalong and Julia, and a few others.","Process Name":"discrete","Link":"https:\/\/linux.die.net\/man\/1\/discrete"}},{"Process":{"Description":"The purpose of disktype is to detect the content format of a disk or disk image. It knows about common file systems, partition tables, and boot codes.","Process Name":"disktype","Link":"https:\/\/linux.die.net\/man\/1\/disktype"}},{"Process":{"Description":"","Process Name":"dislocate","Link":"https:\/\/linux.die.net\/man\/1\/dislocate"}},{"Process":{"Description":"Given a decryption mean, dislocker is used to read BitLocker encrypted volumes. Options are described below: -c, --clearkey decrypt volume using a clear key which is search on the volume -f, --bekfile BEK_FILE decrypt volume using the bek file (present on a USB key) -F, --force-block[N] force use of metadata block number N (1, 2 or 3), the first by default -h print the help and exit -l, --logfile LOG_FILE put messages into this file (stdout by default) -o, --offset OFFSET BitLocker partition offset (default is 0) -p, --recovery-password[RECOVERY_PASSWORD] decrypt volume using the recovery password method. If no password is provided, it will be asked afterward; this has the advantage that the program will validate each block one by one, on the fly, as you type it -v, --verbosity increase verbosity (no output by default) -V, --volume VOLUME volume to get metadata and encrypted keys from -- mark the end of program's options and the beginning of FUSE's ones (useful if you want to pass something like -d to FUSE) ARGS are any arguments you want to pass to FUSE. Note that you need to pass at least the mount-point. A second mode is available besides FUSE: don't use FUSE, decrypt the entire volume into a new file. After using this mode, just mount the resulting file normally afterward. This process may take a very long time, depending on the initial volume size.","Process Name":"dislocker","Link":"https:\/\/linux.die.net\/man\/1\/dislocker"}},{"Process":{"Description":"","Process Name":"disown","Link":"https:\/\/linux.die.net\/man\/1\/disown"}},{"Process":{"Description":"Image Settings: -antialias remove pixel-aliasing -authenticate value decrypt image with this password -backdrop display image centered on a backdrop -channel type apply option to select image channels -colormap type Shared or Private -colorspace type alternate image colorspace -comment string annotate image with comment -compress type type of pixel compression when writing the image -decipher filename convert cipher pixels to plain pixels -define format:option define one or more image format options -delay value display the next image after pausing -density geometry horizontal and vertical density of the image -depth value image depth -display server display image to this X server -dispose method layer disposal method -dither method apply error diffusion to image -endian type endianness (MSB or LSB) of the image -equalize perform histogram equalization to an image -filter type use this filter when resizing an image -format \"string\" output formatted image characteristics -fuzz distance colors within this distance are considered equal -geometry geometry preferred size and location of the Image window -gravity type horizontal and vertical backdrop placement -identify identify the format and characteristics of the image -immutable displayed image cannot be modified -interlace type type of image interlacing scheme -interpolate method pixel color interpolation method -label string assign a label to an image -limit type value pixel cache resource limit -loop iterations loop images then exit -map type display image using this Standard Colormap -matte store matte channel if the image has one -monitor monitor progress -page geometry size and location of an image canvas -profile filename add, delete, or apply an image profile -quality value JPEG\/MIFF\/PNG compression level -quantize colorspace reduce colors in this colorspace -quiet suppress all warning messages -regard-warnings pay attention to warning messages -remote command execute a command in an remote display process -repage geometry size and location of an image canvas (operator) -sampling-factor geometry horizontal and vertical sampling factor -scenes range image scene range -seed value seed a new sequence of pseudo-random numbers -set property value set an image property -size geometry width and height of image -support factor resize support: > 1.0 is blurry, < 1.0 is sharp -texture filename name of texture to tile onto the image background -transparent-color color transparent color -treedepth value color tree depth -update seconds detect when image file is modified and redisplay -verbose print detailed information about the image -visual type display image using this visual type -virtual-pixel method virtual pixel access method -window id display image to background of this window -window-group id exit program when this window id is destroyed -write filename write image to a file Image Operators: -auto-orient automatically orient image -border geometry surround image with a border of color -clip clip along the first path from the 8BIM profile -clip-path id clip along a named path from the 8BIM profile -colors value preferred number of colors in the image -contrast enhance or reduce the image contrast -crop geometry preferred size and location of the cropped image -despeckle reduce the speckles within an image -edge factor apply a filter to detect edges in the image -enhance apply a digital filter to enhance a noisy image -extract geometry extract area from image -flip flip image in the vertical direction -flop flop image in the horizontal direction -frame geometry surround image with an ornamental border -gamma value level of gamma correction -monochrome transform image to black and white -negate replace every pixel with its complementary color -raise value lighten\/darken image edges to create a 3-D effect -resample geometry change the resolution of an image -resize geometry resize the image -roll geometry roll an image vertically or horizontally -rotate degrees apply Paeth rotation to the image -sample geometry scale image with pixel sampling -segment value segment an image -sharpen geometry sharpen the image -strip strip image of all profiles and comments -trim trim image edges Image Sequence Operators: -coalesce merge a sequence of images -flatten flatten a sequence of images Miscellaneous Options: -debug events display copious debugging information -help print program options -log format format of debugging information -list type print a list of supported option arguments -version print version information In addition to those listed above, you can specify these standard X resources as command line options: -background, -bordercolor, -borderwidth, -font, -foreground, -iconGeometry, -iconic, -mattecolor, -name, -shared-memory, -usePixmap, or -title. By default, the image format of 'file' is determined by its magic number. To specify a particular image format, precede the filename with an image format name and a colon (i.e. ps:image) or specify the image type as the filename suffix (i.e. image.ps). Specify 'file' as '-' for standard input or output. Buttons: 1 press to map or unmap the Command widget 2 press and drag to magnify a region of an image 3 press to load an image from a visual image directory","Process Name":"display","Link":"https:\/\/linux.die.net\/man\/1\/display"}},{"Process":{"Description":"Dissy is a disassembler for Linux and UNIX which supports multiple architectures and allows easy navigation through the code. Dissy is implemented in Python and uses objdump for disassembling files. Dissy can be used for debugging, reverse engineering and checking compiler-generated code. -t BASE_ADDRESS Use BASE_ADDRESS as the start address of the disassembled code -h Display usage","Process Name":"dissy","Link":"https:\/\/linux.die.net\/man\/1\/dissy"}},{"Process":{"Description":"distcc distributes compilation of C code across several machines on a network. distcc should always generate the same results as a local compile, it is simple to install and use, and it is often much faster than a local compile. This version incorporates plain distcc as well as an enhancement called pump mode or distcc-pump. For each job, distcc in plain mode sends the complete preprocessed source code and compiler arguments across the network from the client to a compilation server. In pump mode, distcc sends the source code and recursively included header files (excluding those from the default system header directories), so that both preprocessing and compilation can take place on the compilation servers. This speeds up the delivery of compilations by up to an order of magnitude over plain distcc. Compilation is driven by a client machine, which is typically the developer's workstation or laptop. The distcc client runs on this machine, as does make, the preprocessor (if distcc's pump mode is not used), the linker, and other stages of the build process. Any number of volunteer machines act as compilation servers and help the client to build the program, by running the distccd(1) daemon, C compiler and assembler as required. distcc can run across either TCP sockets (on port 3632 by default), or through a tunnel command such as ssh(1). For TCP connections the volunteers must run the distccd(1) daemon either directly or from inetd. For SSH connections distccd must be installed but should not be listening for connections. TCP connections should only be used on secure networks because there is no user authentication or protection of source or object code. SSH connections are typically 25% slower because of processor overhead for encryption, although this can vary greatly depending on CPUs, network and the program being built. distcc is intended to be used with GNU Make's -j option, which runs several compiler processes concurrently. distcc spreads the jobs across both local and remote CPUs. Because distcc is able to distribute most of the work across the network, a higher concurrency level can be used than for local builds. As a rule of thumb, the -j value should be set to about twice the total number of available server CPUs but subject to client limitations. This setting allows for maximal interleaving of tasks being blocked waiting for disk or network IO. Note that distcc can also work with other build control tools, such as SCons, where similar concurrency settings must be adjusted. The -j setting, especially for large values of -j, must take into account the CPU load on the client. Additional measures may be needed to curtail the client load. For example, concurrent linking should be severely curtailed using auxiliary locks. The effect of other build activity, such as Java compilation when building mixed code, should be considered. The --localslots_cpp parameter is by default set to 16. This limits the number of concurrent processes that do preprocessing in plain distcc (non-pump) mode. Therefore, larger -j values than 16 may be used without overloading a single-CPU client due to preprocessing. Such large values may speed up parts of the build that do not involve C compilations, but they may not be useful to distcc efficiency in plain mode. In contrast, using pump mode and say 40 servers, a setting of -j80 or larger may be appropriate even for single-CPU clients. It is strongly recommended that you install the same compiler version on all machines participating in a build. Incompatible compilers may cause mysterious compile or link failures.","Process Name":"distcc","Link":"https:\/\/linux.die.net\/man\/1\/distcc"}},{"Process":{"Description":"distccd is the server for the distcc(1) distributed compiler. It accepts and runs compilation jobs for network clients. distcc can run over either TCP or a connection command such as ssh(1). TCP connections are fast but relatively insecure. SSH connections are secure but slower. For SSH connections, distccd must be installed on the volunteer but should not run as a daemon -- it will be started over SSH as needed. SSH connections have several advantages: neither the client nor server listens on any new ports; compilations run with the privileges of the user that requested them; unauthorized users cannot access the server; and source and output is protected in transit. For TCP connections, distccd can run either from an inetd-style program, or as a standalone server. Standalone mode is recommended because it is slightly more efficient and allows distccd to regulate the number of incoming jobs. The --listen and --allow options can be used for simple IP-based access control. distcc may be started either by root or any other user. If run by root, it gives away privileges and changes to the user specified by the --user option, or the user called \"distcc\", or the user called \"nobody\". distccd does not have a configuration file; it's behaviour is controlled only by command-line options and requests from clients.","Process Name":"distccd","Link":"https:\/\/linux.die.net\/man\/1\/distccd"}},{"Process":{"Description":"Displays current compilation jobs in text form. distccmon-text must be run on the client machine, with the same setting for DISTCC_DIR (or home directory) as the user running the distcc client.","Process Name":"distccmon-text","Link":"https:\/\/linux.die.net\/man\/1\/distccmon-text"}},{"Process":{"Description":"The distort program takes an image and lets circular zones of distortion wander randomly around it, distorting what is under them. The mode of distortion and the overall behaviour of the zones can be influenced in various ways. The image that it manipulates will be grabbed from the portion of the screen underlying the window, or from the system's video input, or from a random file on disk, as indicated by the grabDesktopImages, grabVideoFrames, and chooseRandomImages options in the ~\/.xscreensaver file; see xscreensaver-demo(1) for more details.","Process Name":"distort","Link":"https:\/\/linux.die.net\/man\/1\/distort"}},{"Process":{"Description":"This utility script provides commands for creation and maintenance of Django projects and apps. With the exception of startproject, all commands listed below can also be performed with the manage.py script found at the top level of each Django project directory.","Process Name":"django-admin","Link":"https:\/\/linux.die.net\/man\/1\/django-admin"}},{"Process":{"Description":"Django Lint is a tool that statically analyses projects and applications that use the Django web development framework. It checks and reports on common programming errors and bad code smells including nullable \"CharField\" fields, the use of brittle Django features such as \"auto_now_add\" and unspecified recommended options in settings.py, such as an empty 'ADMINS' setting (plus many more). The target argument is mandatory and can specify either a directory containing a Django project, a single application or a single file.","Process Name":"django-lint","Link":"https:\/\/linux.die.net\/man\/1\/django-lint"}},{"Process":{"Description":"djbdns is a collection of DNS tools, originally written by Dr D J Bernstein. This release of djbdns includes the following ones + dnscache + dnsfilter + dnsip + dnsipq + dnsmx + dnsname + dnsq + dnsqr + dnstrace + dnstracesort + dnstxt + tinydns + tinydns-data + tinydns-edit + tinydns-get","Process Name":"djbdns","Link":"https:\/\/linux.die.net\/man\/1\/djbdns"}},{"Process":{"Description":"djpeg decompresses the named JPEG file, or the standard input if no file is named, and produces an image file on the standard output. PBMPLUS (PPM\/PGM), BMP, GIF, Targa, or RLE (Utah Raster Toolkit) output format can be selected. (RLE is supported only if the URT library is available.)","Process Name":"djpeg","Link":"https:\/\/linux.die.net\/man\/1\/djpeg"}},{"Process":{"Description":"Standalone viewer for DjVu files. Features include navigating documents, zooming and panning page images, producing and displaying thumbnails, searching documents for particular words in the hidden text layer, copying hidden text to the clipboard, exporting page images as PNM files, saving pages and documents as bundled or indirect multi-page files, and printing page and documents to Postscript printers.","Process Name":"djview","Link":"https:\/\/linux.die.net\/man\/1\/djview"}},{"Process":{"Description":"Standalone viewer for DjVu files. Features include navigating documents, zooming and panning page images, producing and displaying thumbnails, searching documents for particular words in the hidden text layer, copying hidden text to the clipboard, exporting page images as PNM files, saving pages and documents as bundled or indirect multi-page files, and printing page and documents to Postscript printers.","Process Name":"djview3","Link":"https:\/\/linux.die.net\/man\/1\/djview3"}},{"Process":{"Description":"Standalone viewer for DjVu files. Features include navigating documents, zooming and panning page images, producing and displaying thumbnails, displaying document outlines, searching documents for particular words in the hidden text layer, copying hidden text to the clipboard, saving pages and documents as bundled or indirect multi-page files, and printing page and documents. The viewer can simultaneously display several pages using a side-by-side or a continuous layout.","Process Name":"djview4","Link":"https:\/\/linux.die.net\/man\/1\/djview4"}},{"Process":{"Description":"This program creates or modifies a bundled multi-page DjVu document. Multi-page bundled documents can be used directly or converted to indirect document using command djvmcvt.","Process Name":"djvm","Link":"https:\/\/linux.die.net\/man\/1\/djvm"}},{"Process":{"Description":"This program converts any multi-page DjVu document to either the bundled or indirect multi-page format. The input file docin.djvu must be either the file name of a bundled document or the index file of an indirect document.","Process Name":"djvmcvt","Link":"https:\/\/linux.die.net\/man\/1\/djvmcvt"}},{"Process":{"Description":"","Process Name":"djvu","Link":"https:\/\/linux.die.net\/man\/1\/djvu"}},{"Process":{"Description":"This program creates a DjVu file from the PostScript ( .ps), GZipped PostScript ( .ps.gz), Encapsulated PostScript ( .eps), or Portable Document Format ( .pdf) file inputfile. The output file name is either given by argument outputfile or generated by replacing the input file name suffixes by the DjVu suffix (.djvu).","Process Name":"djvudigital","Link":"https:\/\/linux.die.net\/man\/1\/djvudigital"}},{"Process":{"Description":"Program djvudump prints an indented representation of the chunk structure of any DjVu files. Each line represent contains a chunk ID followed by the chunk size. Lines are indented in order to reflect the hierarchical structure of the IFF files. The page identifier is printed between curly braces when a bundled multi-page DjVu document is recognized. Additional information about each chunk is provided when djvudump recognizes the chunk name and knows how to summarize the chunk data.","Process Name":"djvudump","Link":"https:\/\/linux.die.net\/man\/1\/djvudump"}},{"Process":{"Description":"Program djvuextract extracts raw chunk data from a DjVu file djvufile. These chunks can then be re-assembled into DjVu files using program djvumake. Option -page can be used to specify a particular page. Otherwise the first page of the document is assumed. Each remaining argument specifies that the raw data associated with all the chunks named chkid will be concatenated into the file named filename. Chunks named BG44 and FG44 are handled slightly differently: the program generates legal IW44 files instead of simply saving the raw data. See the man page djvumake(1) for related information.","Process Name":"djvuextract","Link":"https:\/\/linux.die.net\/man\/1\/djvuextract"}},{"Process":{"Description":"Program djvumake assembles a single-page DjVu file djvufile by copying or creating chunks according to the provided arguments. Supported arguments are as follows: INFO= w , h , dpi Create the initial information chunk. Arguments w, h, and dpi describe the width, height and resolution of the image. All arguments may be omitted. The default resolution is 300 dpi. The default width and height will be retrieved from the first mask chunk specified in the command line options. Sjbz= jb2file Create a JB2 foreground mask chunk. File jb2file may contain raw JB2 data, or be a DjVu file containing JB2 data such as those produced by program cjb2. Smmr= mmrfile Create a MMR\/G4 foreground mask chunk. File mmrfile may contain raw MMR data or be a DjVu file containing MMR data. BG44= iw44file [: n ] Create one or more IW44 background chunks. File iw44file must contain IW44 data. Such files can be obtained by compressing the background image with program c44 and extracting the raw IW44 data using program djvuextract. The optional argument n indicates the number of chunks to copy from the IW44 file. Omitting the number of chunks copies all available chunks. BGjp= jpegfile Create a JPEG encoded background chunk. File jpegfile must contain JPEG encoded data. BG2k= jpegfile Create a JPEG-2000 background chunk. File jpegfile must contain JPEG-2000 encoded data. The DjVu decoder does not yet display files containing JPEG-2000 data. FGbz=( filename |{# color [: x , y , w , h ]}) Create a foreground color chunk describing one solid color for each JB2 encoded mark. The argument can be the name filename of a file containing the raw data. Such files are best created using program djvuextract(1). Alternatively the argument could describe a sequence of color zones. Each color zone specifies a color name color, and optionally the coordinates x, y, w, h of a rectangle. Each mark receives the color of the last color zone whose rectangle intersects the bounding box of the mark. The mark is painted black if its bounding box does not intersect one of the zones. The rectangle coordinates are expressed in pixels with the origin at the bottom left corner of the page. The full page is assumed when no rectangle coordinates are specified. Color names can be specified with exactly six hexadecimal digits, e.g. FGbz=#FF8080, or by one of the following sixteen HTML color names defined by the W3C, e.g. FGbz=#red. aqua black blue fuchsia gray green lime maroon navy olive purple red silver teal white yellow FG44= iw44file Create a IW44 foreground color chunk. File iw44file must contain IW44 data. Such files can be obtained by compressing the background image with command c44 and extracting the raw IW44 data using program djvuextract. Only the first chunk is copied. FGjp= jpegfile Create a JPEG foreground color chunk. FG2k= jpegfile Create a JPEG-2000 foreground color chunk. The DjVu decoder does not yet display files containing JPEG-2000 data. INCL= fileid Create a DjVu3 include chunk pointing to the component file named fileid. The resulting file should then be included into a multipage document using command djvm. Djbz= jb2file Create a JB2 shape dictionary. File jb2file must contain raw JB2 data describing a JB2 dictionary. PPM= ppmfile Create a IW44 background chunk and a IW44 foreground color chunk by masking and subsampling the PPM file ppmfile. Assume, for instance, that we have a PPM image myimage.ppm and an identically sized PBM bitonal image mymask.pbm whose black pixels indicate which pixels belong to the foreground. Such a bitonal file might have been obtained by thresholding or color-keying the PPM image. We can then produce a DjVuDocument image using the following two commands: cjb2 mymask.pbm mymask.djvu djvumake my.djvu Sjbz=mymask.djvu PPM=myimage.ppm The DjVu specification documents in the directory doc of the DjVuLibre distribution provide the authoritative information about the composition of a legal DjVu image file.","Process Name":"djvumake","Link":"https:\/\/linux.die.net\/man\/1\/djvumake"}},{"Process":{"Description":"This program decodes DjVu file djvufile, and generates a PostScript file named outputfile. The DjVu data is read from the standard input when argument djvufile is not specified or when it is equal to a single dash. Similarly, the output data is written to the standard output when argument outputfile is not specified or equal to a single dash. PostScript printers have various capabilities. Investigate options -level and -gray for obtaining the best results.","Process Name":"djvups","Link":"https:\/\/linux.die.net\/man\/1\/djvups"}},{"Process":{"Description":"Program djvused is a powerful command line tool for manipulating multi-page documents, creating or editing annotation chunks, creating or editing hidden text layers, pre-computing thumbnail images, and more. The program first reads the DjVu document djvufile and executes a number of djvused commands. Djvused commands can be read from a specific file (when option -f is specified), read from the command line (when option -e is specified), or read from the standard input (the default).","Process Name":"djvused","Link":"https:\/\/linux.die.net\/man\/1\/djvused"}},{"Process":{"Description":"Program djvuserve is a CGI program that can be executed by a HTTP server for serving DjVu documents. This program is able to convert a bundled multi-page document into an indirect document on the fly.","Process Name":"djvuserve","Link":"https:\/\/linux.die.net\/man\/1\/djvuserve"}},{"Process":{"Description":"The DjVuLibre XML Tools provide for editing the metadata, hyperlinks and hidden text associated with DjVu files. Unlike djvused(1) the DjVuLibre XML Tools rely on the XML technology and can take advantage of XML editors and verifiers.","Process Name":"djvutoxml","Link":"https:\/\/linux.die.net\/man\/1\/djvutoxml"}},{"Process":{"Description":"Program djvutxt decodes the hidden text layer of a DjVu document inputdjvufile and prints it into file outputtxtfile or on the standard output. The hidden text layer is usually generated with the help of an optical character recognition software. Without options -detail and -escape, this program simply outputs the UTF-8 text. Option -detail cause the output of S-expressions describing the text and its location. Option -escape uses C-style escape sequences to represent nonprintable non-ASCII characters.","Process Name":"djvutxt","Link":"https:\/\/linux.die.net\/man\/1\/djvutxt"}},{"Process":{"Description":"The DjVuLibre XML Tools provide for editing the metadata, hyperlinks and hidden text associated with DjVu files. Unlike djvused(1) the DjVuLibre XML Tools rely on the XML technology and can take advantage of XML editors and verifiers.","Process Name":"djvuxml","Link":"https:\/\/linux.die.net\/man\/1\/djvuxml"}},{"Process":{"Description":"The DjVuLibre XML Tools provide for editing the metadata, hyperlinks and hidden text associated with DjVu files. Unlike djvused(1) the DjVuLibre XML Tools rely on the XML technology and can take advantage of XML editors and verifiers.","Process Name":"djvuxmlparser","Link":"https:\/\/linux.die.net\/man\/1\/djvuxmlparser"}},{"Process":{"Description":"This logger clone is intended for users on systems shipped without a logger program. It sends log messages to a syslog server.","Process Name":"dklogger","Link":"https:\/\/linux.die.net\/man\/1\/dklogger"}},{"Process":{"Description":"The dkpref program can be used to retrieve and set preferences used by the dkapp module. If there is no value specified on the command line the program show the current preference value. If there is a value the program sets the new preference value.","Process Name":"dkpref","Link":"https:\/\/linux.die.net\/man\/1\/dkpref"}},{"Process":{"Description":"The program prints the current working directory to the standard output. It is intended for users on systems shipped without a pwd program","Process Name":"dkpwd","Link":"https:\/\/linux.die.net\/man\/1\/dkpwd"}},{"Process":{"Description":"The program reads a passowrd from a terminal and saves the password to file. Keyboard echo is turned off while reading the password. If the program fails to turn off keyboard echo, a message is printed and the user is asked whether or not to continue.","Process Name":"dksavepw","Link":"https:\/\/linux.die.net\/man\/1\/dksavepw"}},{"Process":{"Description":"dlpsh allows the user to connect to a Palm handheld and execute arbitrary DLP commands. Once connected, the user may execute most of the built-in DLP commands. (See BUILT-IN COMMANDS below for more detail on currently supported options). The connection to the Pilot is kept alive by sending a PadTickle packet to the Pilot after a small period of non-activity. (7 seconds by default)","Process Name":"dlpsh","Link":"https:\/\/linux.die.net\/man\/1\/dlpsh"}},{"Process":{"Description":"The Dlume is nice, gtk2-based addressbook. You can easily add, edit and delete records to\/from database (but Dlume doesn't rely on an outside database - It stores your contacts in XML format). The Quick-search feature allows you find required entry in confortable way. Export to CSV and HTML formats is also available.","Process Name":"dlume","Link":"https:\/\/linux.die.net\/man\/1\/dlume"}},{"Process":{"Description":"dmail delivers mail to a user's INBOX or a designated folder. dmail may be configured as a drop-in replacement for binmail(1), mail.local(1) for use with a mail delivery filter such as procmail(1). Because of security considerations (see below) dmail is not intended to be used for direct delivery by the mailer daemon; tmail(1) is the preferred tool for this purpose. If dmail is used for mailer daemon delivery, the mailer daemon must invoke dmail with the dmail process' user id set to the recipient's user id. When dmail exits, it returns exit status values to enable procmail(1) to determine whether a message was delivered successfully or had a temporary (requeue for later delivery) or permanent (return to sender) failure. If the user name is present, it must be the same as the logged-in user name. If the +folder extension is included in the user argument (or appears by itself if there is no user argument), dmail will attempt to deliver to the designated folder. If the folder does not exist or the extension is not included, the message is delivered to the user's INBOX. If delivery is to INBOX and no INBOX currently exists, dmail will create a new INBOX. dmail recognizes the format of an existing INBOX or folder, and appends the new message in that format. The -D flag specifies debugging; this enables additional message telemetry. The -f or -r flag is used to specify a Return-Path. The header Return-Path: <from_name> is prepended to the message before delivery. The -s flag specifies that the message will be flagged as being \"seen\". The -k flag is used to specify delivery keywords, which are set on the message at delivery time if and only if the keywords are already defined in the mailbox. Multiple keywords can be specified by using a quoted string, e.g., dmail -k \"$Junk Discard\" +junkbox","Process Name":"dmail","Link":"https:\/\/linux.die.net\/man\/1\/dmail"}},{"Process":{"Description":"Overview dmenu is a generic menu for X, originally designed for dwm(1). It manages huge amounts (up to 10.000 and more) of user defined menu items efficiently. Options -i makes dmenu match menu entries case insensitively. -b defines that dmenu appears at the bottom. -l <lines> activates vertical list mode. The given number of lines will be displayed. Window height will get adjusted. -fn <font> defines the font. -nb <color> defines the normal background color (#RGB, #RRGGBB, and color names are supported). -nf <color> defines the normal foreground color (#RGB, #RRGGBB, and color names are supported). -p <prompt> defines a prompt to be displayed before the input area. -sb <color> defines the selected background color (#RGB, #RRGGBB, and color names are supported). -sf <color> defines the selected foreground color (#RGB, #RRGGBB, and color names are supported). -v prints version information to standard output, then exits.","Process Name":"dmenu","Link":"https:\/\/linux.die.net\/man\/1\/dmenu"}},{"Process":{"Description":"dmesg is used to examine or control the kernel ring buffer. The program helps users to print out their bootup messages. Instead of copying the messages by hand, the user need only: dmesg > boot.messages and mail the boot.messages file to whoever can debug their problem.","Process Name":"dmesg","Link":"https:\/\/linux.die.net\/man\/1\/dmesg"}},{"Process":{"Description":"DMitry (Deepmagic Information Gathering Tool) is a UNIX\/(GNU)Linux Command Line program coded purely in C with the ability to gather as much information as possible about a host. DMitry has a base functionality with the ability to add new functions. Basic functionality of DMitry allows for information to be gathered about a target host from a simple whois lookup on the target to UpTime reports and TCP portscans. The application is considered a tool to assist in information gathering when information is required quickly by removing the need to enter multiple commands and the timely process of searching through data from multiple sources. To get straight into DMitry without reading this document, you can initially type \"dmitry target\", this will perform the majority of functions on the target.","Process Name":"dmitry","Link":"https:\/\/linux.die.net\/man\/1\/dmitry"}},{"Process":{"Description":"This manual page is not meant to be exhaustive. The complete documentation for this version of TeX can be found in the info file or manual Web2C: A TeX implementation. The dmp program generates MetaPost source code from the ditrofffile. The generated code is written in mpxfile if it is specified, and to standard output otherwise. dmp is typically called from scripts like makempx, not from the command line.","Process Name":"dmp","Link":"https:\/\/linux.die.net\/man\/1\/dmp"}},{"Process":{"Description":"dmtxquery extracts information from the XML output from dmtxread for individual or grouped barcode scan results.","Process Name":"dmtxquery","Link":"https:\/\/linux.die.net\/man\/1\/dmtxquery"}},{"Process":{"Description":"dmtxread searches the named input FILEs (or standard input if no files are named or the filename \"-\" is given) for ECC200 Data Matrix barcodes, reads their contents, and writes the decoded messages to standard output.","Process Name":"dmtxread","Link":"https:\/\/linux.die.net\/man\/1\/dmtxread"}},{"Process":{"Description":"dmtxwrite encodes data from a file or standard input, and writes the resulting ECC200 Data Matrix barcode as an image.","Process Name":"dmtxwrite","Link":"https:\/\/linux.die.net\/man\/1\/dmtxwrite"}},{"Process":{"Description":"dmxtodmx reads the standard input, parsing a configuration file for the Xdmx distributed multi-head X server. After a successful parse, the file is pretty-printed to standard output.","Process Name":"dmxtodmx","Link":"https:\/\/linux.die.net\/man\/1\/dmxtodmx"}},{"Process":{"Description":"This manual page document describes the dnotify command. The dnotify program executes COMMAND every time the contents of any of the specified directories change. If a command is not specified, 'echo {}' is assumed. What is considered a change is determined by the '--access', '--modify', '--create', '--delete', '--rename' and '--attrib' options (see below). These options may be combined. If none of them are specified, create and delete are assumed. The string '{}' in the command specification is replaced by the name of the directory that was updated.","Process Name":"dnotify","Link":"https:\/\/linux.die.net\/man\/1\/dnotify"}},{"Process":{"Description":"\"dnsbltool\" interprets and executes commands for the DNS::BL framework. Commands must be placed entirely on a single line. See DNS::BL , DNS::BL::cmds and its references for more information on command syntax and semantycs. The -v option can be used to produce more verbose output, suitable for debugging. The -i option places \"dnsbltool\" in interactive mode.","Process Name":"dnsbltool","Link":"https:\/\/linux.die.net\/man\/1\/dnsbltool"}},{"Process":{"Description":"Hostname is the program that is used to either set or display the current host, domain or node name of the system. These names are used by many of the networking programs to identify the machine. The domain name is also used by NIS\/YP. Get Name When called without any arguments, the program displays the current names: hostname will print the name of the system as returned by the gethostname(2) function. domainname, nisdomainname, ypdomainname will print the name of the system as returned by the getdomainname(2) function. This is also known as the YP\/NIS domain name of the system. dnsdomainname will print the domain part of the FQDN (Fully Qualified Domain Name). The complete FQDN of the system is returned with hostname --fqdn. The function gethostname(2) is used to get the hostname. When the hostname -a, -d, -f or -i is called will gethostbyname(3) be called. The difference in gethostname(2) and gethostbyname(3) is that gethostbyname(3) is network aware, so it consults \/etc\/nsswitch.conf and \/etc\/host.conf to decide whether to read information in \/etc\/sysconfig\/network or \/etc\/hosts To add another dimension to this, the hostname is also set when the network interface is brought up. Set Name When called with one argument or with the --file option, the commands set the host name, the NIS\/YP domain name or the node name. Note, that only the super-user can change the names. It is not possible to set the FQDN or the DNS domain name with the dnsdomainname command (see THE FQDN below). The host name is usually set once at system startup in \/etc\/rc.d\/rc.inet1 or \/etc\/init.d\/boot (normally by reading the contents of a file which contains the host name, e.g. \/etc\/hostname). the Fqdn You can't change the FQDN (as returned by hostname --fqdn) or the DNS domain name (as returned by dnsdomainname) with this command. The FQDN of the system is the name that the resolver(3) returns for the host name. Technically: The FQDN is the name gethostbyname(2) returns for the host name returned by gethostname(2). The DNS domain name is the part after the first dot. Therefore it depends on the configuration (usually in \/etc\/host.conf) how you can change it. Usually (if the hosts file is parsed before DNS or NIS) you can change it in \/etc\/hosts. If a machine has multiple network interfaces\/addresses or is used in a mobile environment, then it may either have multiple FQDNs\/domain names or none at all. Therefore avoid using hostname --fqdn, hostname --domain and dnsdomainname. hostname --ip-address is subject to the same limitations so it should be avoided as well.","Process Name":"dnsdomainname","Link":"https:\/\/linux.die.net\/man\/1\/dnsdomainname"}},{"Process":{"Description":"dnsfilter does the opposite of dnsip. It inverse queries the DNS to convert a given IP address to the corresponding host name. When a query returns the host name, dnsfilter prints the result as <ip-address>=<host-name> and in case of any error it goes like <ip-address>:<error-message>","Process Name":"dnsfilter","Link":"https:\/\/linux.die.net\/man\/1\/dnsfilter"}},{"Process":{"Description":"dnsget is a simple command-line to perform DNS lookups, similar to host(1) and dig(1). It is useable for both interactive\/debugging scenarious and in scripts. The program is implemented using udns(3) library. By default, dnsget produces a human-readable output, similar to alias.example.com. CNAME www.example.com.\nwww.example.com. A 192.168.1.1\nwww.example.com. MX 10 mx.example.com. which is just sufficient to see how a given name resolves. Output format is controllable with -v and -q options -- the former increases verbosity level up to printing the whole DNS contents of all packets sent and received, which is suitable for debugging DNS problems, while the latter reduces the level, making output more quiet, up to bare result with no error messages, which is good for scripts.","Process Name":"dnsget","Link":"https:\/\/linux.die.net\/man\/1\/dnsget"}},{"Process":{"Description":"dnsip serves the sole task of resolving a given domain-name to it's IPv4 address. dnsip supports following options:","Process Name":"dnsip","Link":"https:\/\/linux.die.net\/man\/1\/dnsip"}},{"Process":{"Description":"dnsipq accepts a list of fully qualified domain names, resolves each of them and prints a record of the form: <domain-name> <ip-address> for each domain name.","Process Name":"dnsipq","Link":"https:\/\/linux.die.net\/man\/1\/dnsipq"}},{"Process":{"Description":"dnsname is a handy tool to resolve name of the DNS server. You can pass IP address of a DNS server and dnsname would resolve it for you.","Process Name":"dnsname","Link":"https:\/\/linux.die.net\/man\/1\/dnsname"}},{"Process":{"Description":"dnsperf is a DNS server performance testing tool. It is primarily intended for measuring the performance of authoritative DNS servers, but it can also be used for measuring caching server performance in a closed laboratory environment. For testing caching servers resolving against the live Internet, the resperf program is preferred. It is recommended that dnsperf and the name server under test be run on separate machines, so that the CPU usage of dnsperf itself does not slow down the name server. The two machines should be connected with a fast network, preferably a dedicated Gigabit Ethernet segment. Testing through a router or firewall is not advisable. Configuring the name server If using dnsperf to test an authoritative server, the name server under test should be set up to serve one or more zones similar in size and number to what the server is expected to serve in production. Also, be sure to turn off recursion in the server's configuration (in BIND 8\/9, specify \"recursion no;\" in the options block). In BIND 8, you should also specify \"fetch-glue no;\"; otherwise the server may attempt to retrieve glue information from the Internet during the test, slowing it down by an unpredictable factor. Constructing a query input file A dnsperf input file should contain a large and realistic set of queries, on the order of ten thousand to a million. The input file contains one line per query, consisting of a domain name and an RR type name separated by a space. The class of the query is implicitly IN. When measuring the performance serving non-terminal zones such as the root zone or TLDs, note that such servers spend most of their time providing referral responses, not authoritative answers. Therefore, a realistic input file might consist mostly of queries for type A for names *below*, not at, the delegations present in the zone. For example, when testing the performance of a server configured to be authoritative for the top-level domain \"fi.\", which contains delegations for domains like \"helsinki.fi\" and \"turku.fi\", the input file could contain lines like www.turku.fi A\nwww.helsinki.fi A where the \"www\" prefix ensures that the server will respond with a referral. Ideally, a realistic proportion of queries for nonexistent domains should be mixed in with those for existing ones, and the lines of the input file should be in a random order. Constructing a dynamic update input file To test dynamic update performance, dnsperf is run with the -u option, and the input file is constructed of blocks of lines describing dynamic update messages. The first line in a block contains the zone name: example.com Subsequent lines contain prerequisites, if there are any. Prerequisites can specify that a name may or may not exist, an rrset may or may not exist, or an rrset exists and its rdata matches all specified rdata for that name and type. The keywords \"require\" and \"prohibit\" are followed by the appropriate information. All relative names are considered to be relative to the zone name. The following lines show the 5 types of prerequisites. require a\nrequire a A\nrequire a A 1.2.3.4\nprohibit x\nprohibit x A Subsequent lines contain records to be added, records to be deleted, rrsets to be deleted, or names to be deleted. The keywords \"add\" or \"delete\" are followed by the appropriate information. All relative names are considered to be relative to the zone name. The following lines show the 4 types of updates. add x 3600 A 10.1.2.3\ndelete y A 10.1.2.3\ndelete z A\ndelete w Each update message is terminated by a line containing the command: send Running the tests When running dnsperf, a data file (the -d option) and server (the -s option) will normally be specified. The output of dnsperf is mostly self-explanatory. Pay attention to the number of dropped packets reported - when running the test over a local Ethernet connection, it should be zero. If one or more packets has been dropped, there may be a problem with the network connection. In that case, the results should be considered suspect and the test repeated.","Process Name":"dnsperf","Link":"https:\/\/linux.die.net\/man\/1\/dnsperf"}},{"Process":{"Description":"The dnspktflow application takes a tcpdump network traffic dump file, passes it through the tshark application and then displays the resulting DNS packet flows in a \"flow-diagram\" image. dnspktflow can output a single image or a series of images which can then be shown in sequence as an animation. dnspktflow was written as a debugging utility to help trace DNS queries and responses, especially as they apply to DNSSEC-enabled lookups.","Process Name":"dnspktflow","Link":"https:\/\/linux.die.net\/man\/1\/dnspktflow"}},{"Process":{"Description":"dnsq lets you query a DNS server for specific type of records about a given domain name. dnsq supports the following options:","Process Name":"dnsq","Link":"https:\/\/linux.die.net\/man\/1\/dnsq"}},{"Process":{"Description":"dnsqr lets you query for specific type of records about a given domain name. dnsqr supports the following options:","Process Name":"dnsqr","Link":"https:\/\/linux.die.net\/man\/1\/dnsqr"}},{"Process":{"Description":"A simply system-tray application that monitors log files (eg libval, or bind\/named logfiles) for DNSSEC error messages that should be displayed to the user. Further information on this tool can be found on the DNSSEC-Tools wiki page, of which this application is a component: http:\/\/www.dnssec-tools.org\/wiki\/index.php\/DNSSEC-System-Tray","Process Name":"dnssec-system-tray","Link":"https:\/\/linux.die.net\/man\/1\/dnssec-system-tray"}},{"Process":{"Description":"The DNSSEC-Tools package contains a wide variety of tools that are helpful to zone operators, resolver operators, network operators, application developers and end-users of DNSSEC. The best place to learn about the tools that are part of the package is at the following website, which categorizes the tools according to the intended audience: http:\/\/www.dnssec-tools.org\/wiki\/index.php\/DNSSEC-Tools_Components Additionally, make sure to check out the tutorials available at: http:\/\/www.dnssec-tools.org\/wiki\/index.php\/Tutorials","Process Name":"dnssec-tools","Link":"https:\/\/linux.die.net\/man\/1\/dnssec-tools"}},{"Process":{"Description":"","Process Name":"dnssort","Link":"https:\/\/linux.die.net\/man\/1\/dnssort"}},{"Process":{"Description":"dnstrace is a useful debugging tool to search for all DNS servers that can affect the resolution of records of given <TYPE> under the give <DOMAIN-NAME> starting from the root name server <ROOT-IP>. dnstrace uses the standard DNS resolution algorithm but follows all possible paths in the algorithm. It prints all responses it receives from the DNS servers. It also prints warnings about slow servers, dead servers, misdelegated servers and misformatted packets. $ dnstrace A google.com 127.0.0.1 | dnstrcesort One can use the dnstracesort in conjunction with the dnstrace. It produces more human friendly sorted output.","Process Name":"dnstrace","Link":"https:\/\/linux.die.net\/man\/1\/dnstrace"}},{"Process":{"Description":"dnstxt accepts a list of fully qualified domain names, queries and displays TXT records for each of them. Each record is displayed on a separate line. A TXT record is used to store any human readable text. Lately it has been known to store binary data such as Sender Policy Framework(SPF) details or opportunistic encryption details etc.","Process Name":"dnstxt","Link":"https:\/\/linux.die.net\/man\/1\/dnstxt"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"docbook2dvi","Link":"https:\/\/linux.die.net\/man\/1\/docbook2dvi"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"docbook2html","Link":"https:\/\/linux.die.net\/man\/1\/docbook2html"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"docbook2man","Link":"https:\/\/linux.die.net\/man\/1\/docbook2man"}},{"Process":{"Description":"docbook2man is a sgmlspl spec file that produced man pages (using the -man macros) from DocBook RefEntry markup. The program reads ESIS produced by nsgmls (or other SGML parsers) from standard input. Markup not found in RefEntry is discarded. Its output, the converted man pages, are written to the current directory. If RefMeta information is not specified in a RefEntry, then the man page will be written to standard output. The file manpage.links will also be created, which contains any aliases of the manpages generated. This file is in the format: <man page> <alias\nmanpage> The manpage.refs file keeps track of XRef references. Note that if the input document has any forward references, then docbook2man may have to be invoked twice (the first time updating manpage.refs) to resolve them.","Process Name":"docbook2man-spec.pl","Link":"https:\/\/linux.die.net\/man\/1\/docbook2man-spec.pl"}},{"Process":{"Description":"Docbook2odf is a toolkit that automaticaly converts DocBook to OASIS OpenDocument. Conversion is based on a XSLT which makes it easy to convert DocBook->ODF, ODT, ODS and ODP as all these documents are XML based. The result is provided in a one zipped ODF file .odt\/.odp\/.ods) with all required content. There are group of utilities like docbook2odt, docbook2ods and docbook2odp as docbook2odf is actually universally converting to these respective formats.","Process Name":"docbook2odf","Link":"https:\/\/linux.die.net\/man\/1\/docbook2odf"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"docbook2pdf","Link":"https:\/\/linux.die.net\/man\/1\/docbook2pdf"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"docbook2ps","Link":"https:\/\/linux.die.net\/man\/1\/docbook2ps"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"docbook2rtf","Link":"https:\/\/linux.die.net\/man\/1\/docbook2rtf"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"docbook2tex","Link":"https:\/\/linux.die.net\/man\/1\/docbook2tex"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"docbook2texi","Link":"https:\/\/linux.die.net\/man\/1\/docbook2texi"}},{"Process":{"Description":"docbook2texi is a sgmlspl spec file that produces GNU Texinfo documents from DocBook documents. The program reads ESIS produced by nsgmls (or other SGML parsers) from standard input. Currently the document element must be Book, otherwise the results are undefined. Its output, the converted Texinfo document, is written to standard output. The file basename.refs will also be created, which contains all the nodes in the document and their immediate 'child' nodes. As node processing always require forward references, docbook2texi must be run twice for each document: the first time to build the references, and the second to actually generate a valid document.","Process Name":"docbook2texi-spec.pl","Link":"https:\/\/linux.die.net\/man\/1\/docbook2texi-spec.pl"}},{"Process":{"Description":"The jw shell script allows to convert a DocBook file (or some other SGML-based format) to other formats (including HTML, RTF, PS and PDF) with an easy-to-understand syntax. It hides most of Jade's or OpenJade complexity and adds comfortable features. Other scripts like docbook2html, docbook2rtf or docbook2ps provide different ways of calling jw that might be easier to remember. For the moment, jw does not handle XML, but only SGML. This utility assumes that several other components are installed. The list includes: the ISO character entities for SGML James Clark's DSSSL engine, jade, or an equivalent parser like OpenJade the DocBook DTD from the OASIS consortium Norman Walsh's DocBook modular style sheets (or some other set of DSSSL style sheets) Sebastian Rahtz's jadetex set of TeX macros for jade (for backends intended to \"printing\" formats like PDF, RTF or PostScript) A perl interpreter (for backends that use perl) SGMLSpm from CPAN (for backends that use sgmls) Lynx HTML browser (for the txt backend) The jw script is basically called like this: jw mydoc.sgml where mydoc.sgml is a SGML file. The command line above uses default options: it converts from DocBook (the default frontend) to HTML (the default backend), does not put the result in a subdirectory (unless specified otherwise in the style sheets), etc. In this example, the \"mydoc\" file name as well as the \".sgml\" extension can be replaced by anything else. Current extensions for SGML DocBook files include \".sgml\", \".sgm\", \".docbook\", and \".db\". The processed file mydoc.sgml can be in any other directory than the current one. Here we have chosen to generate HTML output. In fact we can use any of the backends stored in the backends\/ subdirectory of the DocBook-utils distribution directory (usually \/usr\/share\/sgml\/docbook\/utils-0.6.14). Similarly, you can use any frontend defined in the frontends\/ subdirectory to convert from another input format. This sample command creates one or many HTML files with arbitrary file names in the current directory. This default behavior can be changed through command line options and\/or customization style sheets.","Process Name":"docbook2txt","Link":"https:\/\/linux.die.net\/man\/1\/docbook2txt"}},{"Process":{"Description":"doexec simply runs the executable with the argv list provided. It allows you to specify an argv[0] other than the name of the executable.","Process Name":"doexec","Link":"https:\/\/linux.die.net\/man\/1\/doexec"}},{"Process":{"Description":"Hostname is the program that is used to either set or display the current host, domain or node name of the system. These names are used by many of the networking programs to identify the machine. The domain name is also used by NIS\/YP. Get Name When called without any arguments, the program displays the current names: hostname will print the name of the system as returned by the gethostname(2) function. domainname, nisdomainname, ypdomainname will print the name of the system as returned by the getdomainname(2) function. This is also known as the YP\/NIS domain name of the system. dnsdomainname will print the domain part of the FQDN (Fully Qualified Domain Name). The complete FQDN of the system is returned with hostname --fqdn. The function gethostname(2) is used to get the hostname. When the hostname -a, -d, -f or -i is called will gethostbyname(3) be called. The difference in gethostname(2) and gethostbyname(3) is that gethostbyname(3) is network aware, so it consults \/etc\/nsswitch.conf and \/etc\/host.conf to decide whether to read information in \/etc\/sysconfig\/network or \/etc\/hosts To add another dimension to this, the hostname is also set when the network interface is brought up. Set Name When called with one argument or with the --file option, the commands set the host name, the NIS\/YP domain name or the node name. Note, that only the super-user can change the names. It is not possible to set the FQDN or the DNS domain name with the dnsdomainname command (see THE FQDN below). The host name is usually set once at system startup in \/etc\/rc.d\/rc.inet1 or \/etc\/init.d\/boot (normally by reading the contents of a file which contains the host name, e.g. \/etc\/hostname). the Fqdn You can't change the FQDN (as returned by hostname --fqdn) or the DNS domain name (as returned by dnsdomainname) with this command. The FQDN of the system is the name that the resolver(3) returns for the host name. Technically: The FQDN is the name gethostbyname(2) returns for the host name returned by gethostname(2). The DNS domain name is the part after the first dot. Therefore it depends on the configuration (usually in \/etc\/host.conf) how you can change it. Usually (if the hosts file is parsed before DNS or NIS) you can change it in \/etc\/hosts. If a machine has multiple network interfaces\/addresses or is used in a mobile environment, then it may either have multiple FQDNs\/domain names or none at all. Therefore avoid using hostname --fqdn, hostname --domain and dnsdomainname. hostname --ip-address is subject to the same limitations so it should be avoided as well.","Process Name":"domainname","Link":"https:\/\/linux.die.net\/man\/1\/domainname"}},{"Process":{"Description":"donuts is a DNS lint application that examines DNS zone files looking for particular problems. This is especially important for zones making use of DNSSEC security records, since many subtle problems can occur. The default mode of operation assumes you want to check for DNSSEC-related issues; to turn off the invocation of the DNSSEC-related rules run donuts with \"-i DNSSEC \". If the Text::Wrap Perl module is installed, donuts will give better output formatting.","Process Name":"donuts","Link":"https:\/\/linux.die.net\/man\/1\/donuts"}},{"Process":{"Description":"donutsd runs donuts on a set of zone files every so often (the frequency is specified by the -z flag which defaults to 24 hours) and watches for changes in the results. These changes may be due to the time-sensitive nature of DNSSEC-related records (e.g., RRSIG validity periods) or because parent\/child relationships have changed. If any changes have occurred in the output since the last run of donuts on a particular zone file, the results are emailed to the specified zone administrator's email address.","Process Name":"donutsd","Link":"https:\/\/linux.die.net\/man\/1\/donutsd"}},{"Process":{"Description":"doodle is a tool to index files. doodle uses libextractor to find meta-data in files. Once a database has been built, doodle can be used to quickly find files of which the meta-data matches a given search-string. This way, doodle can be used to quickly search your file system. Generally, the first time you run doodle you pass the option -b to build the database. Together with -b you specify the list of files or directories to index, for example $ doodle -b $HOME Indexing with doodle is incremental. If doodle -b is run (with the same database) twice it will update the index for files that were changed. doodle will also remove files that are no longer accessible. doodle will NOT remove files that are still present but no longer specified in the argument list. Thus invoking either $ doodle -b \/foo \/bar # or $ doodle -b \/foo ; doodle - b \/bar will result in the same database containing both the index for \/foo and \/bar. Note that the only way to only un-index \/foo at this point is to make \/foo inaccessible (using for example chmod 000 \/foo or even rm -rf \/foo) and then run doodle -b again. In networked environments, it often makes sense to build a database at the root of each file system, containing the entries for that file system. For this, doodle is run for each file system on the file server where that file system is on a local disk, to prevent thrashing the network. Users can select which databases doodle searches. Databases cannot be concatenated together. Once the files have been indexed, you can quickly query the doodle database. Just run $ doodle keyword to search all of your files for keyword. Note that only the meta-data extracted by libextractor is searched. Thus if libextractor does not find any meta-data in the files, you may not get any results. You can use the option -l to specify non-standard libextractor plugins. For example, doodle could be used to replace the locate tool from the GNU findutils like this: $ alias updatedb=\"doodle -bn -d ~\/.doodle-locate-db -l libextractor_filename \/\" $ alias locate=\"doodle -d ~\/.doodle-locate-db\"","Process Name":"doodle","Link":"https:\/\/linux.die.net\/man\/1\/doodle"}},{"Process":{"Description":"doodled monitors your filesystem for changes and updates the doodle database to keep it always up-to-date with the latest data. doodled is experimental at this point. It uses libfam and is thus limited to monitoring less than 1024 directories for changes.","Process Name":"doodled","Link":"https:\/\/linux.die.net\/man\/1\/doodled"}},{"Process":{"Description":"Most MPI users will probably not need to use the doom command; see lamclean(1). This command is only installed if LAM\/MPI was configured with the --with-trillium switch. The doom command delivers a signal to one or more processes on one or more nodes. The signal is specified with the -<signo> option. Possible signals are: terminate suspend execution continue execution user defined user defined If a signal is not specified as an option, 4 (terminate) is delivered. If no processes are specified, all application processes on that node will receive the signal. Processes can be specified in several ways, a mixture of which may be used on the command line. They are: i<index_list> by the index printed by state(1) p<pid_list> by process identifier","Process Name":"doom","Link":"https:\/\/linux.die.net\/man\/1\/doom"}},{"Process":{"Description":"This manual page documents dos2unix, the program that converts plain text files in DOS\/MAC format to UNIX format.","Process Name":"dos2unix","Link":"https:\/\/linux.die.net\/man\/1\/dos2unix"}},{"Process":{"Description":"This manual page briefly documents dosbox, an x86\/DOS emulator. The optional file argument should be a DOS executable or a directory. If it is a dos executable (.com .exe .bat) the program will run automatically. If it is a directory, a DOS session will run with the directory mounted as C:\\. For an introduction type INTRO inside dosbox.","Process Name":"dosbox","Link":"https:\/\/linux.die.net\/man\/1\/dosbox"}},{"Process":{"Description":"dot draws directed graphs. It works well on DAGs and other graphs that can be drawn as hierarchies. It reads attributed graph files and writes drawings. By default, the output format dot is the input file with layout coordinates appended. neato draws undirected graphs using ''spring'' models (see Kamada and Kawai, Information Processing Letters 31:1, April 1989). Input files must be formatted in the dot attributed graph language. By default, the output of neato is the input graph with layout coordinates appended. twopi draws graphs using a radial layout (see G. Wills, Symposium on Graph Drawing GD'97, September, 1997). Basically, one node is chosen as the center and put at the origin. The remaining nodes are placed on a sequence of concentric circles centered about the origin, each a fixed radial distance from the previous circle. All nodes distance 1 from the center are placed on the first circle; all nodes distance 1 from a node on the first circle are placed on the second circle; and so forth. circo draws graphs using a circular layout (see Six and Tollis, GD '99 and ALENEX '99, and Kaufmann and Wiese, GD '02.) The tool identifies biconnected components and draws the nodes of the component on a circle. The block-cutpoint tree is then laid out using a recursive radial algorithm. Edge crossings within a circle are minimized by placing as many edges on the circle's perimeter as possible. In particular, if the component is outerplanar, the component will have a planar layout. If a node belongs to multiple non-trivial biconnected components, the layout puts the node in one of them. By default, this is the first non-trivial component found in the search from the root component. fdp draws undirected graphs using a ''spring'' model. It relies on a force-directed approach in the spirit of Fruchterman and Reingold (cf. Software-Practice & Experience 21(11), 1991, pp. 1129-1164). sfdp also draws undirected graphs using the ''spring'' model described above, but it uses a multi-scale approach to produce layouts of large graphs in a reasonably short time.","Process Name":"dot","Link":"https:\/\/linux.die.net\/man\/1\/dot"}},{"Process":{"Description":"gxl2dot converts between graphs represented in GXL and in the DOT language. Unless a conversion type is specified using a flag, gxl2dot will deduce the type of conversion from the suffix of the input file, a \".dot\" suffix causing a conversion from DOT to GXL, and a \".gxl\" suffix causing a conversion from GXL to DOT. If no suffix is available, e.g. when the input is from a pipe, and no flags are used then gxl2dot assumes the type of the input file from its executable name so that gxl2dot converts from GXL to DOT, and dot2gxl converts from DOT to GXL. GXL supports a much richer graph model than DOT. gxl2dot will attempt to map GXL constructs into the analogous DOT construct when this is possible. If not, the GXL information is stored as an attribute. The intention is that applying gxl2dot|dot2gxl is semantically equivalent to the identity operator.","Process Name":"dot2gxl","Link":"https:\/\/linux.die.net\/man\/1\/dot2gxl"}},{"Process":{"Description":"Dotlockfile is a command line utility to safely create, test and remove lockfiles. Lockfiles are created in an NFS-safe way. Dotlockfile can can also be used to lock and unlock mailboxes even if the mailspool directory is only writable by group mail. The name dotlockfile comes from the way mailboxes are locked for updates on a lot of UNIX systems. A lockfile is created with the same filename as the mailbox but with the string \".lock\" appended. The names dotlock and lockfile were already taken - hence the name dotlockfile :).","Process Name":"dotlockfile","Link":"https:\/\/linux.die.net\/man\/1\/dotlockfile"}},{"Process":{"Description":"dotty is a graph editor for the X Window System. It may be run as a standalone editor, or as a front end for applications that use graphs. It can control multiple windows viewing different graphs. dotty is written on top of dot and lefty. lefty is a general-purpose programmable editor for technical pictures. It has an interpretive programming language similar to AWK and C. The user interface and graph editing operations of dotty are written as lefty functions. Programmer-defined graph operations may be loaded as well. Graph layouts are made by dot, which runs as a separate process that communicates with lefty through pipes.","Process Name":"dotty","Link":"https:\/\/linux.die.net\/man\/1\/dotty"}},{"Process":{"Description":"doveadm is the Dovecot administration tool. It can be used to manage various parts of Dovecot, as well as access users' mailboxes. Execute doveadm help, for a command usage listing.","Process Name":"doveadm","Link":"https:\/\/linux.die.net\/man\/1\/doveadm"}},{"Process":{"Description":"This command can be used with sdbox or mdbox storage to move mails to alternative storage path when :ALT=<path> is specified for the mail location. In the first form, doveadm(1) will executed the altmove action with the environment of the logged in system user. In the second form, the command will be performed for all users. In the third form, only matching mails of the given user(s) will be moved to the alternative storage.","Process Name":"doveadm-altmove","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-altmove"}},{"Process":{"Description":"The auth command can be used to test the authentication for the given user.","Process Name":"doveadm-auth","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-auth"}},{"Process":{"Description":"doveconf reads and parses Dovecot's configuration files and converts them into a simpler format used by the rest of Dovecot. All standalone programs, such as dovecot(1) and dovecot-lda(1), will first get their settings by executing doveconf. For system administrators, doveconf is mainly useful for dumping the configuration in easy human readable output.","Process Name":"doveadm-config","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-config"}},{"Process":{"Description":"doveadm director can be used to manage and query the status of the list of backend mail servers where Dovecot proxy can redirect connections to.","Process Name":"doveadm-director","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-director"}},{"Process":{"Description":"Dovecot uses several binary index and log files in order to improve performance for accessing mails. For some mailbox formats, such as sdbox and mdbox, the index files are part of the format itself. For details about index files, see also: http:\/\/wiki2.dovecot.org\/IndexFiles doveadm dump is used to show the contents of those mailbox index\/log files, in human readable format. This is mainly useful for Dovecot developers when debugging some problem.","Process Name":"doveadm-dump","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-dump"}},{"Process":{"Description":"This command can be used to expunge mails matching the given search query. It is typically used to expunge old mails from users' Trash and\/or Spam mailboxes. To test which messages a given search query would match, you can use doveadm fetch or doveadm search commands. In the first form, doveadm(1) will executed the expunge action with the environment of the logged in system user. In the second form, the command will be performed for all users. In the third form, only matching mails of the given user(s) will be expunged.","Process Name":"doveadm-expunge","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-expunge"}},{"Process":{"Description":"doveadm fetch can be used to fetch messages' contents and metadata. This can be useful for scripts and for debugging. If you want to fetch messages one at a time, see doveadm-search(1). Important: Please respect your users' privacy.","Process Name":"doveadm-fetch","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-fetch"}},{"Process":{"Description":"Under certain circumstances it may happen, that dovecot(1) is unable to automatically solve problems with mailboxes. In such situations the force-resync command may be helpful. It tries to fix all problems. For sdbox and mdbox mailboxes the storage files will be also checked.","Process Name":"doveadm-force-resync","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-force-resync"}},{"Process":{"Description":"With no command argument given, doveadm help will print: * the synopsis for the most of the doveadm(1) commands. * groups of commands, e.g. log or mailbox. When the name of a command (or a group) was given, it will show the man page for that command.","Process Name":"doveadm-help","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-help"}},{"Process":{"Description":"This command can be used to import mails from another mail storage specified by source_location to one or more user's mailboxes. All the mailboxes are imported under the given dest_parent mailbox, or to root level if dest_parent is empty (\"\"). The search_query can be used to restrict which mailboxes or messages are imported. In the first form, doveadm(1) will executed the import action with the environment of the logged in system user. In the second form, the mails will be imported for all users. In the third form, the mails will be imported only for given user(s).","Process Name":"doveadm-import","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-import"}},{"Process":{"Description":"doveadm's kick command is used to disconnect users by user name and\/or the ip address, from which they are connected. In the first form, all users, whose login name matches the user argument, will be disconnected. In the second form, all users, connected from the given IP address or network range, will be disconnected. In the last form, only users connected from the given IP address or networks range and a matching login name will be disconnected.","Process Name":"doveadm-kick","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-kick"}},{"Process":{"Description":"The doveadm log commands are used to locate and reopen the log files of dovecot(1). It's also possible to test the configured targets of the *log_path settings.","Process Name":"doveadm-log","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-log"}},{"Process":{"Description":"doveadm mailbox can be used to query and modify mailboxes.","Process Name":"doveadm-mailbox","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-mailbox"}},{"Process":{"Description":"The doveadm penalty command can be used to see the current penalties. (Extend me!\/explain it)","Process Name":"doveadm-penalty","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-penalty"}},{"Process":{"Description":"The doveadm purge command is used to remove all messages with refcount=0 from a user's mail storage. The refcount of a message is decreased to 0 when the user (or some administration utility) has expunged all instances of a message from all mailboxes. In the first form, doveadm(1) will perform the purge action for the currently logged in user. In the second form, the command will be executed for all users In the last form, only messages of the given user(s) will be purged.","Process Name":"doveadm-purge","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-purge"}},{"Process":{"Description":"doveadm pw is used to generate password hashes for different password schemes and optionally verify the generated hash. All generated password hashes have a {scheme} prefix, for example {SHA512-CRYPT.HEX}. All passdbs have a default scheme for passwords stored without the {scheme} prefix. The default scheme can be overridden by storing the password with the scheme prefix.","Process Name":"doveadm-pw","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-pw"}},{"Process":{"Description":"In the first form, doveadm(1) will execute the command for the currently logged in user. In the second form, the command will be performed for all users. In the third form, the command will affect only the matching user(s). Note: The quota get and quota recalc commands are only available when the global mail_plugins setting contains the quota plugin.","Process Name":"doveadm-quota","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-quota"}},{"Process":{"Description":"doveadm is the Dovecot administration tool. It can be used to manage various parts of Dovecot, as well as access users' mailboxes. Execute doveadm help, for a command usage listing.","Process Name":"doveadm-reload","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-reload"}},{"Process":{"Description":"The search command is used to find matching messages. doveadm(1) will print the mailbox's guid and the message's uid for each match. When used with the -A or -u wildcard options, doveadm(1) will print the fields username, mailbox-guid and uid for each matching message. In the first form, doveadm(1) will executed the search action with the environment of the logged in system user. In the second form, the command will be performed for all users. In the third form, only matching mails of the given user(s) will be searched.","Process Name":"doveadm-search","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-search"}},{"Process":{"Description":"doveadm is the Dovecot administration tool. It can be used to manage various parts of Dovecot, as well as access users' mailboxes. Execute doveadm help, for a command usage listing.","Process Name":"doveadm-stop","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-stop"}},{"Process":{"Description":"The user command is used to perform a user lookup - to show what information Dovecot sees about the user(s), or if it exists at all in the configured userdb(s). The auth_info may be useful when the userdb is for example a SQL database and you are using %variables, like %s or %l, in the user_query setting. Or when you have configured the userdb in a way like this: userdb {\n  driver = passwd-file\n  args = \/etc\/%s.passwd\n}","Process Name":"doveadm-user","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-user"}},{"Process":{"Description":"The who command is used to show which users from which hosts are currently connected to which service.","Process Name":"doveadm-who","Link":"https:\/\/linux.die.net\/man\/1\/doveadm-who"}},{"Process":{"Description":"doveconf reads and parses Dovecot's configuration files and converts them into a simpler format used by the rest of Dovecot. All standalone programs, such as dovecot(1) and dovecot-lda(1), will first get their settings by executing doveconf. For system administrators, doveconf is mainly useful for dumping the configuration in easy human readable output.","Process Name":"doveconf","Link":"https:\/\/linux.die.net\/man\/1\/doveconf"}},{"Process":{"Description":"Dovecot is an open source IMAP and POP3 server for Linux\/UNIX-like systems, written with security primarily in mind. Dovecot is an excellent choice for both small and large installations. It's fast, simple to set up, requires no special administration and it uses very little memory.","Process Name":"dovecot","Link":"https:\/\/linux.die.net\/man\/1\/dovecot"}},{"Process":{"Description":"The dovecot-lda is a local mail delivery agent which takes mail from an MTA and delivers it to a user's mailbox, while keeping Dovecot index files up to date. Main features of the dovecot-lda are: * Mailbox indexing during mail delivery, providing faster mailbox access later * Quota enforcing by the quota plugin * Sieve language support by the Pigeonhole sieve plugin","Process Name":"dovecot-lda","Link":"https:\/\/linux.die.net\/man\/1\/dovecot-lda"}},{"Process":{"Description":"This script downloads the definitions of XML entities from http:\/\/www.w3.org\/2003\/entities\/iso9573-2003\/ or from whatever address you give it as an argument. The argument should be an URL (that LWP::UserAgent::get can access) pointing to a document with (absolute or relative) references to files ending with the \".ent\" suffix. These files are expected to be DTD 's with lines like <!ENTITY amp \"&#38;\" > The script parses these files and prints the perl module to the standard output. If you wish, you can give \"file\" as another argument to the script and it will then print it to \"file\". You can also specify the output file in the environment variable \"OUTPUT_FILE\". The index and the output file are distinguished by the presence of \":\/\/\" substring. If you want to use a locally stored index file (the one with the .ent references), you can access it by saying perl download.pl file:\/\/\/path\/to\/index.html Note that the script currently distinguishes between relative and absolute paths by looking at whether the href contains a \":\/\/\" substring. This can lead to crashes when the links look like href=\"\/path\/file.ent\". Also, the script assumes the links have exactly the format href=\"...\" - with double quotes. Interactive download In case you run into problems downloading the documents, you can try to run the script with the \"-i\" or \"--interactive\" option. This will let you skip downloads or enter alternative URLs for individual documents. The interactive mode is also triggered when the \"INTERACTIVE\" environment variable is set to a true value (in Perl sense). Options Beside the \"--interactive\" option, this script also accepts the \"--timeout\" option. It specifies the timeout for LWP::UserAgent in seconds when downloading. The same is controlled by the \"DOWNLOAD_TIMEOUT\" environment variable. The defaule (180s) timeout is used when not specified. # 10 seconds timeout - croak on failure\nperl download-entities.pl --timeout 10 > XML\/Entities\/Data.pm\n# 5 seconds timeout - croak on failure\nDOWNLOAD_TIMEOUT=5 perl download-entities.pl > XML\/Entities\/Data.pm\n# 1 second timeout - ask on failure\nperl download-entities.pl --interactive --timeout 1 > XML\/Entities\/Data.pm Dependencies This script has dependencies that the \"XML::Entities\" module does not and are therefore not mentioned in the META .yml file. These are \"LWP::UserAgent\", \"File::Basename\" and \"Fatal\".","Process Name":"download-entities.pl","Link":"https:\/\/linux.die.net\/man\/1\/download-entities.pl"}},{"Process":{"Description":"Doxygen is a documentation system for C++, C, Java, Objective-C, IDL (Corba and Microsoft flavors) and to some extent PHP, C#, and D. You can use doxygen in a number of ways: 1) Use doxygen to generate a template configuration file: doxygen [-s] -g [configName] If - is used for configName doxygen will write to standard output. 2) Use doxygen to update an old configuration file: doxygen [-s] -u [configName] 3) Use doxygen to generate documentation using an existing configuration file: doxygen [configName] If - is used for configName doxygen will read from standard input. 4) Use doxygen to generate a template style sheet file for RTF, HTML or Latex. RTF: doxygen -w rtf styleSheetFile HTML: doxygen -w html headerFile footerFile styleSheetFile [configFile] LaTeX: doxygen -w latex headerFile styleSheetFile [configFile] 5) Use doxygen to generate an rtf extensions file RTF: doxygen -e rtf extensionsFile If -s is specified the comments in the config file will be omitted. If configName is omitted 'Doxyfile' will be used as a default.","Process Name":"doxygen","Link":"https:\/\/linux.die.net\/man\/1\/doxygen"}},{"Process":{"Description":"Generates a tag file and\/or a search index for a set of HTML files. Use doxysearch as a CGI program to search the tag file generated by doxytag.","Process Name":"doxytag","Link":"https:\/\/linux.die.net\/man\/1\/doxytag"}},{"Process":{"Description":"Doxywizard is an interactive frontend to the doxygen tool to configure and run doxygen on your source files.","Process Name":"doxywizard","Link":"https:\/\/linux.die.net\/man\/1\/doxywizard"}},{"Process":{"Description":"dpbindic outputs the file information of the binary-form dictionary file specified in binary-file . At this time, the word information of the dictionary can be output in text form to the standard output. To do so, use test-file to specify the text-form dictionary used as the source of binary-form dictionary file. If this specification is omitted, the text dictionary file information in the binary dictionary file will be output. The standard grammar file name is \/usr\/local\/canna\/lib\/dic\/hyoujun.gram. It will be used if the grammar file name specification is omitted. The output format of word information data is specified using an option.","Process Name":"dpbindic","Link":"https:\/\/linux.die.net\/man\/1\/dpbindic"}},{"Process":{"Description":"dpkg is a tool to install, build, remove and manage Debian packages. The primary and more user-friendly front-end for dpkg is aptitude(1). dpkg itself is controlled entirely via command line parameters, which consist of exactly one action and zero or more options. The action-parameter tells dpkg what to do and options control the behavior of the action in some way. dpkg can also be used as a front-end to dpkg-deb(1). The following are dpkg-deb actions, and if they are encountered, dpkg just runs dpkg-deb with the parameters given to it: -b, --build,\n-c, --contents,\n-I, --info,\n-f, --field,\n-e, --control,\n-x, --extract,\n-X, --vextract, and\n--fsys-tarfile. Please refer to dpkg-deb(1) for information about these actions.","Process Name":"dpkg","Link":"https:\/\/linux.die.net\/man\/1\/dpkg"}},{"Process":{"Description":"dpkg-architecture does provide a facility to determine and set the build and host architecture for package building. The build architecture is always determined by an external call to dpkg(1), and can not be set at the command line. You can specify the host architecture by providing one or both of the options -a and -t. The default is determined by an external call to gcc(1), or the same as the build architecture if CC or gcc are both not available. One out of -a and -t is sufficient, the value of the other will be set to a usable default. Indeed, it is often better to only specify one, because dpkg-architecture will warn you if your choice does not match the default.","Process Name":"dpkg-architecture","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-architecture"}},{"Process":{"Description":"dpkg-buildpackage is a program that automates the process of building a Debian package. It consists of the following steps: 1. It prepares the build environment by setting various environment variables (see ENVIRONMENT VARIABLES). 2. It checks that the build-dependencies and build-conflicts are satisfied (unless -d is specified). 3. If a specific target has been selected with the -T or --target option, it calls that target and stops here. Otherwise it calls fakeroot debian\/rules clean to clean the build-tree (unless -nc is specified). 4. It calls dpkg-source to generate the source package (unless a binary-only build has been requested with -b, -B or -A). 5. It calls debian\/rules build followed by fakeroot debian\/rules binary-target (unless a source-only build has been requested with -S). Note that binary-target is either binary (default case, or if -b is specified) or binary-arch (if -B is specified) or binary-indep (if -A is specified). 6. It calls gpg to sign the .dsc file (if any, unless -us is specified). 7. It calls dpkg-genchanges to generate a .changes file. Many dpkg-buildpackage options are forwarded to dpkg-genchanges. 8. It calls gpg to sign the .changes file (unless -uc is specified). 9. If -tc is specified, it will call fakeroot debian\/rules clean again.","Process Name":"dpkg-buildpackage","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-buildpackage"}},{"Process":{"Description":"This program checks the installed packages in the system against the build dependencies and build conflicts listed in the control file. If any are not met, it displays them and exits with a nonzero return code. By default, debian\/control is read, but an alternate control filename may be specified on the command line.","Process Name":"dpkg-checkbuilddeps","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-checkbuilddeps"}},{"Process":{"Description":"dpkg-deb packs, unpacks and provides information about Debian archives. Use dpkg to install and remove packages from your system. You can also invoke dpkg-deb by calling dpkg with whatever options you want to pass to dpkg-deb. dpkg will spot that you wanted dpkg-deb and run it for you.","Process Name":"dpkg-deb","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-deb"}},{"Process":{"Description":"dpkg-distaddfile adds an entry for a named file to debian\/files. It takes three non-option arguments, the filename and the section and priority for the .changes file. The filename should be specified relative to the directory where dpkg-genchanges will expect to find the files, usually .., rather than being a pathname relative to the current directory when dpkg-distaddfile is run.","Process Name":"dpkg-distaddfile","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-distaddfile"}},{"Process":{"Description":"dpkg-genchanges reads information from an unpacked and built Debian source tree and from the files it has generated and generates a Debian upload control file ( .changes file).","Process Name":"dpkg-genchanges","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-genchanges"}},{"Process":{"Description":"dpkg-gencontrol reads information from an unpacked Debian source tree and generates a binary package control file (which defaults to debian\/tmp\/DEBIAN\/control); during this process it will simplify the relation fields. Thus Pre-Depends, Depends, Recommends and Suggests are simplified in this order by removing dependencies which are known to be true according to the stronger dependencies already parsed. It will also remove any self-dependency (in fact it will remove any dependency which evaluates to true given the current version of the package as installed). Logically it keeps the intersection of multiple dependencies on the same package. The order of dependencies is preserved as best as possible: if any dependency must be discarded due to another dependency appearing further in the field, the superseding dependency will take the place of the discarded one. The other relation fields (Enhances, Conflicts, Breaks, Replaces and Provides) are also simplified individually by computing the union of the various dependencies when a package is listed multiple times in the field. dpkg-gencontrol also adds an entry for the binary package to debian\/files.","Process Name":"dpkg-gencontrol","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-gencontrol"}},{"Process":{"Description":"dpkg-gensymbols scans a temporary build tree (debian\/tmp by default) looking for libraries and generate a symbols file describing them. This file, if non-empty, is then installed in the DEBIAN subdirectory of the build tree so that it ends up included in the control information of the package. When generating those files, it uses as input some symbols files provided by the maintainer. It looks for the following files (and use the first that is found): debian\/package.symbols.arch debian\/symbols.arch debian\/package.symbols debian\/symbols The main interest of those files is to provide the minimal version associated to each symbol provided by the libraries. Usually it corresponds to the first version of that package that provided the symbol, but it can be manually incremented by the maintainer if the ABI of the symbol is extended without breaking backwards compatibility. It's the responsibility of the maintainer to keep those files up-to-date and accurate, but dpkg-gensymbols helps him. When the generated symbols files differ from the maintainer supplied one, dpkg-gensymbols will print a diff between the two versions. Furthermore if the difference are too significant, it will even fail (you can customize how much difference you can tolerate, see the -c option).","Process Name":"dpkg-gensymbols","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-gensymbols"}},{"Process":{"Description":"This manual page documents the dpkg-name program which provides an easy way to rename Debian packages into their full package names. A full package name consists of <package>_<version>_<architecture>.<package_type> as specified in the control file of the package. The <version> part of the filename consists of the upstream version information optionally followed by a hyphen and the revision information. The <package_type> part comes from that field if present or fallbacks to deb.","Process Name":"dpkg-name","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-name"}},{"Process":{"Description":"dpkg-parsechangelog reads and parses the changelog of an unpacked Debian source tree and outputs the information in it to standard output in a machine-readable form.","Process Name":"dpkg-parsechangelog","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-parsechangelog"}},{"Process":{"Description":"dpkg-query is a tool to show information about packages listed in the dpkg database.","Process Name":"dpkg-query","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-query"}},{"Process":{"Description":"dpkg-scanpackages sorts through a tree of Debian binary packages and creates a Packages file, used by apt(8), dselect(1), etc, to tell the user what packages are available for installation. These Packages files are the same as those found on Debian archive sites and CD-ROMs. You might use dpkg-scanpackages yourself if making a directory of local packages to install on a cluster of machines. Note: If you want to access the generated Packages file with apt you will probably need to compress the file with bzip2(1) (generating a Packages.bz2 file) or gzip(1) (generatinc a Packages.gz file). apt ignores uncompressed Packages files except on local access (i.e. file:\/\/ sources). binarydir is the name of the tree of the binary packages to process (for example, contrib\/binary-i386). It is best to make this relative to the root of the Debian archive, because every Filename field in the new Packages file will start with this string. overridefile is the name of a file to read which contains information about how the package fits into the distribution (it can be a compressed file); see deb-override(5). pathprefix is an optional string to be prepended to the Filename fields. If more than one version of a package is found only the newest one is included in the output. If they have the same version and only differ in architecture only the first one found is used.","Process Name":"dpkg-scanpackages","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-scanpackages"}},{"Process":{"Description":"dpkg-scansources scans the given binary-dir for .dsc files. These are used to create a Debian source index, which is output to stdout. The override-file, if given, is used to set priorities in the resulting index records and to override the maintainer field given in the .dsc files. The file can be compressed. See deb-override(5) for the format of this file. NB: Since the override file is indexed by binary, not source, packages, there's a bit of a problem here. The current implementation uses the highest priority of all the binary packages produced by a .dsc file for the priority of the source package, and the override entry for the first binary package listed in the .dsc file to modify maintainer information. This might change. The path-prefix, if given, is prepended to the directory field in the generated source index. You generally use this to make the directory fields contain the path from the top of the Debian archive hierarchy. Note: If you want to access the generated Sources file with apt(8) you will probably need to compress the file with gzip(1) (generating a Sources.gz file). apt ignores uncompressed Sources files except on local access (i.e. file:\/\/ sources).","Process Name":"dpkg-scansources","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-scansources"}},{"Process":{"Description":"dpkg-shlibdeps calculates shared library dependencies for executables named in its arguments. The dependencies are added to the substitution variables file debian\/substvars as variable names shlibs: dependencyfield where dependencyfield is a dependency field name. Any other variables starting shlibs: are removed from the file. dpkg-shlibdeps has two possible sources of information to generate dependency information. Either symbols files or shlibs files. For each binary that dpkg-shlibdeps analyzes, it finds out the list of libraries that it's linked with. Then, for each library, it looks up either the symbols file, or the shlibs file (if the former doesn't exist or if debian\/shlibs.local contains the relevant dependency). Both files are supposed to be provided by the library package and should thus be available as \/var\/lib\/dpkg\/info\/package.symbols or \/var\/lib\/dpkg\/info\/package.shlibs. The package name is identified in two steps: find the library file on the system (looking in the same directories that ld.so would use), then use dpkg -S library-file to lookup the package providing the library. Symbols files Symbols files contain finer-grained dependency information by providing the minimum dependency for each symbol that the library exports. The script tries to find a symbols file associated to a library package in the following places (first match is used): debian\/*\/DEBIAN\/symbols Shared library information generated by the current build process that also invoked dpkg-shlibdeps. They are generated by dpkg-gensymbols(1). They are only used if the library is found in a package's build tree. The symbols file in that build tree takes precedence over symbols files from other binary packages. \/etc\/dpkg\/symbols\/ package.symbols. arch \/etc\/dpkg\/symbols\/ package.symbols Per-system overriding shared library dependency information. arch is the architecture of the current system (obtained by dpkg-architecture -qDEB_HOST_ARCH). admindir\/info\/ package.symbols Package-provided shared library dependency information. Unless overridden, admindir is \/var\/lib\/dpkg. While scanning the symbols used by all binaries, dpkg-shlibdeps remembers the (biggest) minimal version needed for each library. At the end of the process, it is able to write out the minimal dependency for every library used (provided that the information of the symbols files are accurate). As a safe-guard measure, a symbols file can provide a Build-Depends-Package meta-information field and dpkg-shlibdeps will extract the minimal version required by the corresponding package in the Build-Depends field and use this version if it's higher than the minimal version computed by scanning symbols. Shlibs files Shlibs files associate directly a library to a dependency (without looking at the symbols). It's thus often stronger than really needed but very safe and easy to handle. The dependencies for a library are looked up in several places. The first file providing information for the library of interest is used: debian\/shlibs.local Package-local overriding shared library dependency information. \/etc\/dpkg\/shlibs.override Per-system overriding shared library dependency information. debian\/*\/DEBIAN\/shlibs Shared library information generated by the current build process that also invoked dpkg-shlibdeps. They are only used if the library is found in a package's build tree. The shlibs file in that build tree takes precedence over shlibs files from other binary packages. admindir\/info\/ package.shlibs Package-provided shared library dependency information. Unless overridden, admindir is \/var\/lib\/dpkg. \/etc\/dpkg\/shlibs.default Per-system default shared library dependency information. The extracted dependencies are then directly used (except if they are filtered out because they have been identified as duplicate, or as weaker than another dependency).","Process Name":"dpkg-shlibdeps","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-shlibdeps"}},{"Process":{"Description":"dpkg-source packs and unpacks Debian source archives. None of these commands allow multiple options to be combined into one, and they do not allow the value for an option to be specified in a separate argument.","Process Name":"dpkg-source","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-source"}},{"Process":{"Description":"dpkg-split splits Debian binary package files into smaller parts and reassembles them again, to support the storage of large package files on small media such as floppy disks. It can be operated manually using the --split, --join and --info options. It also has an automatic mode, invoked using the --auto option, where it maintains a queue of parts seen but not yet reassembled and reassembles a package file when it has seen all of its parts. The --listq and --discard options allow the management of the queue. All splitting, joining and queueing operations produce informative messages on standard output; these may safely be ignored.","Process Name":"dpkg-split","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-split"}},{"Process":{"Description":"dpkg-trigger is a tool to explicitely activate triggers and check for its support on the running dpkg. This can be used by maintainer scripts in complex and conditional situations where the file triggers, or the declarative activate triggers control file directive, are insufficiently rich. It can also be used for testing and by system administrators (but note that the triggers won't actually be run by dpkg-trigger). Unrecognised trigger name syntaxes are an error for dpkg-trigger.","Process Name":"dpkg-trigger","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-trigger"}},{"Process":{"Description":"dpkg-vendor is a tool to query information about vendors listed in \/etc\/dpkg\/origins. \/etc\/dpkg\/origins\/default contains information about the current vendor.","Process Name":"dpkg-vendor","Link":"https:\/\/linux.die.net\/man\/1\/dpkg-vendor"}},{"Process":{"Description":"dpm-addfs adds a filesystem to a disk pool. This command requires ADMIN privilege.","Process Name":"dpm-addfs","Link":"https:\/\/linux.die.net\/man\/1\/dpm-addfs"}},{"Process":{"Description":"dpm-addpool defines a new disk pool. This command requires ADMIN privilege.","Process Name":"dpm-addpool","Link":"https:\/\/linux.die.net\/man\/1\/dpm-addpool"}},{"Process":{"Description":"dpm-drain drains a component of the Light Weight Disk Pool Manager: a filesystem, a disk server or a pool, optionally filtered by a list of gids\/groups. It replicates files which belong to the given list of gids\/groups (if specified) to another filesystem and removes the original file. It gives an error message for files still pinned. The pool name, the disk server name or the filesystem name can be specified. Volatile files which have expired will not be copied and will be deleted during the draining process. If no specfic file server and file system is specified, or no limit is placed on the files to drain, then the involved active file system(s) will have their status changed to RDONLY. If any of the involved file systems are marked as DISABLED they will not have their status changed, however an attempt will still be made to replicate the files from them and, if successful, delete the original. Files which are to be moved and belong to a space will be moved to a different location (e.g. file system or disk server) but remain in the same space. If there is no alternate location within the same space an error will be reported for the file and it will not be drained. Replicas of files with a lifetime will also have lifetime at least as long as the original. If this is not possible (for example available pools have a maximum lifetime too short) then an error is given and the file will not be drained. This command requires ADMIN privilege. pool_name specifies the disk pool name previously defined using dpm-addpool. server specifies the host name of the disk server to be drained. fs specifies the mount point of the dedicated filesystem. gid specifies the comma separated list of gids to which the files must belong. group specifies the comma separated list of groups to which the files must belong. size specifies the minimum number of bytes to drain. The number may be post-fixed with 'k', 'M', 'G' or 'T' for kilobyte, Megabyte, Gigabyte and Terabyte respectively. Draining is halted once the desired target has been reached or passed. If size is not specified or is given as zero dpm-drain will drain all eligible files.","Process Name":"dpm-drain","Link":"https:\/\/linux.die.net\/man\/1\/dpm-drain"}},{"Process":{"Description":"dpm-getspacemd gets the space metadata for a given space token or a space token description. If none of the options is specified, the metadata for all the space tokens accessible by the user will be listed. For each token, it displays three lines. The first one gives the space token, the user description and the poolname associated with it. The second one gives the space usage restriction, either a DN or a list of VOMS FQANs. The third one gives the size of the space, the amount of free space, the remaining space lifetime, the retention policy and the access latency. s_token specifies the space token returned by a previous reservespace request. u_token specifies the user provided description associated with a previous reservespace request.","Process Name":"dpm-getspacemd","Link":"https:\/\/linux.die.net\/man\/1\/dpm-getspacemd"}},{"Process":{"Description":"dpm-getspacetokens gets the list of space tokens. u_token specifies the user provided description associated with a previous reservespace request. If the option is not specified, all the space tokens accessible by the user will be listed.","Process Name":"dpm-getspacetokens","Link":"https:\/\/linux.die.net\/man\/1\/dpm-getspacetokens"}},{"Process":{"Description":"dpm-listspaces Display Disk Pool Manager pools and space reservations and their detailed configuration. The most up-to-date documentation can be obtained with option --help.","Process Name":"dpm-listspaces","Link":"https:\/\/linux.die.net\/man\/1\/dpm-listspaces"}},{"Process":{"Description":"dpm-modifyfs modifies the parameters of a disk pool filesystem. This command requires ADMIN privilege.","Process Name":"dpm-modifyfs","Link":"https:\/\/linux.die.net\/man\/1\/dpm-modifyfs"}},{"Process":{"Description":"dpm-modifypool modifies a disk pool definition. This command requires ADMIN privilege.","Process Name":"dpm-modifypool","Link":"https:\/\/linux.die.net\/man\/1\/dpm-modifypool"}},{"Process":{"Description":"dpm-ping checks if the Disk Pool Manager is alive and prints its version number.","Process Name":"dpm-ping","Link":"https:\/\/linux.die.net\/man\/1\/dpm-ping"}},{"Process":{"Description":"dpm-qryconf displays the Disk Pool Manager configuration. For each pool, it displays two lines. The first one gives the pool name, the default amount of space reserved for a file, the threshold (in %) at which the garbage collector is started and stopped, the default lifetime, the default pin time, the maximum lifetime, the maximum pin time, the \"File System Selection\" policy name, the \"Garbage Collection\" policy name, the \"Request Selection\" policy name, the group id if the pool is restricted or 0, the space type: V (for Volatile), D (for Durable), P (for Permanent) or - (for any type), the \"Migration Policy\" name and the retention policy: R (for Replica), O (for Output) or C (for Custodial). All time values are either \"Inf\" (for infinite) or expressed in years, months, days, hours or seconds. The second one gives the capacity of the disk pool and the amount of free space. After each pool description, the filesystems belonging to the pool are listed giving the server name, the filesystem name, the capacity, the amount of free space and the status.","Process Name":"dpm-qryconf","Link":"https:\/\/linux.die.net\/man\/1\/dpm-qryconf"}},{"Process":{"Description":"dpm-register registers a given filename with the specified permissions into DPNS: - create the file metadata entry in DPNS (dpns_creat) - set the ownership (dpns_chown) to owner_user : owner_group (by default the requester's DN and group) - set the filemode (dpns_chmod) to filemode - set the size of the file (dpns_setfsize) to filesize - add the replica entry (dpns_addreplicax) setting * sfn = pfn * status to status ('O' for Online, 'N' for Nearline) * f_type = 'P' (Permanent) * r_type = 'P' (Primary)","Process Name":"dpm-register","Link":"https:\/\/linux.die.net\/man\/1\/dpm-register"}},{"Process":{"Description":"dpm-releasespace releases space.","Process Name":"dpm-releasespace","Link":"https:\/\/linux.die.net\/man\/1\/dpm-releasespace"}},{"Process":{"Description":"dpm-replicate replicates a file given the SURL or the PFN. file_type indicates the type of file desired for the new replica. It can be V (for Volatile), D (for Durable) or P (for Permanent). file_lifetime specifies the requested file lifetime of the new replica relative to the current time. It can be \"Inf\" (for infinite) or expressed in years (suffix 'y'), months (suffix 'm'), days (suffix 'd'), hours (suffix 'h') or seconds (no suffix). If specified the file_type and file_lifetime must be compatible. s_token specifies that the new replica should be allocated within a space identified by the given token.","Process Name":"dpm-replicate","Link":"https:\/\/linux.die.net\/man\/1\/dpm-replicate"}},{"Process":{"Description":"dpm-reservespace reserves space.","Process Name":"dpm-reservespace","Link":"https:\/\/linux.die.net\/man\/1\/dpm-reservespace"}},{"Process":{"Description":"dpm-rmfs removes a filesystem from a disk pool definition. This command requires ADMIN privilege.","Process Name":"dpm-rmfs","Link":"https:\/\/linux.die.net\/man\/1\/dpm-rmfs"}},{"Process":{"Description":"dpm-rmpool removes a disk pool definition. This command requires ADMIN privilege.","Process Name":"dpm-rmpool","Link":"https:\/\/linux.die.net\/man\/1\/dpm-rmpool"}},{"Process":{"Description":"dpm-updatespace updates space.","Process Name":"dpm-updatespace","Link":"https:\/\/linux.die.net\/man\/1\/dpm-updatespace"}},{"Process":{"Description":"dpns-chgrp sets the group ownership of a DPNS directory\/file in the name server to the value of group. To change the group ID, the effective user ID of the process must match the owner ID of the file and the new group must be in the list of groups the caller belong to or the caller must have ADMIN privilege in the Cupv database. group is either a valid group name or a valid numeric ID. path specifies the DPNS pathname. If path does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable.","Process Name":"dpns-chgrp","Link":"https:\/\/linux.die.net\/man\/1\/dpns-chgrp"}},{"Process":{"Description":"dpns-chmod sets the access mode of DPNS directory\/ file(s) in the name server to the octal value in absolute_mode. Symbolic mode changes are not supported yet. The effective user ID of the process must match the owner of the file or the caller must have ADMIN privilege in the Cupv database. path specifies the DPNS pathname. If path does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable.","Process Name":"dpns-chmod","Link":"https:\/\/linux.die.net\/man\/1\/dpns-chmod"}},{"Process":{"Description":"dpns-chown sets the owner and\/or the group of a DPNS directory\/file in the name server to the values in owner and group respectively. To change the owner ID, if the group ID does not change and if the caller and the new owner ID belong to that group, GRP_ADMIN privilege is needed, otherwise the caller must have ADMIN privilege in the Cupv database. To change the group ID, the effective user ID of the process must match the owner ID of the file and the new group must be in the list of groups the caller belong to or the caller must have ADMIN privilege in the Cupv database. owner is either a valid username or a valid numeric ID. group is either a valid group name or a valid numeric ID. path specifies the DPNS pathname. If path does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable.","Process Name":"dpns-chown","Link":"https:\/\/linux.die.net\/man\/1\/dpns-chown"}},{"Process":{"Description":"dpns-entergrpmap defines a new group entry in Virtual Id table. This command requires ADMIN privilege.","Process Name":"dpns-entergrpmap","Link":"https:\/\/linux.die.net\/man\/1\/dpns-entergrpmap"}},{"Process":{"Description":"dpns-enterusrmap defines a new user entry in Virtual Id table. This command requires ADMIN privilege.","Process Name":"dpns-enterusrmap","Link":"https:\/\/linux.die.net\/man\/1\/dpns-enterusrmap"}},{"Process":{"Description":"dpns-getacl gets the Access Control List associated with a DPNS directory\/file. For each path, it displays the file name, owner, the group, and the Access Control List (ACL) if present. If a directory has a default ACL, dpns-getacl also displays the default ACL. Regular files cannot have default ACLs. The output looks like: # file: filename\n# owner: username\n# group: groupname\nuser::perm\nuser:uid:perm\ngroup::perm\ngroup:gid:perm\nmask:perm\nother:perm\ndefault:user::perm\ndefault:user:uid:perm\ndefault:group::perm\ndefault:group:gid:perm\ndefault:mask:perm\ndefault:other:perm The first \"user\" entry gives the permissions granted to the owner of the file. The following \"user\" entries show the permissions granted to specific users, they are sorted in ascending order of uid. The first \"group\" entry gives the permissions granted to the group owner of the file. The following \"group\" entries show the permissions granted to specific groups, they are sorted in ascending order of gid. The \"mask\" entry is the maximum permission granted to specific users or groups. It does not affect the \"owner\" and \"other\" permissions. The \"mask\" entry must be present if there are specific \"user\" or \"group\" entries. \"default\" entries associated with a directory are inherited as access ACL by the files or sub-directories created in that directory. The umask is not used. Sub-directories also inherit the default ACL as default ACL. As soon as there is one default ACL entry, the 3 default ACL base entries (default user, default group, default other) must be present. The entry processing conforms to the Posix 1003.1e draft standard 17. path specifies the DPNS pathname. If path does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable. uid is displayed as the username if known else as the numeric id. gid is displayed as the groupname if known else as the numeric id. perm is expressed as a combination of characters rwx-","Process Name":"dpns-getacl","Link":"https:\/\/linux.die.net\/man\/1\/dpns-getacl"}},{"Process":{"Description":"dpns-listgrpmap queries about a given group or lists all existing groups in virtual gid table. This function requires ADMIN privilege.","Process Name":"dpns-listgrpmap","Link":"https:\/\/linux.die.net\/man\/1\/dpns-listgrpmap"}},{"Process":{"Description":"dpns-listusrmap queries about a given user or lists all existing users in virtual uid table. This function requires ADMIN privilege.","Process Name":"dpns-listusrmap","Link":"https:\/\/linux.die.net\/man\/1\/dpns-listusrmap"}},{"Process":{"Description":"dpns-ln makes a symbolic link to a file or a directory in the DPNS Name Server. This requires write permission in linkname parent directory. If linkname does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable. If linkname is not specified, the link is created in the current directory with the same basename as the target. In the second form, it creates in directory a link for each target.","Process Name":"dpns-ln","Link":"https:\/\/linux.die.net\/man\/1\/dpns-ln"}},{"Process":{"Description":"dpns-ls lists DPNS name server directory\/file entries. If path is a directory, dpns-ls list the entries in the directory; they are sorted alphabetically. path specifies the DPNS pathname. If path does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable.","Process Name":"dpns-ls","Link":"https:\/\/linux.die.net\/man\/1\/dpns-ls"}},{"Process":{"Description":"dpns-mkdir creates the specified DPNS directories in the name server. This requires write permission in the parent directory. The owner ID and group ID of the new directories are set to the requestor's real user ID and group ID, respectively. path specifies the DPNS pathname. If path does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable. The dpns-mkdir command has the following options: -m specifies the mode to be used. Default mode is 777. -p creates all the non-existing parent directories first. The mode set for the created intermediate directories is the logical difference between 0777 and the user umask but at least 0300.","Process Name":"dpns-mkdir","Link":"https:\/\/linux.die.net\/man\/1\/dpns-mkdir"}},{"Process":{"Description":"dpns-modifygrpmap modifies the group entry corresponding to a given virtual gid. This command requires ADMIN privilege.","Process Name":"dpns-modifygrpmap","Link":"https:\/\/linux.die.net\/man\/1\/dpns-modifygrpmap"}},{"Process":{"Description":"dpns-modifyusrmap modifies the user entry corresponding to a given virtual uid. This command requires ADMIN privilege.","Process Name":"dpns-modifyusrmap","Link":"https:\/\/linux.die.net\/man\/1\/dpns-modifyusrmap"}},{"Process":{"Description":"dpns-ping checks if the name server is alive and prints its version number.","Process Name":"dpns-ping","Link":"https:\/\/linux.die.net\/man\/1\/dpns-ping"}},{"Process":{"Description":"dpns-rename renames a DPNS file or directory in the name server. This requires write permission in the parent directories. If oldpath or newpath does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable.","Process Name":"dpns-rename","Link":"https:\/\/linux.die.net\/man\/1\/dpns-rename"}},{"Process":{"Description":"dpns-rm removes DPNS files or directories in the name server. For directories either -r or -R must be present. For regular files, it calls dpns_unlink while for directories, it calls dpns_rmdir. This requires write permission in the parent directory and the file itself. If write permission on an entry is denied, the standard input is a terminal and the -f option is not given, the prompt \"override write protection\" appears and if the response is not y, the entry is not deleted. Entries directly under a protected directory are never deleted. path specifies the DPNS pathname. If path does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable.","Process Name":"dpns-rm","Link":"https:\/\/linux.die.net\/man\/1\/dpns-rm"}},{"Process":{"Description":"dpns-rmgrpmap suppresses the group entry corresponding to a given virtual gid or group name. If both are specified, they must point at the same entry. This command requires ADMIN privilege.","Process Name":"dpns-rmgrpmap","Link":"https:\/\/linux.die.net\/man\/1\/dpns-rmgrpmap"}},{"Process":{"Description":"dpns-rmusrmap suppresses the user entry corresponding to a given virtual uid or user name. If both are specified, they must point at the same entry. This command requires ADMIN privilege.","Process Name":"dpns-rmusrmap","Link":"https:\/\/linux.die.net\/man\/1\/dpns-rmusrmap"}},{"Process":{"Description":"dpns-setacl sets the Access Control List associated with a DPNS directory\/file. acl_entries is a comma separated list of entries. Each entry has colon separated fields: ACL type, id (uid or gid), permission. Only directories can have default ACL entries. The entries look like: user::perm\nuser:uid:perm\ngroup::perm\ngroup:gid:perm\nmask:perm\nother:perm\ndefault:user::perm\ndefault:user:uid:perm\ndefault:group::perm\ndefault:group:gid:perm\ndefault:mask:perm\ndefault:other:perm The ACL type can be abbreviated to the first letter. The first \"user\" entry gives the permissions granted to the owner of the file. The following \"user\" entries show the permissions granted to specific users, they are sorted in ascending order of uid. The first \"group\" entry gives the permissions granted to the group owner of the file. The following \"group\" entries show the permissions granted to specific groups, they are sorted in ascending order of gid. The \"mask\" entry is the maximum permission granted to specific users or groups. It does not affect the \"owner\" and \"other\" permissions. The \"mask\" entry must be present if there are specific \"user\" or \"group\" entries. \"default\" entries associated with a directory are inherited as access ACL by the files or sub-directories created in that directory. The umask is not used. Sub-directories also inherit the default ACL as default ACL. As soon as there is one default ACL entry, the 3 default ACL base entries (default user, default group, default other) must be present. The entry processing conforms to the Posix 1003.1e draft standard 17. The effective user ID of the process must match the owner of the file or the caller must have ADMIN privilege in the Cupv database. path specifies the DPNS pathname. If path does not start with \/, it is prefixed by the content of the DPNS_HOME environment variable. uid can be given as the username or the corresponding numeric id. gid can be given as the groupname or the corresponding numeric id. perm can be expressed as a combination of characters rwx- or as a value between 0 and 7.","Process Name":"dpns-setacl","Link":"https:\/\/linux.die.net\/man\/1\/dpns-setacl"}},{"Process":{"Description":"The dprofpp command interprets profile data produced by a profiler, such as the Devel::DProf profiler. Dprofpp will read the file tmon.out and display the 15 subroutines which are using the most time. By default the times for each subroutine are given exclusive of the times of their child subroutines. To profile a Perl script run the perl interpreter with the -d switch. So to profile script test.pl with Devel::DProf use the following: $ perl5 -d:DProf test.pl Then run dprofpp to analyze the profile. The output of dprofpp depends on the flags to the program and the version of Perl you're using. $ dprofpp -u\nTotal Elapsed Time =    1.67 Seconds\n         User Time =    0.61 Seconds\nExclusive Times\n%Time Seconds     #Calls sec\/call Name\n 52.4   0.320          2   0.1600 main::foo\n 45.9   0.280        200   0.0014 main::bar\n 0.00   0.000          1   0.0000 DynaLoader::import\n 0.00   0.000          1   0.0000 main::baz The dprofpp tool can also run the profiler before analyzing the profile data. The above two commands can be executed with one dprofpp command. $ dprofpp -u -p test.pl Consult \" PROFILE FORMAT \" in Devel::DProf for a description of the raw profile.","Process Name":"dprofpp","Link":"https:\/\/linux.die.net\/man\/1\/dprofpp"}},{"Process":{"Description":"dpromdic converts the binary-form Romaji-to-Kana conversion table into the text-form table. It then outputs the result to the standard output. After a dictionary table is converted into the binary dictionary by using mkromdic(1), dpromdic can returns it to the text-form table. The contents converted into binary dictionary from the text dictionary by using mkromdic(1) is sorted in alphabetical order of Romaji. The comment lines are deleted in this table.","Process Name":"dpromdic","Link":"https:\/\/linux.die.net\/man\/1\/dpromdic"}},{"Process":{"Description":"dpsexec is a Display PostScript program that allows the user to interact directly with the PostScript interpreter through a command interface. dpsexec reads lines of text from standard input and passes each line to the PostScript interpreter for execution. It creates a window that displays the results of graphics operations as they are executed. dpsexec exits when end of file is reached on standard input, or when the user types \"quit<return>\", which executes the PostScript quit operator. By default, dpsexec executes the PostScript executive operator before it accepts any user input. This operator puts the PostScript interpreter in \"interactive executive\" mode so that the user can control the interpreter directly. In this mode, the PostScript interpreter supports certain line-editing functions and prompts the user when it is ready to execute more input. See section 2.4.4, \"Using the Interpreter Interactively,\" of the PostScript Language Reference Manual, Second Edition, for detailed information on this mode of operation.","Process Name":"dpsexec","Link":"https:\/\/linux.die.net\/man\/1\/dpsexec"}},{"Process":{"Description":"Dpsinfo is a utility for displaying information about the DPS extension present in an X server or provided by a client-side DPS agent. Dpsinfo will print out the version of the DPS protocol used, the language level and version of the underlying PS interpreter, as well as the set of font formats supported. If -debug is specified, dpsinfo will print out all the PS code sent to the server.","Process Name":"dpsinfo","Link":"https:\/\/linux.die.net\/man\/1\/dpsinfo"}},{"Process":{"Description":"dq-deque will remove one task from an \"IPC::DirQueue\" directory, run the named command, and then exit. The command is run as: command arg arg ... nameofdatafile","Process Name":"dq-deque","Link":"https:\/\/linux.die.net\/man\/1\/dq-deque"}},{"Process":{"Description":"dq-indexd is a single-process event-driven daemon, used by \"IPC::DirQueue\" to track queue activity at a centralised point. \"IPC::DirQueue\" uses a filesystem directory to hold its queue files, and normally uses the normal UNIX filesystem \"readdir\" APIs to list the queue. However, in certain situations when NFS is in use, these APIs may scale poorly, and a TCP\/IP-based central server may be more appropriate (although adding a new single point of failure). \"dq-indexd\" makes this possible.","Process Name":"dq-indexd","Link":"https:\/\/linux.die.net\/man\/1\/dq-indexd"}},{"Process":{"Description":"dq-list will list the current tasks in an \"IPC::DirQueue\" directory,","Process Name":"dq-list","Link":"https:\/\/linux.die.net\/man\/1\/dq-list"}},{"Process":{"Description":"dq-server will remove each task in turn from an \"IPC::DirQueue\" directory, running the named command on each one. Once the queue is empty, it will wait indefinitely for more tasks to arrive. A limit on how many jobs to dequeue can be specified using --njobs. The command is run as: command arg arg ... nameofdatafile","Process Name":"dq-server","Link":"https:\/\/linux.die.net\/man\/1\/dq-server"}},{"Process":{"Description":"dq-submit will submit tasks to an \"IPC::DirQueue\" directory. Multiple task files can be specified on the command-line.","Process Name":"dq-submit","Link":"https:\/\/linux.die.net\/man\/1\/dq-submit"}},{"Process":{"Description":"The diagram_text_file is processed in paragraph mode, each paragraph is separated from the next by a blank line. The order of the paragraphs is important (that is a minor bug). The order is: node layout\nstarting states\naccepting states\nedges... You may include as many edge paragraphs as you like, but each one should have a different label. At least two example input files are included in the distribution. Look in the samples subdirectory for files ending in .input. The README file in that directory explains what these input files represent. The corresponding .svg and .png files hold the resulting images. The .png images were produced with the freely available Batik rasterizer, which is part of the Batik project from Apache. See http:\/\/xml.apache.org\/batik\/ for information on Apache Batik. In case you have trouble finding those files, one is included here: (0) ()  (5)\n()  ()  (10)\n(25)(15)\n()  (20)(30)\n\nStarting\n0,0,N N\n\nAccepting\n0,2\n2,3\n\n5\n0,0,E 2,0,W\n2,0,S 2,1,N\n2,1,W 1,2,E\n1,2,S 1,3,N\n1,3,W 0,2,S\n\n10\n0,0,S 2,1,W\n1,2,W 0,2,E\n2,1,S 1,3,E\n1,3,E 2,3,W\n\n25\n0,0,S 0,2,N Counter\n2,0,E 2,3,E Clock This represents the states in a coin operated vending machine which accepts coins with values of 5, 10, and 25. The purchase price for the machine is 25, so 25 and 30 are accepting states. Zero is the start state. Each deposited coin increases the total, which is used to label the nodes. Edges represent deposits and are labeled with the value of the deposited coin. (The diagram is not complete. It is meant to show features of diagrams. If you have a coin-op machine you need to build, feel free to extend it as needed.) Each paragraph except the one for node layout has a label. The labels are only used for edge paragraphs. All coordinates are in terms of the node layout which is numbered from 0. Columns are listed first, then rows (think x and y from algebra). Sides of the nodes (where edges begin and end) are labeled with compass points N(orth), S(outh), E(ast), and W(est). This input format is idiosyncratic. If you don't like it, you should design your own and interface directly with UML::State. If you don't like listing columns first, or numbering from zero, you will need to account for that in your new script or change UML::State.","Process Name":"drawstate.pl","Link":"https:\/\/linux.die.net\/man\/1\/drawstate.pl"}},{"Process":{"Description":"The xml format is described by the (unenforced) dtd in the samples directory included with the distribution. The advantage of the xml format is that it lets you name the states and specify edges in terms of the names. The samples directory also includes examples in the files ending in xml. See the samples\/README. If you don't like xml, feel free to use the text format supported by drawstate.pl. You could also use UML::State directly to support a format of your choice.","Process Name":"drawstatexml.pl","Link":"https:\/\/linux.die.net\/man\/1\/drawstatexml.pl"}},{"Process":{"Description":"This application provides a command line tool for documenting hardware and software designs through ideal timing diagrams. It reads signal descriptions from a text file with an intuitive syntax, and outputs an ideal timing diagram to an image file. Notation typical of timing diagrams found in the Electrical Engineering discipline is used, including arrows indicating causal relationships between signal transitions. The options are as follows:       --help'            Show usage reminder. --verbose Increase diagnostic output. --scale factor Scale the diagram by the given factor. The default scaling factor is 1.0. --pagesize WidthxHeight Scale the diagram to fit given image size. --aspect' Maintain fixed aspect ratio if --pagesize given. --cell-height H Height of the each signal in pixels. Default is 32. --cell-width W Width for the time unit in pixels. Defaults is 64. --font-size pts Font size in pts. Default is 18. --line-width W Line width for drawings in pixels. Default is 1. --output target The name and format of the output image is determined by target. file ...' The input files describe the signals to be diagrammed. See the FILES and EXAMPLES sections for a description of their format.","Process Name":"drawtiming","Link":"https:\/\/linux.die.net\/man\/1\/drawtiming"}},{"Process":{"Description":"drawvalmap is a simple utility that can be used to display the validator status values in a graphical format. The input to this script is a set of log messages that can be read either from file or from a socket. The output is an image file containing an image of the various validator authentication chain status values. drawvalmap reads data from STDIN if the logfile and the socket option are both unspecified. If the -f option is given, the output image file is embedded in an HTML file with the given name. The HTML file auto-refreshes according to the refresh time supplied by the -r option, allowing changes to the validator graph to be constantly tracked. The typical usage of this script is in the following way: # drawvalmap <logfile> It would not be uncommon to use this script for troubleshooting purposes, in which case output generated by a driver program would be \"piped\" to this script in the manner shown below. # dt-validate -o6:stdout secure.example.com. | drawvalmap -f val_log_map.html In each case the script generates the results in a val_log_map.png file. In the second case, an HTML file with the name val_log_map.html is also generated.","Process Name":"drawvalmap","Link":"https:\/\/linux.die.net\/man\/1\/drawvalmap"}},{"Process":{"Description":"Dreal is a hierarchical real layout viewer. All functionnalities can be accessed through different menus. Dreal works under Motif and X11r5. When entering Dreal, the main window appears and shows 4 different menus on the top bar.These menus can be entered by simply clicking on the mouse left button. Here is the description of these menus. File Open : load an existing cell. Quit : quit dreal. View Zoom : perform zoom in, zoom out, center, fit, refresh on figure. Layer : select types of layers displayed. Map : show cursor position in the entire figure. Arrows : show arrows for moving at the grid step. Grid : Set the X,Y step of the grid if displayed. Tools Flatten : flatten the current figure. Message : display the last error messages. Setup Save or load a user defined configuration of default displayed menus.","Process Name":"dreal","Link":"https:\/\/linux.die.net\/man\/1\/dreal"}},{"Process":{"Description":"The drift program draws drifting recursive fractal cosmic flames","Process Name":"drift","Link":"https:\/\/linux.die.net\/man\/1\/drift"}},{"Process":{"Description":"Driftnet watches network traffic, and picks out and displays JPEG and GIF images for display. It is an horrific invasion of privacy and shouldn't be used by anyone anywhere. It has been described as 'a graphical tcpdump(8)', ' EtherPeg for Unix', and called all sorts of nasty names by people on Freshmeat. It is also possible to use driftnet to capture MPEG audio data from the network and play it through a player such as mpg123(1). Images may be saved by clicking on them.","Process Name":"driftnet","Link":"https:\/\/linux.die.net\/man\/1\/driftnet"}},{"Process":{"Description":"drill is a tool to designed to get all sorts of information out of the DNS. It is specificly designed to be used with DNSSEC. The name drill is a pun on dig. With drill you should be able get even more information than with dig. If no arguments are given class defaults to 'IN' and type to 'A'. The server(s) specified in \/etc\/resolv.conf are used to query against. name Ask for this name. @server Send to query to this server. If not specified use the nameservers from \/etc\/resolv.conf. type Ask for this RR type. If type is not given on the command line it defaults to 'A'. Except when doing to reverse lookup when it defaults to 'PTR'. class Use this class when querying.","Process Name":"drill","Link":"https:\/\/linux.die.net\/man\/1\/drill"}},{"Process":{"Description":"The dropbox command provides a command line interface to the Dropbox, the easiest online file storage, synchronization and sharing service.","Process Name":"dropbox","Link":"https:\/\/linux.die.net\/man\/1\/dropbox"}},{"Process":{"Description":"dropdb destroys an existing PostgreSQL database. The user who executes this command must be a database superuser or the owner of the database. dropdb is a wrapper around the SQL command DROP DATABASE [drop_database(7)]. There is no effective difference between dropping databases via this utility and via other methods for accessing the server.","Process Name":"dropdb","Link":"https:\/\/linux.die.net\/man\/1\/dropdb"}},{"Process":{"Description":"droplang is a utility for removing an existing programming language from a PostgreSQL database. droplang can drop any procedural language, even those not supplied by the PostgreSQL distribution. Although backend programming languages can be removed directly using several SQL commands, it is recommended to use droplang because it performs a number of checks and is much easier to use. See DROP LANGUAGE [drop_language(7)] for more.","Process Name":"droplang","Link":"https:\/\/linux.die.net\/man\/1\/droplang"}},{"Process":{"Description":"dropuser removes an existing PostgreSQL user. Only superusers and users with the CREATEROLE privilege can remove PostgreSQL users. (To remove a superuser, you must yourself be a superuser.) dropuser is a wrapper around the SQL command DROP ROLE [drop_role(7)]. There is no effective difference between dropping users via this utility and via other methods for accessing the server.","Process Name":"dropuser","Link":"https:\/\/linux.die.net\/man\/1\/dropuser"}},{"Process":{"Description":"dropwatch dropwatch is an interactive utility for monitoring and recording packets that are dropped by the kernel","Process Name":"dropwatch","Link":"https:\/\/linux.die.net\/man\/1\/dropwatch"}},{"Process":{"Description":"DRuC is a general parametrized VLSI design rule checker. This tool replace the VERSATIL tool that is not anymore supported. This manual presents the layout rules for tle ALLIANCE symbolic layout approach. The rules are described in a technology file defined by the environment variable RDS_TECHNO_NAME (see bellow). The root cell and all the instanciated cells (except the intanciated libraries cells) must be in the current directory. The default mode of DRuC is (currently) full flat: it first flatten all the hierarchy in order to obtain a flat, rectangle level description.","Process Name":"druc","Link":"https:\/\/linux.die.net\/man\/1\/druc"}},{"Process":{"Description":"The Named Pipe Log Script allows you to replace a log file with a named pipe attached to a script. The server can then send the log output to a script instead of to a log file. This allows you to do many different things such as: * log only certain events e.g. failed binds, connections from certain ip addresses, etc. * log only lines that match a certain pattern * log only the last N lines - useful for enabling full error log debug levels in production environments * send an email or other notification when a certain event is detected The script is written in python, and allows plugins. By default, the script will log the last N lines (default 1000). There are two plugins provided - one to log only failed bind attempts, and one that will log only lines that match given regular expressions.","Process Name":"ds-logpipe.py","Link":"https:\/\/linux.die.net\/man\/1\/ds-logpipe.py"}},{"Process":{"Description":"The dsa command processes DSA keys. They can be converted between various forms and their components printed out. Note This command uses the traditional SSLeay compatible format for private key encryption: newer applications should use the more secure PKCS#8 format using the pkcs8","Process Name":"dsa","Link":"https:\/\/linux.die.net\/man\/1\/dsa"}},{"Process":{"Description":"This command is used to manipulate or generate DSA parameter files.","Process Name":"dsaparam","Link":"https:\/\/linux.die.net\/man\/1\/dsaparam"}},{"Process":{"Description":"dselect is one of the primary user interfaces for managing packages on a Debian system. At the dselect main menu, the system administrator can: - Update the list of available package versions, - View the status of installed and available packages, - Alter package selections and manage dependencies, - Install new packages or upgrade to newer versions. dselect operates as a front-end to dpkg(1), the low-level debian package handling tool. It features a full-screen package selections manager with package depends and conflicts resolver. When run with administrator privileges, packages can be installed, upgraded and removed. Various access methods can be configured to retrieve available package version information and installable packages from package repositories. Depending on the used access method, these repositories can be public archive servers on the internet, local archive servers or cdroms. The recommended access method is apt, which is provided by the package apt. Normally dselect is invoked without parameters. An interactive menu is presented, offering the user a list of actions. If an action is given as argument, then that action is started immediately. Several commandline parameters are still available to modify the running behaviour of dselect or show additional information about the program.","Process Name":"dselect","Link":"https:\/\/linux.die.net\/man\/1\/dselect"}},{"Process":{"Description":"The dshbak program formats pdsh pdsh output for humans. Output from each node is consolidated, the leading \" node:\" is stripped, and a header block with the node name is added. If the -c option is specified, nodes with identical output are not displayed twice; instead, the header will contain a list of nodes. The list of nodes is further compressed into node ranges if the node names have a numeric suffix.","Process Name":"dshbak","Link":"https:\/\/linux.die.net\/man\/1\/dshbak"}},{"Process":{"Description":"Reports memory, network, and file system tuning settings which can affect the performance of the Directory Server","Process Name":"dsktune","Link":"https:\/\/linux.die.net\/man\/1\/dsktune"}},{"Process":{"Description":"The DSPAM agent provides a direct interface to mail servers for command-line spam filtering. The agent can masquerade as the mail server's local delivery agent and will process any email passed to it. The agent will then call whatever delivery agent was specified at compile time or quarantine\/tag\/drop messages identified as spam. The DSPAM agent can function locally or as a proxy. It is also responsible for processing classification errors so that DSPAM can learn from its mistakes.","Process Name":"dspam","Link":"https:\/\/linux.die.net\/man\/1\/dspam"}},{"Process":{"Description":"dspam_admin is used to alter DSPAM user's preferences.","Process Name":"dspam_admin","Link":"https:\/\/linux.die.net\/man\/1\/dspam_admin"}},{"Process":{"Description":"dspam_clean is used to perform periodic housecleaning on DSPAM's metadata dictionary by deleting old or useless data. dspam_clean has no effect if you use the \"hash\" storage driver. In that case, you should use the tools cssclean and csscompress (which do not currently have manual pages).","Process Name":"dspam_clean","Link":"https:\/\/linux.die.net\/man\/1\/dspam_clean"}},{"Process":{"Description":"dspam_crc is used to calculate the DSPAM CRC\/hash value for a text token.","Process Name":"dspam_crc","Link":"https:\/\/linux.die.net\/man\/1\/dspam_crc"}},{"Process":{"Description":"dspam_dump dumps a user's metadata dictionary to stdout. This can be used to view the entire contents of a user's dictionary, or used in combination with grep to view a subset of data. The output provides the token's stored value (in CRC64 format), the number of spam and nonspam hits, and the token's computed probability.","Process Name":"dspam_dump","Link":"https:\/\/linux.die.net\/man\/1\/dspam_dump"}},{"Process":{"Description":"dspam_logrotate can be used to rotate DSPAM system log and\/or the user logs.","Process Name":"dspam_logrotate","Link":"https:\/\/linux.die.net\/man\/1\/dspam_logrotate"}},{"Process":{"Description":"dspam_merge merges several users' metadata into a single user's dictionary. This tool is designed to create global users and seeded data. The hit sounds for each token and per-user totals are added together to produce a single composite dataset. After creating a composite user, dspam_clean should be run with the -p option to clean up extraneous data. NOTE : Merges may take a considerable amount of time. This could potentially increase the load on the server or even slow down the delivery of email. A merge should only be performed when the system is fairly acquiesce.","Process Name":"dspam_merge","Link":"https:\/\/linux.die.net\/man\/1\/dspam_merge"}},{"Process":{"Description":"dspam_stats displays the spam filtering statistics for one or all users on the system. Displays TP (True Positives (Spam)), TN (True Negatives (Innocent)), FP (False Positives), FN (False Negatives), SC (Spam Corpusfed) and NC (Nonspam Corpusfed).","Process Name":"dspam_stats","Link":"https:\/\/linux.die.net\/man\/1\/dspam_stats"}},{"Process":{"Description":"dspam_train is used to train and test a corpus of mail (in maildir or MBOX format). This tool will present each message to DSPAM for a classification and then retrain only if the message was incorrect. This provides close to real-world training and should be used to build pretrained databases. Upon execution, the tool will automatically determine the ratio of spam:nonspam and train based on that ratio to ensure both corpora are trained consecutively. This tool can also be used as a test jig to measure the efficiency and accuracy of a particular corpus against DSPAM in a given configuration.","Process Name":"dspam_train","Link":"https:\/\/linux.die.net\/man\/1\/dspam_train"}},{"Process":{"Description":"Dstat is a versatile replacement for vmstat, iostat and ifstat. Dstat overcomes some of the limitations and adds some extra features. Dstat allows you to view all of your system resources instantly, you can eg. compare disk usage in combination with interrupts from your IDE controller, or compare the network bandwidth numbers directly with the disk throughput (in the same interval). Dstat also cleverly gives you the most detailed information in columns and clearly indicates in what magnitude and unit the output is displayed. Less confusion, less mistakes, more efficient. Dstat is unique in letting you aggregate block device throughput for a certain diskset or network bandwidth for a group of interfaces, ie. you can see the throughput for all the block devices that make up a single filesystem or storage system. Dstat allows its data to be directly written to a CSV file to be imported and used by OpenOffice, Gnumeric or Excel to create graphs. Note Users of Sleuthkit might find Sleuthkit's dstat being renamed to datastat to avoid a name conflict. See Debian bug #283709 for more information.","Process Name":"dstat","Link":"https:\/\/linux.die.net\/man\/1\/dstat"}},{"Process":{"Description":"dsync is Dovecot's mailbox synchronization utility. It can be used for several different use cases: Two-way synchronization of mailboxes in different servers (via ssh(1)), creating backups of mails to a remote server, and convert mailboxes from\/to different mailbox formats. The syncing is done as perfectly as possible: an IMAP or a POP3 client shouldn't be able to notice any differences between the two mailboxes. Two-way syncing means that it's safe to do any kind of modifications in both sides, and dsync will merge the changes without losing any changes done on either side. This is possible because dsync can access Dovecot's index logs that keep track of changes. It's of course possible to have conflicts during merging, these are resolved in a safe way. See the dsync design document for more information. dsync uses the same configuration files as the rest of Dovecot (via doveconf binary). The entire configuration can be changed by giving -c parameter to another configuration file, or using -o parameter to override specific settings. When executing a remote dsync program it works the same way: it uses its own local configuration. dsync can be run completely standalone. It doesn't require any Dovecot server processes to be running, except when using -u parameter to do a userdb lookup from auth process. dsync can currently sync only one user at a time. If you want to dsync all users, you'll need to get a list of all users and execute dsync separately for each one. Any errors are written to stderr.","Process Name":"dsync","Link":"https:\/\/linux.die.net\/man\/1\/dsync"}},{"Process":{"Description":"This utility is a command-line wrapper around the val_getaddrinfo() function. It invokes the val_getaddrinfo() operation for the given command-line arguments and displays the return code from the function and the contents of the addrinfo structure. The exit status for this program is 1 if the answer received is trusted, 2 if the answer received is validated, and -1 for an error. If no validation is performed, or the result is neither trusted nor validated, a value of 0 is returned. The trusted and validated status values are obtained using the val_istrusted() and val_isvalidated() functions from libval(3).","Process Name":"dt-getaddr","Link":"https:\/\/linux.die.net\/man\/1\/dt-getaddr"}},{"Process":{"Description":"This utility is a command-line wrapper around the val_gethostbyname() (and related) functions. It invokes the val_gethostbyname(), val_gethostbyname_r() and val_gethostbyname2() functions for the given command-line arguments and displays the returned hostent, the validation status value, and the value of the h_errno variable. The exit status for this program is 1 if the answer received is trusted, 2 if the answer received is validated, and -1 for an error. The program returns 0 if no validation was performed or if the result was neither trusted nor validated. The trusted and validated status values are obtained using the val_istrusted() and val_isvalidated() functions from libval(3).","Process Name":"dt-gethost","Link":"https:\/\/linux.die.net\/man\/1\/dt-gethost"}},{"Process":{"Description":"This utility is a command-line wrapper around the val_getnameinfo() function. It invokes the val_getnameinfo() function with the given command-line arguments and displays the returned host and service information for the given node name, with a validation status value. The exit status for this program is 1 if the answer received is trusted, 2 if the answer received is validated, and -1 for an error. The program returns 0 if no validation was performed or if the result was neither trusted nor validated. The trusted and validated status values are obtained using the val_istrusted() and val_isvalidated() functions from libval(3).","Process Name":"dt-getname","Link":"https:\/\/linux.die.net\/man\/1\/dt-getname"}},{"Process":{"Description":"This utility is a command-line wrapper around the val_res_query() function. It invokes the val_res_query() function with the given command-line arguments and displays the returned data as a DNS-style response. It also displays the validation status value for the records returned for the query. The exit status for this program is 1 if the answer received is trusted, 2 if the answer received is validated, and -1 for an error. The program returns 0 if the result was neither trusted nor validated. The trusted and validated status values are obtained using the val_istrusted() and val_isvalidated() functions from libval(3).","Process Name":"dt-getquery","Link":"https:\/\/linux.die.net\/man\/1\/dt-getquery"}},{"Process":{"Description":"This utility is a command-line wrapper around the val_get_rrset() function. It invokes the val_get_rrset() function with the given command-line arguments and displays the returned data and the validated, trusted and non-existence status for each resource record set returned in the response. Any information about name aliases are also displayed. The trusted and validated status values are obtained using the val_istrusted() and val_isvalidated() functions from libval(3). This program returns 0 on success and -1 on failure.","Process Name":"dt-getrrset","Link":"https:\/\/linux.die.net\/man\/1\/dt-getrrset"}},{"Process":{"Description":"This program checks a given validator configuration file for any syntax errors. If no file is specified as a command line option, the default dnsval.conf file is checked.","Process Name":"dt-libval_check_conf","Link":"https:\/\/linux.die.net\/man\/1\/dt-libval_check_conf"}},{"Process":{"Description":"dt-validate is a diagnostic tool built on top of the DNSSEC validator. It takes DOMAIN_NAME as an argument and queries the DNS for that domain name. It outputs the series of responses that were received from the DNS and the DNSSEC validation results for each domain name. An examination of the queries and validation results can help an administrator uncover errors in DNSSEC configuration of DNS zones.","Process Name":"dt-validate","Link":"https:\/\/linux.die.net\/man\/1\/dt-validate"}},{"Process":{"Description":"dt2dv converts a text representation of a TeX DVI file, usually produced by the companion dv2dt(1) utility, back to a binary DVI file. DTL (DVI Text Language) files can be edited, with care, and then restored to DVI form for processing by any TeX DVI driver program. In DTL files, font directory names and font names are preceded by a length field, which must be updated if the names are modified. dvitype(1) can also display a textual representation of DVI files, but in some implementations at least, it cannot be used in batch mode, and its output is not well-suited for conversion back to a DVI file. The format of TeX DVI files is fully described in Donald E. Knuth, TeX: The Program, Addison-Wesley (1986), ISBN 0-201-13437-3, as well as in the dvitype(1) literate program source code. Brief descriptions of the DTL and DVI formats are given in dv2dt(1).","Process Name":"dt2dv","Link":"https:\/\/linux.die.net\/man\/1\/dt2dv"}},{"Process":{"Description":"dtach is a program that emulates the detach feature of screen. It is designed to be transparent and un-intrusive; it avoids interpreting the input and output between attached terminals and the program under its control. Consequently, it works best with full-screen applications such as emacs. dtach is intended for users who want the detach feature of screen without the other overhead of screen. It is tiny, does not use many libraries, and stays out of the way as much as possible. Sessions A session in dtach is a single instance in which a program is running under the control of dtach. The program is disassociated from the original terminal, and is thus protected from your original terminal being disconnected for some reason. Other instances of dtach can attach themselves to a particular session. Input and output is copied between the program running in the dtach session, and the attached terminals. dtach avoids interpreting the communication stream between the program and the attached terminals; it instead relies on the ability of the attached terminals to manage the screen. Sessions are represented by Unix-domain sockets in the filesystem. No other permission checking other than the filesystem access checks is performed. dtach creates a master process that monitors the session socket, the program, and any attached terminals. Modes dtach has several modes of operation. It can create a new session in which a program is executed, or it can attach to an existing session. The first argument specifies which mode dtach should operate in. -a Attach to an existing session. dtach attaches itself to the session specified by <socket>. After the attach is completed, the window size of the current terminal is sent to the master process, and a redraw is also requested. -A Attach to an existing session, or create a new one. dtach first tries to attach to the session specified by <socket> if possible. If the attempt to open the socket fails, dtach tries to create a new session before attaching to it. -c Creates a new session. A new session is created in which the specified program is executed. dtach then tries to attach itself to the newly created session. -n Creates a new session, without attaching to it. A new session is created in which the specified program is executed. dtach does not try to attach to the newly created session, however, and exits instead. Options dtach has a few options that allow you to modify its behavior. Each attaching process can have separate settings for these options, which allows for some flexibility. -e <char> Sets the detach character to <char>. When the detach character is pressed, dtach detaches itself from the current session and exits. The process running in the session is unaffected by the detach. By default, the detach character is set to ^\\ (Ctrl-\\). -E Disables the detach character. dtach does not try to scan input from the terminal for a detach character. The only way to detach from the session is then by sending the attaching process an appropriate signal. -r <method> Sets the redraw method to <method>. The valid methods are none, ctrl_l, or winch. none disables redrawing completely, ctrl_l sends a Ctrl L character to the program if the terminal is in character-at-a-time and no-echo mode, and winch forces a WINCH signal to be sent to the program. When creating a new session, the specified method is used as the default redraw method for the session. If not specified, the ctrl_l method is used. -z Disables processing of the suspend key. Normally, dtach will suspend itself when the suspend key is pressed. With this option, the suspend character is sent to the session instead of being handled by dtach.","Process Name":"dtach","Link":"https:\/\/linux.die.net\/man\/1\/dtach"}},{"Process":{"Description":"dtck checks DNSSEC-Tools data files to determine if the entries are valid. dtck checks the validity of DNSSEC-Tools configuration files, rollrec files, and keyrec files. It does not perform the file checking itself, but runs checking programs specific to each type of data file. A dtck configuration file is consulted to determine the files to check. This file lists the DNSSEC-Tools data files and their types. If a dtck configuration file is not given on the command line, dtck will only check the DNSSEC-Tools configuration file. This is equivalent to running dtconfchk directly.","Process Name":"dtck","Link":"https:\/\/linux.die.net\/man\/1\/dtck"}},{"Process":{"Description":"dtconf displays the key\/value pairs of a DNSSEC-Tools configuration file. If a configuration file isn't specified, the system configuration file will be displayed. Without the -key option, dtconf displays all the key\/value pairs in the configuration file. Comments are never displayed. If the -key option is given, then only that key\/value pair is displayed. If the key isn't defined, then the value will be \"(undefined).\"","Process Name":"dtconf","Link":"https:\/\/linux.die.net\/man\/1\/dtconf"}},{"Process":{"Description":"dtconfchk checks a DNSSEC-Tools configuration file to determine if the entries are valid. If a configuration file isn't specified, the system configuration file will be verified. Without any display options, dtconfchk displays error messages for problems found, followed by a summary line. Display options will increase or decrease the amount of detail about the configuration file's sanity. In all cases, the exit code is the count of errors found in the file. The tests are divided into five groups: key-related checks, zone-related checks, path checks, rollover checks, and miscellaneous checks. The checks in each of these self-explanatory groups are described below. The default_keyrec configuration entry is not checked. This entry specifies the default keyrec file name and isn't necessarily expected to exist in any particular place. Boolean Values The DNSSEC-Tools configuration file has a number of fields that are expected to hold boolean values. The recognized values for booleans are as follows: true values  - 1, true,  t, yes, y\nfalse values - 0, false, f, no,  n Positive values greater than 1 are recognized as true values, but it probably would be best to use 1. Text values that aren't in the set above are not valid and will translate to false values. Key-related Checks The following key-related checks are performed: algorithm Ensure the algorithm field is valid. The acceptable values may be found in the dnssec-keygen man page. ksklength Ensure the ksklength field is valid. The acceptable values may be found in the dnssec-keygen man page. This may also be specified as ksklen. ksklife Ensure the ksklife field is valid. The acceptable values may be found in the defaults.pm man page. zskcount Ensure the zskcount field is valid. The ZSK count must be positive. zsklength Ensure the zsklength field is valid. The acceptable values may be found in the dnssec-keygen man page. This may also be specified as zsklen. zsklife Ensure the zsklife field is valid. The acceptable values may be found in the defaults.pm man page. random Ensure the random field is valid. This file must be a character device file. Zone-related Checks The following zone-related checks are performed: endtime Ensure the endtime field is valid. This value is assumed to be in the \"+NNNNNN\" format. There is a lower limit of two hours. (This is an artificial limit under which it may not make sense to have an end-time.) Path Checks Path checks are performed for several DNSSEC-Tools commands, several BIND commands, and a few miscellaneous files. The following path checks are performed for DNSSEC-Tools commands: genkrf Ensure the genkrf field is valid. If the filename starts with a '\/', the file must be a regular executable file. keyarch Ensure the keyarch field is valid. If the filename starts with a '\/', the file must be a regular executable file. rollchk Ensure the rollchk field is valid. If the filename starts with a '\/', the file must be a regular executable file. rollctl Ensure the rollctl field is valid. If the filename starts with a '\/', the file must be a regular executable file. zonesigner Ensure the zonesigner field is valid. If the filename starts with a '\/', the file must be a regular executable file. The following path checks are performed for BIND tools: keygen Ensure the keygen field is valid. If the filename starts with a '\/', the file must be a regular executable file. rndc Ensure the rndc field is valid. If the filename starts with a '\/', the file must be a regular executable file. zonecheck Ensure the zonecheck field is valid. If the filename starts with a '\/', the file must be a regular executable file. zonesign Ensure the zonesign field is valid. If the filename starts with a '\/', the file must be a regular executable file. The following path checks are performed for miscellaneous files and directories: random Ensure the random field is valid. The file must be a character device file. roll_logfile Ensure the roll_logfile field is a regular file. taresolvconf Ensure the taresolvconf field is a regular file. tatmpdir Ensure the tatmpdir field is a directory. Rollover Daemon Checks The following checks are performed for rollerd values: autosign Ensure that the autosign flag is a valid boolean. log_tz Ensure the log_tz field is either 'gmt' or 'local'. prog_normal prog_ksk1 ... prog_ksk7 prog_zsk1 ... prog_zsk4 Ensure that the rollover phase commands are valid paths. Each of these fields is a semicolon-separated command list. The file checks are run on the commands to ensure the commands exist and are executable. Options and arguments to the commands are ignored, as is the default keyword. roll_loadzone Ensure that the roll_loadzone flag is a valid boolean. roll_logfile Ensure that the log file for the rollerd is valid. If the file exists, it must be a regular file. roll_loglevel Ensure that the logging level for the rollerd is reasonable. The log level must be one of the following text or numeric values: tmi        1       Overly verbose informational messages.\nexpire     3       A verbose countdown of zone expiration is given.\ninfo       4       Informational messages.\nphase      6       Current state of zone.\nerr        8       Error messages.\nfatal      9       Fatal errors. Specifying a particular log level will causes messages of a higher numeric value to also be displayed. roll_sleeptime Ensure that the rollerd's sleep-time is reasonable. rollerd's sleep-time must be at least one minute. roll_username Ensure that the username for rollerd is valid. If it's a username, it must be translatable to a uid; if it's a uid, it must translate to a known username. zone_errors Ensure that the zone error count is numeric and 0 or greater. NSEC3 Checks The following checks are performed for NSEC3-related values: nsec3iter Ensure that the nsec3iter iteration count falls within the range used by dnssec-signzone. The current values are from 1 - 65535. nsec3optout Ensure that the nsec3optout flag is a valid boolean. usensec3 Ensure that the usensec3 flag is a valid boolean. Miscellaneous Checks The following miscellaneous checks are performed: admin-email Ensure that the admin-email field is defined and has a value. dtconfchk does not try to validate the email address itself. archivedir Ensure that the archivedir directory is actually a directory. This check is only performed if the savekeys flag is set on. entropy_msg Ensure that the entropy_msg flag is a valid boolean. savekeys Ensure that the savekeys flag is a valid boolean. If this flag is set to 1, then the archivedir field will also be checked. usegui Ensure that the usegui flag is a valid boolean.","Process Name":"dtconfchk","Link":"https:\/\/linux.die.net\/man\/1\/dtconfchk"}},{"Process":{"Description":"dtd2xsd generates an XML schema document from a document type definition (DTD). Right now you have to specify instance XML file that references or contains DTD. DTD itself is not readable with this tiny tool. By default, it outputs resulting XML schema to console. If optional-xsdfile parameter is specified, it outputs the result to the specified file.","Process Name":"dtd2xsd","Link":"https:\/\/linux.die.net\/man\/1\/dtd2xsd"}},{"Process":{"Description":"The dtdefs program displays defaults defined for DNSSEC-Tools.","Process Name":"dtdefs","Link":"https:\/\/linux.die.net\/man\/1\/dtdefs"}},{"Process":{"Description":"dtest is a simple test used to exercise and verify the uDAPL interfaces. At least two instantiations of the test must be run. One acts as the server and the other the client. The server side of the test, once invoked listens for connection requests, until timing out or killed. Upon receipt of a cd connection request, the connection is established, the server and client sides exchange information necessary to perform RDMA writes and reads.","Process Name":"dtest","Link":"https:\/\/linux.die.net\/man\/1\/dtest"}},{"Process":{"Description":"dtest is a simple test used to exercise and verify the uDAPL interfaces. At least two instantiations of the test must be run. One acts as the server and the other the client. The server side of the test, once invoked listens for connection requests, until timing out or killed. Upon receipt of a cd connection request, the connection is established, the server and client sides exchange information necessary to perform RDMA writes and reads.","Process Name":"dtest1","Link":"https:\/\/linux.die.net\/man\/1\/dtest1"}},{"Process":{"Description":"The dtinitconf program initializes the DNSSEC-Tools configuration file. By default, the actual configuration file will be created, though the created file can be specified by the user. Existing files, whether the default or one specified by the user, will not be overwritten unless specifically directed by the user. Each configuration field can be individually specified on the command line. The user will also be prompted for the fields, with default values taken from the DNSSEC-Tools defaults.pm module. If the -noprompt option is given, then a default configuration file (modulo command-line arguments) will be created. Configuration entries are created for several BIND programs. Several locations on the system are searched to find the locations of these programs. First, the directories in the path environment variable are checked; the names of any directories that contain the BIND programs are saved. Next, several common locations for BIND programs are checked; again, the names of directories that contain the BIND programs are saved. After collecting these directories, the user is presented with this list and may choose to use whichever set is desired. If no directories are found that contain the BIND programs, the user is prompted for the proper location. If the configuration file's parent directory does not exist, then an attempt is made to create the directory. The new directory's ownership will be set to root for the owner and dnssec for the group, assuming the dnssec group exists. Writability checks for the directory will not be performed if the -outfile option is given.","Process Name":"dtinitconf","Link":"https:\/\/linux.die.net\/man\/1\/dtinitconf"}},{"Process":{"Description":"The dtrace command converts probe descriptions defined in file.d into a probe header file via the -h option or a probe description file via the -G option.","Process Name":"dtrace","Link":"https:\/\/linux.die.net\/man\/1\/dtrace"}},{"Process":{"Description":"dtrealms manages multiple distinct DNSSEC-Tools rollover environments running simultaneously. Each rollover environment, called a realm, is defined in a realms file. dtrealms uses this file to determine how the rollover environment must be initialized such that it can run independently of the other rollover environments on a particular system. This is useful for such things as managing very large collections of zones, segregating customer zones, and software tests. The realms file may be created with realminit. Currently, the distinct environment for each realm must be created manually. It is hoped that a tool will soon be available to assist with creating each realm's environment. dtrealms isn't necessary for running multiple realms. However, it does make it easier to manage multiple realms running consecutively.","Process Name":"dtrealms","Link":"https:\/\/linux.die.net\/man\/1\/dtrealms"}},{"Process":{"Description":"'dcadec' plays DTS Coherent Acoustics audio streams. Input is from stdin if no file is given. -h display help and available audio modes -s use program stream demultiplexer, track 0-7 or 0x80-0x87 -t pid use transport stream demultiplexer, pid 0x10-0x1ffe -c use c implementation, disables all accelerations -r disable dynamic range compression -o mode use audio output driver 'mode'. A list of modes is available using the -h option.","Process Name":"dtsdec","Link":"https:\/\/linux.die.net\/man\/1\/dtsdec"}},{"Process":{"Description":"Summarize disk usage of each FILE, recursively for directories. Mandatory arguments to long options are mandatory for short options too. -a, --all write counts for all files, not just directories --apparent-size print apparent sizes, rather than disk usage; although the apparent size is usually smaller, it may be larger due to holes in ('sparse') files, internal fragmentation, indirect blocks, and the like -B, --block-size= SIZE use SIZE-byte blocks -b, --bytes equivalent to '--apparent-size --block-size= 1' -c, --total produce a grand total -D, --dereference-args dereference only symlinks that are listed on the command line --files0-from= F summarize disk usage of the NUL-terminated file names specified in file F; If F is - then read names from standard input -H equivalent to --dereference-args ( -D) -h, --human-readable print sizes in human readable format (e.g., 1K 234M 2G) --si like -h, but use powers of 1000 not 1024 -k like --block-size= 1K -l, --count-links count sizes many times if hard linked -m like --block-size= 1M -L, --dereference dereference all symbolic links -P, --no-dereference don't follow any symbolic links (this is the default) -0, --null end each output line with 0 byte rather than newline -S, --separate-dirs do not include size of subdirectories -s, --summarize display only a total for each argument -x, --one-file-system skip directories on different file systems -X, --exclude-from= FILE exclude files that match any pattern in FILE --exclude= PATTERN exclude files that match PATTERN --max-depth= N print the total for a directory (or file, with --all) only if it is N or fewer levels below the command line argument; --max-depth= 0 is the same as --summarize --time show time of the last modification of any file in the directory, or any of its subdirectories --time= WORD show time as WORD instead of modification time: atime, access, use, ctime or status --time-style= STYLE show times using style STYLE: full-iso, long-iso, iso, +FORMAT FORMAT is interpreted like 'date' --help display this help and exit --version output version information and exit Display values are in units of the first available SIZE from --block-size, and the DU_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables. Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set). SIZE may be (or may be an integer optionally followed by) one of following: KB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.","Process Name":"du","Link":"https:\/\/linux.die.net\/man\/1\/du"}},{"Process":{"Description":"dubdv reads the audio from a WAV file or the OSS DSP device and overwrites the existing audio in a raw DV file or stream. --version show dubdv version number. -v, --verbose show encoder statistics \/ status information. -a, --audio-input= filter-name Choose audio-input-filter: [none, >wav<, dsp] WAV is the default audio_input format. -o, --output= filter-name Choose output-filter: [>raw<] -t, --truncate truncate output at end of DV input. -r, --repeat= count repeat the first video frame count times. This option does not dub audio into the repeated frame. Help Options - ?, --help Show help message. --usage Display brief usage message.","Process Name":"dubdv","Link":"https:\/\/linux.die.net\/man\/1\/dubdv"}},{"Process":{"Description":"dump-mixers just does what the name suggests: it dumps the current (oss) mixer settings to stdout.","Process Name":"dump-mixers","Link":"https:\/\/linux.die.net\/man\/1\/dump-mixers"}},{"Process":{"Description":"Dumpcap is a network traffic dump tool. It lets you capture packet data from a live network and write the packets to a file. Dumpcap's native capture file format is libpcap format, which is also the format used by Wireshark, tcpdump and various other tools. When the -n option is specified, the output file is written in the new pcapng format. Without any options set it will use the pcap library to capture traffic from the first available network interface and writes the received raw packet data, along with the packets' time stamps into a libpcap file. If the -w option is not specified, Dumpcap writes to a newly created libpcap file with a randomly chosen name. If the -w option is specified, Dumpcap writes to the file specified by that option. Packet capturing is performed with the pcap library. The capture filter syntax follows the rules of the pcap library.","Process Name":"dumpcap","Link":"https:\/\/linux.die.net\/man\/1\/dumpcap"}},{"Process":{"Description":"dumpelf is a user-space utility to dump all of the internal ELF structures into the equivalent C structures for fun debugging and\/or reference purposes.","Process Name":"dumpelf","Link":"https:\/\/linux.die.net\/man\/1\/dumpelf"}},{"Process":{"Description":"dumpiso listens on a selected range of channels and dumps all received packets into the file FILE or, if not given, to standard output. While dumping, the current number of received packets is written to standard error and updated with every packet. It uses a simple file format for the dumps which is described in isodump(5). The dumped packets can be sent out again with sendiso(1).","Process Name":"dumpiso","Link":"https:\/\/linux.die.net\/man\/1\/dumpiso"}},{"Process":{"Description":"dumpkeymap prints a textual representation of each Apple\/ NeXT .keymapping file mentioned on the command-line. If no files are mentioned and if the local machine is an Apple or NeXT installation, then the key mapping currently in use by the WindowServer and the AppKit is printed instead.","Process Name":"dumpkeymap","Link":"https:\/\/linux.die.net\/man\/1\/dumpkeymap"}},{"Process":{"Description":"dumpkeys writes, to the standard output, the current contents of the keyboard driver's translation tables, in the format specified by keymaps(5). Using the various options, the format of the output can be controlled and also other information from the kernel and the programs dumpkeys(1) and loadkeys(1) can be obtained.","Process Name":"dumpkeys","Link":"https:\/\/linux.die.net\/man\/1\/dumpkeys"}},{"Process":{"Description":"The chipset drivers of svgalib inquire the mode of the graphic card when the application is started and restore it when the svgalib application quits. dumpreg prints this information to stdout. This is useful for debugging or adding modes to a device driver. For example you can use Xfree86 to setup a given mode timing, then run dumpreg and use it's stdout to make your chipset driver use exactly this timing. However, the recent change of svgalib to hunt an own free virtual console does not allow this, because it will make Xfree86 return to textmode first. You can avoid this by using the second form where N is the number of the virtual console on which Xfree86 runs (usually 7) as root.","Process Name":"dumpreg","Link":"https:\/\/linux.die.net\/man\/1\/dumpreg"}},{"Process":{"Description":"DUN daemon","Process Name":"dund","Link":"https:\/\/linux.die.net\/man\/1\/dund"}},{"Process":{"Description":"dune \/ white_dune is a graphical editor for the Virtual Reality Modeling Language (VRML97), ISO\/IEC 14772-1:1997. Additionally it has support for the NurbsSurface Node described in VRML97 Amendment 1. white_dune can also load and store VRML encoded X3DV files It can export to VRML97 compatible parts of X3D classic VRML encoding. It can also load and store X3D files with XML encoding, if configured to use a commandline vrml97\/x3d translator. A filename of - means standart input. Dune has some basic support for stereographic view usually with shutterglases in OpenGL \"quadbuffer\" mode. When used with the conversionoptions or the -illegal2vrml commandline argument, white_dune is a non graphical commandline program. The conversionoptions are used to convert the VRML\/X3DV file into a other 3D graphics format. Currently, some of the conversion options will need to open and close temporay a graphics window, so the usage under Linux\/UNIX\/MacOSX will require the usage of the Xwindow system, e.g. by using the Xvfb X11 server program. The -illegal2vrml option is used to repair VRML97 files with illegal extensions. See the illegal2vrml(1) manpage for more information.","Process Name":"dune","Link":"https:\/\/linux.die.net\/man\/1\/dune"}},{"Process":{"Description":"Duplicity incrementally backs up files and directory by encrypting tar-format volumes with GnuPG and uploading them to a remote (or local) file server. Currently local, ftp, sftp\/scp, rsync, WebDAV, WebDAVs, Google Docs, HSi and Amazon S3 backends are available. Because duplicity uses librsync, the incremental archives are space efficient and only record the parts of files that have changed since the last backup. Currently duplicity supports deleted files, full Unix permissions, directories, symbolic links, fifos, etc., but not hard links. If you are backing up the root directory \/, remember to --exclude \/proc, or else duplicity will probably crash on the weird stuff in there.","Process Name":"duplicity","Link":"https:\/\/linux.die.net\/man\/1\/duplicity"}},{"Process":{"Description":"Duply deals as a wrapper for the mighty duplicity magic. It simplifies running duplicity with cron or on command line by: \u2022 keeping recurring settings in profiles per backup job \u2022 enabling batch operations eg. backup_verify_purge \u2022 executing pre\/post scripts for every command \u2022 precondition checking for flawless duplicity operation For each backup job one configuration profile must be created. The profile folder will be stored under '~\/.duply\/<profile>' (where ~ is the current users home directory). Hint: If the folder '\/etc\/duply' exists, the profiles for the super user root will be searched & created there.","Process Name":"duply","Link":"https:\/\/linux.die.net\/man\/1\/duply"}},{"Process":{"Description":"dv2dt converts a binary TeX DVI file to an editable text file in DTL (DVI Text Language) format. The companion dt2dv(1) utility can convert the DTL file back to a binary DVI file.","Process Name":"dv2dt","Link":"https:\/\/linux.die.net\/man\/1\/dv2dt"}},{"Process":{"Description":"dvconnect captures raw DV streams from or sends raw DV streams to the Linux IEEE 1394 video1394 device. --version show dvconnect version number. -s, --send send data instead of capturing. -v, --verbose show status information while receiving \/ sending. -c, --channel= number channel to send \/ receive on (range: 0 - 63, default = 63). -k, --kbuffers= number number of kernel video1394 frame buffers to use. default = 8. --start-frame= count start at count frame (defaults to 0). -e, --end-frame= count end at count frame (defaults to unlimited). --cip-n-ntsc= number cip n ntsc timing counter (default: 2436). --cip-d-ntsc= number cip d ntsc timing counter (default: 38400). --syt-offset= number syt offset (default: 10000 range: 10000-26000). -b, --buffers= number max number of file io thread buffers to use. default = 250. -u, --underrun-data= filename file with the frame to send in case of underruns. -d, --device= filename Specify the video1394 device (default \/dev\/video1394\/0). Help Options - ?, --help Show help message. --usage Display brief usage message.","Process Name":"dvconnect","Link":"https:\/\/linux.die.net\/man\/1\/dvconnect"}},{"Process":{"Description":"dvcont is a command line tool to send control commands via an IEEE1394 link to a device that implements the AV\/C specifications by the 1394 Trade Association. Or for the non-techies: dvcont lets you remote control your DV camera via a Firewire cable. The following commands are understood: dev <number> Select device number on chain to use. (dvcont tries to automatically detect the camera. Use the dev command BEFORE any other commands for manual control.) play Tell the camera to play. If already playing, it toggles slow-motion. reverse Tell the camera to play in reverse. If already playing, it toggles slow-motion. trickplay < -14 to +14 > Tell the camera to play at various speeds. 0 = forward play, -14 = fastest reverse, -8 = 1X reverse, -1 = slowest reverse, 1 = slowest forward, 8 = 1X forward, 14 = fastest forward. (Not supported by all cameras.) stop Tell the camera to stop playing. rewind Tell the camera to rewind. (Use in stop or play mode.) ff Tell the camera to fast forward. (Use in stop or play mode.) pause Tell the camera to toggle pause play. next Tell the camera to go to the next frame. (Use in pause mode.) nextindex Tell the camera to search for the next scene. (Use in pause or play mode.) prev Tell the camera to go to the previous frame. (Use in pause mode) previndex Tell the camera to search for the previous scene. (Use in pause or play mode) record Tell the camera to record. (Use with caution!) eject Tell the camera to eject the tape. (Not supported by all cameras.) timecode Report the timecode on tape in the format HH:MM:SS:FF (hours, minutes, seconds, intra-second frames). seek <timecode> Tell the camera to go to the timecode, given in format HH:MM:SS:FF as above. status Report the status of the device. pluginfo Report available plugs. verbose Tell the program to tell you debug info. version Tell the program to tell you the program version. help Tell the program to show you a help screen.","Process Name":"dvcont","Link":"https:\/\/linux.die.net\/man\/1\/dvcont"}},{"Process":{"Description":"","Process Name":"dvdauthor","Link":"https:\/\/linux.die.net\/man\/1\/dvdauthor"}},{"Process":{"Description":"dvdcpy copies the selected titles and\/or menu structure of a DVD inserted into device. The DVD does not have to be mounted. The options are as follows: -h, --help Display usage and quit. -m, --menu Selects menu structure for copy. -o, --output output Saves result into directory output. If not specified, default name is backup. The directory is created as needed. -t, --title title Selects title number title for copy.","Process Name":"dvdcpy","Link":"https:\/\/linux.die.net\/man\/1\/dvdcpy"}},{"Process":{"Description":"dvddirdel deletes a previously authored DVD directory structure in DIR","Process Name":"dvddirdel","Link":"https:\/\/linux.die.net\/man\/1\/dvddirdel"}},{"Process":{"Description":"DVDISASTER provides a margin of safety against data loss on CD and DVD media caused by scratches or aging media. It creates error correction data which is used to recover unreadable sectors if the disc becomes damaged at a later time.","Process Name":"dvdisaster","Link":"https:\/\/linux.die.net\/man\/1\/dvdisaster"}},{"Process":{"Description":"","Process Name":"dvdrecord","Link":"https:\/\/linux.die.net\/man\/1\/dvdrecord"}},{"Process":{"Description":"dvd::rip is an easy to use but nevertheless feature rich DVD copy program for Linux and other Unices. It's written in Perl and uses Gtk for the GUI part. Internally the Linux video processing tool transcode is used for the most DVD and generally video \/ audio related purposes. You'll find all information regarding installation and usage of dvd::rip in the README file shipped with the distribution or on the dvd::rip homepage: http:\/\/www.exit1.org\/dvdrip\/","Process Name":"dvdrip","Link":"https:\/\/linux.die.net\/man\/1\/dvdrip"}},{"Process":{"Description":"","Process Name":"dvdrip-progress","Link":"https:\/\/linux.die.net\/man\/1\/dvdrip-progress"}},{"Process":{"Description":"","Process Name":"dvdrip-splitpipe","Link":"https:\/\/linux.die.net\/man\/1\/dvdrip-splitpipe"}},{"Process":{"Description":"dvdunauthor removes the DVD-Video file structure","Process Name":"dvdunauthor","Link":"https:\/\/linux.die.net\/man\/1\/dvdunauthor"}},{"Process":{"Description":"This program extracts chapter information from a DVD and displays it in a form usable by ogmmerge(1). -t, --title num Use title ' num'. Default is 1. -c, --chapter start[- end] Only output the given range of chapters and adjust all timecodes so that they start at 0. The default is to output all chapters. -v Increase verbosity -V Show version information -h Show help","Process Name":"dvdxchap","Link":"https:\/\/linux.die.net\/man\/1\/dvdxchap"}},{"Process":{"Description":"dvgrab is a program that captures DV or HDV (MPEG2-TS) video and audio data from digital camcorders via FireWire (IEEE 1394). The data is stored in one or several files and can later be processed by video editing software. dvgrab can remote control the camcorder but it does not show the video's content on screen. dvgrab also supports UVC (USB Video Class) compliant DV devices using Linux kernel module uvcvideo, which is a V4L2 driver. In this mode, there is no AV\/C VTR control and therefore interactive mode is almost useless. interactive feature is The base argument is used to construct the filename to store video data: base-num.ext. num is a running number starting from 001, and ext is the file name extension specifying the file format used, e.g. avi. A different naming scheme is used whenever the -timestamp, -timecode, or -timesys is given (see below). If base is a full filename including extension, then dvgrab attempts to determine the output file format from the extension, but it still inserts num. The default value for base is \"dvgrab-\". If you specify a trailing '-' then the format is forced to raw DV or HDV and sent to stdout. dvgrab will also output raw DV or HDV to stdout while capturing to a file if stdout is piped or redirected. You can use dvgrab's powerful file writing capabilities with other programs that produce raw DV or HDV. Using the -stdin option and if dvgrab detects that it is on the receiving end of a pipe and it is not in interactive mode, then it will try to read raw DV or HDV on stdin.","Process Name":"dvgrab","Link":"https:\/\/linux.die.net\/man\/1\/dvgrab"}},{"Process":{"Description":"dvi2fax uses dvips(1) to convert a TeX DVI file to PostScript, then gs(1) to convert the PostScript to G3 fax file format.","Process Name":"dvi2fax","Link":"https:\/\/linux.die.net\/man\/1\/dvi2fax"}},{"Process":{"Description":"Dvibook rearranges pages from a DVI file produced by TeX into ''signatures'' for printing books or booklets, creating a new DVI file usable by any of the TeX conversion programs. The -s option selects the size of signature which will be used. The signature size is the number of sides which will be folded and bound together; the number given should be a multiple of four. The default is to use one signature for the whole file. Extra blank sides will be added if the file does not contain a multiple of four pages. Dvibook normally prints the page numbers of the pages rearranged; the -q option suppresses this.","Process Name":"dvibook","Link":"https:\/\/linux.die.net\/man\/1\/dvibook"}},{"Process":{"Description":"Dviconcat concatenates the named files (or standard input, if no file names are given) onto the standard output or the given outfile, creating a new DVI file usable by any of the TeX conversion programs, or even by dviconcat itself. The magnification of the output file is the same as that of the first input file unless the -m option is given. When dviconcat changes the magnification of any input file, it prints a warning to this effect.","Process Name":"dviconcat","Link":"https:\/\/linux.die.net\/man\/1\/dviconcat"}},{"Process":{"Description":"This manual page is not meant to be exhaustive. The complete documentation for this version of TX can be found in the info file or manual Web2C: A TeX implementation. dvicopy reads a DVI file, expands any references to virtual fonts to base fonts, and writes the resulting DVI file. Thus you can use virtual fonts even if your DVI processor does not support them, by passing the documents through dvicopy first.","Process Name":"dvicopy","Link":"https:\/\/linux.die.net\/man\/1\/dvicopy"}},{"Process":{"Description":"Copyright dvidvi 1.0, Copyright © 1988-91, Radical Eye Software Introduction The dvidvi program converts a dvi file into another dvi file, with perhaps certain changes. Parameters -f n page n is first page selected -l n page n is last page selected -n n select at most n pages. Notice that n is the number of pages selected, independently of the number of pages actually contained in a sheet -i { n1..n2 | n1 }[,...] include pages (ranges allowed). When this option is used, ONLY the specified pages are selected. However, we can exclude from these pages with the option -x -x { n1..n2 | n1 }[,...] exclude pages (ranges allowed) -q work in quiet mode, that is do not print in the screen messages of how the work is being done. -r reverse the order of the pages. The page numbers for the above options -f -l -i and -x can be specified in different ways. 1) If a number n is given, it is interpreted as the n'th page from the beginning of the .dvi file. Of course, this number is independent of the page number assigned by TeX. 2) TeX page numbers are those who are actually written in the page; these page numbers can be modified, for example, by using the TeX commands \\pagenumbering, \\setcounter{page}{n}, and \\addtocounter{page}{n}. A TeX page number can be specified by preceding the number n with the character @. Thus, if you specify -f @25 -l @30 you select the pages between 25 and 30, these numbers being those assigned by TeX. 3) However, several pages can have the same TeX page number in a .dvi file. For example, the introductory pages in a book are numbered i, ii, and so on until the first chapter begins and then, the pages are numbered 1, 2, etc. In this case, the pages numbered i and 1 in the .dvi file have the same TeX page number. If you want to select for example the second occurrence of the page numbered 1, you can specify a page number as (@2)1. Thus @1 is equivalent to (@1)1. For example, if you specify -f (@2)1 -l(@2)10 you select the pages between 1 and 10 of the first chapter, not the introductory pages between i and x. There is another parameter that tells dvidvi how you want to change page layout and specifications. This is the -m parameter. * The number preceding the colon is the modulo value. Everything will be done in chunks of pages this big. If there is no colon, than the default value is assumed to be one. The last chunk of pages is padded with as many blank pages as necessary. * Following the colon is a comma-separated list of page numbers. These page numbers are with respect to the current chunk of pages, and must lie in the range zero to the modulo value less one. If a negative sign precedes the number, then the page is taken from the mirror chunk; if there are m chunks, then the mirror chunk of chunk n is the chunk numbered m-n-1. Put simply, it is the chunk numbered the same, only from the end. This can be used to reverse pages. If no number is given, the page number defaults to 1. * Following each page number is an optional offset value in parenthesis, which consists of a pair of comma-separated dimensions. Each dimension is a decimal number with an optional unit of measure. The default unit of measure is inches, or the last unit of measure used. All units are in true dimensions. Allowable units of measure are the same that TeX allows: in, mm, cm, pt, pc, dd, and cc.","Process Name":"dvidvi","Link":"https:\/\/linux.die.net\/man\/1\/dvidvi"}},{"Process":{"Description":"This program makes PNG and\/or GIF graphics from DVI files as obtained from TeX and its relatives. If GIF support is enabled, GIF output is chosen by using the dvigif binary or with the --gif option. The benefits of dvipng\/dvigif include \u2022 Speed. It is a very fast bitmap-rendering code for DVI files, which makes it suitable for generating large amounts of images on-the-fly, as needed in preview-latex, WeBWorK and others. \u2022 It does not read the postamble, so it can be started before TeX finishes. There is a --follow switch that makes dvipng wait at end-of-file for further output, unless it finds the POST marker that indicates the end of the DVI . \u2022 Interactive query of options. dvipng can read options interactively through stdin, and all options are usable. It is even possible to change the input file through this interface. \u2022 Supports PK , VF , PostScript Type1, and TrueType fonts, subfonts (i.e., as used in CJK-LaTeX), color specials, and inclusion of PostScript, PNG , JPEG or GIF images. \u2022 and more...","Process Name":"dvigif","Link":"https:\/\/linux.die.net\/man\/1\/dvigif"}},{"Process":{"Description":"dvihp translates the given dvifile to Hewlett-Packard PCL using dvicopy(1) then $DVILJ (dvilj4 by default). In the absence of other options, pipe the PCL to $SPOOL (lpr by default).","Process Name":"dvihp","Link":"https:\/\/linux.die.net\/man\/1\/dvihp"}},{"Process":{"Description":"Dvilj and siblings convert TeX-output .dvi files into PCL (the Hewlett-Packard Printer Control Language) commands suitable for printing on a HP LaserJet+, HP LaserJet IIP (using dvilj2p), HP LaserJet 4 (using dvilj4), and fully compatible printers. Dvilj4 also provides support for the builtin Intellifont and TrueType fonts; TFM and VF files are provided in the distribution. Virtual fonts are not supported directly by Dvilj, so you must run dvicopy(1) first, or otherwise expand the virtual fonts All programs are generated from one source file dvi2xx.c. They are usually called via a shell script or as a line printer filter. One such script, dvihp, is included in the distribution. It provides command-line options similar to those of dvips(1).","Process Name":"dvilj","Link":"https:\/\/linux.die.net\/man\/1\/dvilj"}},{"Process":{"Description":"Dvilj and siblings convert TeX-output .dvi files into PCL (the Hewlett-Packard Printer Control Language) commands suitable for printing on a HP LaserJet+, HP LaserJet IIP (using dvilj2p), HP LaserJet 4 (using dvilj4), and fully compatible printers. Dvilj4 also provides support for the builtin Intellifont and TrueType fonts; TFM and VF files are provided in the distribution. Virtual fonts are not supported directly by Dvilj, so you must run dvicopy(1) first, or otherwise expand the virtual fonts All programs are generated from one source file dvi2xx.c. They are usually called via a shell script or as a line printer filter. One such script, dvihp, is included in the distribution. It provides command-line options similar to those of dvips(1).","Process Name":"dvilj2p","Link":"https:\/\/linux.die.net\/man\/1\/dvilj2p"}},{"Process":{"Description":"Dvilj and siblings convert TeX-output .dvi files into PCL (the Hewlett-Packard Printer Control Language) commands suitable for printing on a HP LaserJet+, HP LaserJet IIP (using dvilj2p), HP LaserJet 4 (using dvilj4), and fully compatible printers. Dvilj4 also provides support for the builtin Intellifont and TrueType fonts; TFM and VF files are provided in the distribution. Virtual fonts are not supported directly by Dvilj, so you must run dvicopy(1) first, or otherwise expand the virtual fonts All programs are generated from one source file dvi2xx.c. They are usually called via a shell script or as a line printer filter. One such script, dvihp, is included in the distribution. It provides command-line options similar to those of dvips(1).","Process Name":"dvilj4","Link":"https:\/\/linux.die.net\/man\/1\/dvilj4"}},{"Process":{"Description":"Dvilj and siblings convert TeX-output .dvi files into PCL (the Hewlett-Packard Printer Control Language) commands suitable for printing on a HP LaserJet+, HP LaserJet IIP (using dvilj2p), HP LaserJet 4 (using dvilj4), and fully compatible printers. Dvilj4 also provides support for the builtin Intellifont and TrueType fonts; TFM and VF files are provided in the distribution. Virtual fonts are not supported directly by Dvilj, so you must run dvicopy(1) first, or otherwise expand the virtual fonts All programs are generated from one source file dvi2xx.c. They are usually called via a shell script or as a line printer filter. One such script, dvihp, is included in the distribution. It provides command-line options similar to those of dvips(1).","Process Name":"dvilj4l","Link":"https:\/\/linux.die.net\/man\/1\/dvilj4l"}},{"Process":{"Description":"Dvilj and siblings convert TeX-output .dvi files into PCL (the Hewlett-Packard Printer Control Language) commands suitable for printing on a HP LaserJet+, HP LaserJet IIP (using dvilj2p), HP LaserJet 4 (using dvilj4), and fully compatible printers. Dvilj4 also provides support for the builtin Intellifont and TrueType fonts; TFM and VF files are provided in the distribution. Virtual fonts are not supported directly by Dvilj, so you must run dvicopy(1) first, or otherwise expand the virtual fonts All programs are generated from one source file dvi2xx.c. They are usually called via a shell script or as a line printer filter. One such script, dvihp, is included in the distribution. It provides command-line options similar to those of dvips(1).","Process Name":"dvilj6","Link":"https:\/\/linux.die.net\/man\/1\/dvilj6"}},{"Process":{"Description":"This script invokes dvips(1) with the -q option, and pipes its output into gs(1) with the following options: -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite as well as -sOutputFile and any options from the command-line.","Process Name":"dvipdf","Link":"https:\/\/linux.die.net\/man\/1\/dvipdf"}},{"Process":{"Description":"The program dvipdfm generates a PDF file from a DVI file. DVI files are the output format produced by TeX. Output from groff can be converted to DVI format using grodvi. The program dvipdfm recognizes several commonly used \\special commands, which are extensions to the DVI format. Specifically, it understands color specials, papersize specials, tpic specials (which allow it to be used with pic), hypertex specials, and some PostScript specials. These extensions allow documents to contain color, figures, and hyperlinks. The program tries to mimic the behavior of dvips so that many macro packages produced for use with dvips will work with dvipdfm. Dvipdfm understands its own specific \\special commands to allow access to PDF features such as annotations and bookmarks. For more details, consult the Dvipdfm User's Manual, which is distributed with dvipdfm.","Process Name":"dvipdfm","Link":"https:\/\/linux.die.net\/man\/1\/dvipdfm"}},{"Process":{"Description":"dvipdft creates thumbnail pictures of the pages in your file and subsequently runs dvipdfm to create a PDF file with these thumbnails.","Process Name":"dvipdft","Link":"https:\/\/linux.die.net\/man\/1\/dvipdft"}},{"Process":{"Description":"This program makes PNG and\/or GIF graphics from DVI files as obtained from TeX and its relatives. If GIF support is enabled, GIF output is chosen by using the dvigif binary or with the --gif option. The benefits of dvipng\/dvigif include \u2022 Speed. It is a very fast bitmap-rendering code for DVI files, which makes it suitable for generating large amounts of images on-the-fly, as needed in preview-latex, WeBWorK and others. \u2022 It does not read the postamble, so it can be started before TeX finishes. There is a --follow switch that makes dvipng wait at end-of-file for further output, unless it finds the POST marker that indicates the end of the DVI . \u2022 Interactive query of options. dvipng can read options interactively through stdin, and all options are usable. It is even possible to change the input file through this interface. \u2022 Supports PK , VF , PostScript Type1, and TrueType fonts, subfonts (i.e., as used in CJK-LaTeX), color specials, and inclusion of PostScript, PNG , JPEG or GIF images. \u2022 and more...","Process Name":"dvipng","Link":"https:\/\/linux.die.net\/man\/1\/dvipng"}},{"Process":{"Description":"dvipos parses a DVI file looking for pos: specials. It currently recognizes pos:pxy, pos:pxywhd, pos:pxyplus, pos:begbox, pos:endbox, pos:beglines, and pos:endlines. It then outputs the information from those specials along with information that only a DVI postprocessor could determine, such as the current x and y location. The output looks like: \\pospxywhd{text:54}{54}{10663sp}{8535sp}{21326sp}{34081sp}{0sp} and is suitable for including in a tex(1) or pdftex(1) auxilliary file, such as document.tuo, to be read in by the next run of the tex(1) or similar typesetting engine.","Process Name":"dvipos","Link":"https:\/\/linux.die.net\/man\/1\/dvipos"}},{"Process":{"Description":"THIS MAN PAGE IS OBSOLETE! See the Texinfo documentation instead. You can read it either in Emacs or with the standalone info program which comes with the GNU texinfo distribution as prep.ai.mit.edu:pub\/gnu\/texinfo*.tar.gz. The program dvips takes a DVI file file[.dvi] produced by TeX (or by some other processor such as GFtoDVI) and converts it to PostScript, normally sending the result directly to the (laser)printer. The DVI file may be specified without the .dvi extension. Fonts used may either be resident in the printer or defined as bitmaps in PK files, or a 'virtual' combination of both. If the mktexpk program is installed, dvips will automatically invoke METAFONT to generate fonts that don't already exist. For more information, see the Texinfo manual dvips.texi, which should be installed somewhere on your system, hopefully accessible through the standard Info tree.","Process Name":"dvips","Link":"https:\/\/linux.die.net\/man\/1\/dvips"}},{"Process":{"Description":"dvired behaves like dvips, except for the fact that two logical pages are put onto each physical sheet of paper. For options, see dvips(1). This program only interprets the following options: -o file - redirect output into file. -P printer - direct output to printer. -f - direct output to stdout. Any other option is passed directly to dvips.","Process Name":"dvired","Link":"https:\/\/linux.die.net\/man\/1\/dvired"}},{"Process":{"Description":"Dviselect selects pages from a DVI file produced by TeX, creating a new DVI file usable by any of the TeX conversion programs, or even by dviselect itself. A range is a string of the form even, odd, or first:last where both first and last are optional numeric strings, with negative numbers indicated by a leading underscore character ''_''. If both first and last are omitted, the colon may also be omitted, or may be replaced with an asterisk ''*''. A page range is a list of ranges separated by periods. A list of pages is described by a set of page ranges separated by commas and\/or white space. Dviselect actually looks at the ten count variables that TeX writes; the first of these (\\count0) is the page number, with \\count1 through \\count9 having varied uses depending on which macro packages are in use. (Typically \\count1 might be a chapter or section number.) A page is included in dviselect's output if all its \\count values match any one of the ranges listed on the command line. For example, the command ''dviselect *.1,35:'' might select everything in chapter 1, as well as pages 35 and up. ''dviselect 10:30'' would select pages 10 through 30 (inclusive). '':43'' means everything up to and including page 43 (including negative-numbered pages). To get all even-numbered pages, use ''even''; to get all odd-numbered pages, use ''odd''. If a Table of Contents has negative page numbers, '':_1'' will select it. Note that ''*'' must be quoted from the shell; the empty string is more convenient to use, if harder to read. Instead of \\count values, dviselect can also select by ''absolute page number'', where the first page is page 1, the second page 2, and so forth. Absolute page numbers are indicated by a leading equal sign ''=''. Ranges of absolute pages are also allowed: ''dviselect =3:7'' will extract the third through seventh pages. Dot separators are not legal in absolute ranges, and there are no negative absolute page numbers. Even\/odd specifiers, however, are legal; ''dviselect =even'' selects every other page, starting with the second. More precisely, an asterisk or an empty string implies no limit; an equal sign means absolute page number rather than \\counts; a leading colon means everything up to and including the given page; a trailing colon means everything from the given page on; the word ''even'' means only even values shall be accepted; the word ''odd'' means only odd values shall be accepted; and a period indicates that the next \\count should be examined. If fewer than 10 ranges are specified, the remaining \\counts are left unrestricted (that is, ''1:5'' and ''1:5.*'' are equivalent). A single number n is treated as if it were the range n:n. An arbitrary number of page selectors may be given, separated by commas or whitespace; a page is selected if any of the selectors matches its \\counts or absolute page number. Dviselect normally prints the page numbers of the pages selected; the -s option suppresses this.","Process Name":"dviselect","Link":"https:\/\/linux.die.net\/man\/1\/dviselect"}},{"Process":{"Description":"The command-line utility dvisvgm converts DVI files, as generated by TeX\/LaTeX, to the XML-based scalable vector graphics format SVG. Since the current SVG standard 1.1 doesn't specify multi-page graphics, dvisvgm creates separate SVG files for each DVI page. Because of compatibility reasons, only the first page is converted by default. In order to select a different page or arbitrary page sequences, use option -p which is described below. dvisvgm should properly convert all pages that are made up of fonts and rules only. However, the utility also supports a couple of DVI extensions defined in terms of DVI specials. For a more detailed overview, see section support of specials below. As SVG is a vector based graphics format, dvisvgm tries to convert the glyph outlines of all used fonts into scalable path descriptions. The fastest way to do that is to extract the path information from PFB (PostScript Type 1) files. So, if dvisvgm is able to find a PFB file for a required font, it will read the necessary information from this file. TeX's main source for font descriptions is Metafont though, which produces bitmap output. That's why not all obtainable TeX fonts are available in PFB format. In these cases, dvisvgm tries to vectorize Metafont's output (GF fonts) by tracing the glyph bitmaps. The results are not as perfect as most (manually optimized) PFB outlines but are nonetheless really nice in most cases.","Process Name":"dvisvgm","Link":"https:\/\/linux.die.net\/man\/1\/dvisvgm"}},{"Process":{"Description":"Dvitodvi rearranges pages from a DVI file, creating a new DVI file. Dvitodvi can be used to perform a large number of arbitrary re-arrangements of Documents, including arranging for printing 2-up, 4-up, booklets, reversing, selecting front or back sides of documents, scaling, etc. pagespecs follow the syntax: pagespecs = [modulo:][mag@]specs specs = spec[+specs][,specs] spec = [-]pageno[(xoff,yoff)] modulo is the number of pages in each block. The value of modulo should be greater than 0; the default value is 1. The optional mag parameter adjusts the file's magnification by the magnification specified. The magnification and modulo can be specified in reverse order if desired. specs are the page specifications for the pages in each block. The value of the pageno in each spec should be between 0 (for the first page in the block) and modulo-1 (for the last page in each block) inclusive. The optional dimensions xoff and yoff shift the page by the specified (positive) amount. xoff and yoff are in PostScript's points, but may be followed by the units cm or in to convert to centimetres or inches, or the flag w or h to specify as a multiple of the width or height. If the optional minus sign is specified, the page is relative to the end of the document, instead of the start. If page specs are separated by + the pages will be merged into one page; if they are separated by , they will be on separate pages. If there is only one page specification, with pageno zero, the pageno may be omitted. The -w option gives the width which is used by the w dimension specifier, and the -h option gives the height which is used by the h dimension specifier. These dimensions are also used (after scaling) to set the clipping path for each page. Dvitodvi normally prints the page numbers of the pages re-arranged; the -q option suppresses this.","Process Name":"dvitodvi","Link":"https:\/\/linux.die.net\/man\/1\/dvitodvi"}},{"Process":{"Description":"dvitomp translates the given dvifile to a MetaPost MPXFILE. The default mpxfile is the basename of dvifile extended with \".mpx\".","Process Name":"dvitomp","Link":"https:\/\/linux.die.net\/man\/1\/dvitomp"}},{"Process":{"Description":"This manual page is not meant to be exhaustive. The complete documentation for this version of TeX can be found in the info file or manual Web2C: A TeX implementation. The dvitype program translates a DVI (DeVice Independent) file output by (for example) tex(1) or gftodvi(1), to a file that humans can read. It also serves as a DVI file-validating program (i.e., if dvitype can read it, it's correct) and as an example of a DVI-reading program for future device drivers. The output file can include all commands, just the important ones, or none at all (in which case only errors are reported). A subinterval of pages may be selected for transliteration; the magnification and resolution of the ''output device'' may be changed; and so on. All options are specified with an on-line dialog. The .dvi extension is supplied if omitted from dvi_name. The output goes to stdout.","Process Name":"dvitype","Link":"https:\/\/linux.die.net\/man\/1\/dvitype"}},{"Process":{"Description":"dvtm is a dynamic tiling window manager for the console. As a console window manager it tries to make it easy to work with multiple console based applications.","Process Name":"dvtm","Link":"https:\/\/linux.die.net\/man\/1\/dvtm"}},{"Process":{"Description":"Dwatch is a program that watches over other programs and performs actions based on conditions specified in a configuration file. It is meant to be run from cron at regular intervals.","Process Name":"dwatch","Link":"https:\/\/linux.die.net\/man\/1\/dwatch"}},{"Process":{"Description":"dwdiff is a diff program that operates at the word level instead of the line level. It is different from wdiff in that it allows the user to specify what should be considered whitespace, and in that it takes an optional list of characters that should be considered delimiters. Delimiters are single characters that are treated as if they are words, even when there is no whitespace separating them from preceding words or delimiters. dwdiff is mostly command-line compatible with wdiff. Only the --autopager, --terminal and --avoid-wraps options are not supported. The default output from dwdiff is the new text, with the deleted and inserted parts annotated with markers. Command line options are available to change both what is printed, and the markers.","Process Name":"dwdiff","Link":"https:\/\/linux.die.net\/man\/1\/dwdiff"}},{"Process":{"Description":"The Dwell Click applet is part of the mousetweaks package. It can be used in conjuction with the \"Choose type of click beforehand\" mode of the dwell click function that resides in the Accessibility tab of the GNOME Mouse Preferences dialog. By clicking on the items on the Dwell Click applet, the user can select which automatic click type to perform next.","Process Name":"dwell-click-applet","Link":"https:\/\/linux.die.net\/man\/1\/dwell-click-applet"}},{"Process":{"Description":"dwfilter reformats the text in the old file according to the contents of the new file (or vice versa) and subsequently passes the reformated old file and the new file through a secondary filter. It's main use is to allow visual diff programs such as meld and kdiff3 to be used, eventhough a text file has been reformated after editing. A further use is to allow the creation of small patches even when the new text has been reformated. dwfilter uses dwdiff for reformatting.","Process Name":"dwfilter","Link":"https:\/\/linux.die.net\/man\/1\/dwfilter"}},{"Process":{"Description":"dxpc is an X protocol compressor designed to improve the speed of X11 applications run over low-bandwidth links (such as dialup PPP connections). dxpc must be run at both ends of a low-bandwidth link. On the host where the real X server is, dxpc runs in \"Server Proxy\" mode. On the host at the other end of the link, dxpc runs in \"Client Proxy\" mode. The Client Proxy dxpc must be started first. When the Server Proxy dxpc is started, it connects to the Client Proxy. (Note that versions of dxpc before 3.3.1 used the opposite convention.) If either of the two communicating dxpc instances is subsequently terminated, the other one automatically shuts down. The Client Proxy mimics an X server. X client applications connect to the Client Proxy using display \"unix:8\" (or \"<hostname>:8\"; dxpc supports both UNIX domain and TCP sockets). The Client Proxy receives X requests from the application, compresses them, and sends them to the Server Proxy. The Server Proxy uncompresses the requests and sends them to the real X server. Similarly, the Server Proxy receives X events, replies, and errors from the real X server. It compresses these messages and sends them to the Client Proxy, which uncompresses them and sends them to the client application. The compression performance of dxpc depends upon the types of X applications being run. For many applications, dxpc achieves between 3:1 and 6:1 compression of the X protocol traffic.","Process Name":"dxpc","Link":"https:\/\/linux.die.net\/man\/1\/dxpc"}},{"Process":{"Description":"dzeX11 is an interactive interface to the DZDOC (ZEBRA documentation) system developed at CERN. dzedit is a wrapper script around dzeX11 that allows one to set a few environment options. ZEBRA, part of the Packlib library, permits a developer to create complex data structures in the FORTRAN 77 language; the DZDOC system allows the developer to generate and maintain documentation of ZEBRA data structures.","Process Name":"dzedit","Link":"https:\/\/linux.die.net\/man\/1\/dzedit"}},{"Process":{"Description":"Dzen is a general-purpose messaging and notification program for X11, desigend to be scriptable in any language and integrate well with window managers like dwm, wmii and xmonad though it will work with any windowmanger. Dzen expects the status message on its standard input, and uses a custom formatting language for colors and several other features (like bar meters and such). See README for detailed usage and scripting instructions.","Process Name":"dzen2","Link":"https:\/\/linux.die.net\/man\/1\/dzen2"}},{"Process":{"Description":"dbar is an application that generates semi graphical progress meters, from some values you supply to it. See the usage examples for a description of the expected input format.","Process Name":"dzen2-dbar","Link":"https:\/\/linux.die.net\/man\/1\/dzen2-dbar"}},{"Process":{"Description":"gcpubar is a CPU utilization meter for Linux. It relies on the existence of the \/proc\/stat file and generates fully graphical meters viewable with dzen.","Process Name":"dzen2-gcpubar","Link":"https:\/\/linux.die.net\/man\/1\/dzen2-gcpubar"}},{"Process":{"Description":"gdbar application that generates fully graphical progress meters, from some values you supply to it. It has the same input semantics as dbar (see dbar (1) ). In contrast to dbar, gdbar draws fully graphical meters which are only useful in combination with dzen. See the usage examples for a description of the expected input format.","Process Name":"dzen2-gdbar","Link":"https:\/\/linux.die.net\/man\/1\/dzen2-gdbar"}},{"Process":{"Description":"textwidth is a simple utility to calculate the width in pixels of text with a given font. This tool is provided as part of the dzen2 (1) package.","Process Name":"dzen2-textwidth","Link":"https:\/\/linux.die.net\/man\/1\/dzen2-textwidth"}},{"Process":{"Description":"dzeX11 is an interactive interface to the DZDOC (ZEBRA documentation) system developed at CERN. dzedit is a wrapper script around dzeX11 that allows one to set a few environment options. ZEBRA, part of the Packlib library, permits a developer to create complex data structures in the FORTRAN 77 language; the DZDOC system allows the developer to generate and maintain documentation of ZEBRA data structures.","Process Name":"dzex11","Link":"https:\/\/linux.die.net\/man\/1\/dzex11"}}]